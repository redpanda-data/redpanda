cmake_minimum_required(VERSION 3.9.0)
project(build-deps NONE)
cmake_host_system_information(
  RESULT build_concurrency_factor
  QUERY NUMBER_OF_LOGICAL_CORES)
set(info_dir --infodir=@V_DEPS_INSTALL_DIR@/share/info)
include(ExternalProject)

set(c_flags "@BASE_C_FLAGS@ @CMAKE_C_FLAGS_BUILD_TYPE@")
set(cxx_flags "@BASE_CXX_FLAGS@ @CMAKE_CXX_FLAGS_BUILD_TYPE@ -std=c++17")
set(ld_flags "@BASE_LD_FLAGS@")
set(default_depends "")

set(common_cmake_args
  -DCMAKE_CXX_STANDARD=@CMAKE_CXX_STANDARD@
  -DCMAKE_CXX_EXTENSIONS=@CMAKE_CXX_EXTENSIONS@
  -DCMAKE_C_COMPILER=@CMAKE_C_COMPILER@
  -DCMAKE_CXX_COMPILER=@CMAKE_CXX_COMPILER@
  "-DCMAKE_C_FLAGS=@BASE_C_FLAGS@"
  "-DCMAKE_C_FLAGS_@BUILD_TYPE@=@CMAKE_C_FLAGS_BUILD_TYPE@"
  "-DCMAKE_CXX_FLAGS=@BASE_CXX_FLAGS@ -std=c++17"
  "-DCMAKE_CXX_FLAGS_@BUILD_TYPE@=@CMAKE_CXX_FLAGS_BUILD_TYPE@"
  "-DCMAKE_EXE_LINKER_FLAGS=@CMAKE_EXE_LINKER_FLAGS@"
  "-DCMAKE_SHARED_LINKER_FLAGS=@CMAKE_SHARED_LINKER_FLAGS@"
  "-DCMAKE_MODULE_LINKER_FLAGS=@CMAKE_MODULE_LINKER_FLAGS@"
  -DCMAKE_BUILD_TYPE=@CMAKE_BUILD_TYPE@
  -DCMAKE_PREFIX_PATH=@V_DEPS_INSTALL_DIR@
  -DCMAKE_INSTALL_PREFIX=@V_DEPS_INSTALL_DIR@
  -DCMAKE_INSTALL_RPATH=@V_DEPS_INSTALL_DIR@/lib
  -DCMAKE_SKIP_BUILD_RPATH=OFF
  -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON
  -DCMAKE_POSITION_INDEPENDENT_CODE=@CMAKE_POSITION_INDEPENDENT_CODE@
  -DCMAKE_VERBOSE_MAKEFILE=@CMAKE_VERBOSE_MAKEFILE@
)


# build environment variables

# pkgconfig
set(ENV{PKG_CONFIG_PATH}  @PKG_CONFIG_PATH@)

# cmake build environment (nothing currently required)
set(cmake_build_env)

# Find linker
execute_process(
  COMMAND
    @CMAKE_C_COMPILER@ @BASE_C_FLAGS@ -print-prog-name=ld
  OUTPUT_VARIABLE
    LD_PROGRAM
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

# Get absolute path
execute_process(
  COMMAND
    bash -c "type -p ${LD_PROGRAM}"
  OUTPUT_VARIABLE
    LD_PROGRAM
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

# Cache linker
set(LD ${LD_PROGRAM} CACHE FILEPATH "Linker")

if ("@CMAKE_CXX_COMPILER@" MATCHES "Clang")
  set(USE_LD lld)
else()
  set(USE_LD gold)
endif()

# seastar needs explicit -g and -lc++experimental on clang
if (@CMAKE_CXX_COMPILER_ID@ MATCHES "Clang")
  set(seastar_ld_flags "${ld_flags} -pthread -lc++experimental")
else ()
  set(seastar_ld_flags "${ld_flags} -pthread")
endif()
# autotools
set(base_env
  CC=@CMAKE_C_COMPILER@
  CXX=@CMAKE_CXX_COMPILER@
  LD=${LD}
  PKG_CONFIG_PATH=@PKG_CONFIG_PATH@
)
set(configure_env
  ${base_env}
  CFLAGS=${c_flags}
  CXXFLAGS=${cxx_flags}
  LDFLAGS=${ld_flags}
)
# For a libtool project
set(build_env
  ${base_env}
  CFLAGS=${c_flags}
  CXXFLAGS=${cxx_flags}
  # -Wc is needed for older libtool that doesn't pass -fuse-ld
  "LDFLAGS=${ld_flags} -Wc,-fuse-ld=${USE_LD}"
)
# nettle needs explicit path to headers
set(nettle_build_env
  ${base_env}
  CFLAGS=${c_flags}\ -I@V_DEPS_INSTALL_DIR@/include
  LDFLAGS=${ld_flags}
)
set(base64_build_env
  ${build_env}
  SSSE3_CFLAGS=-mssse3
  SSE41_CFLAGS=-msse4.1
  SSE42_CFLAGS=-msse4.2
# Not supported on westmere
#  AVX_CFLAGS=-mavx
#  AVX2_CFLAGS=-mavx2
)

# define make command in terms of cmake
set(make_command make ${build_env} -j${build_concurrency_factor} )


# ----------- compiler specific build configuration

if ("@CMAKE_CXX_COMPILER_ID@" MATCHES "Clang")
    set(toolset clang)
    set(dpdk_compiler clang)
    # Boost build user config
    set(boost_user_config_jam "using clang : : @CMAKE_CXX_COMPILER@ $<SEMICOLON>")
elseif (@CMAKE_CXX_COMPILER_ID@ STREQUAL "GNU")
    set(toolset gcc)
    # Boost build user config
    set(boost_user_config_jam "using gcc : : @CMAKE_CXX_COMPILER@ : $<SEMICOLON>")
endif()

# ----------- build-type specific build configuration

if ("@CMAKE_BUILD_TYPE@" MATCHES "Debug" OR "@CMAKE_BUILD_TYPE@" MATCHES "Dev")
  set(BOOST_BUILD_VARIANT debug)
else ()
  set(BOOST_BUILD_VARIANT release)
endif()


# ----------- dependencies below

ExternalProject_Add(zlib
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/zlib-1.2.11.tar.gz
  URL_MD5 1c9f62f0778697a09d36121ead88e08e
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
    ${common_cmake_args})

ExternalProject_Add(boost
  # The 1.67.0 release has a bug in Boost Lockfree around a missing header.
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/boost_1_71_0.tar.gz
  URL_MD5 5f521b41b79bf8616582c4a8a2c10177
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  PATCH_COMMAND
    ./bootstrap.sh
    --prefix=@V_DEPS_INSTALL_DIR@
    --with-libraries=atomic,chrono,date_time,filesystem,program_options,system,test,thread
    &&
    echo
    "${boost_user_config_jam}"
    > <SOURCE_DIR>/tools/build/src/user-config.jam
  CONFIGURE_COMMAND ""
  BUILD_COMMAND ""
  DEPENDS ${default_depends}
  INSTALL_COMMAND
    ${CMAKE_COMMAND} -E chdir <SOURCE_DIR>
    ./b2
    -j ${build_concurrency_factor}
    --toolset=${toolset}
    --layout=system
    --build-dir=<BINARY_DIR>
    install
    variant=${BOOST_BUILD_VARIANT}
    cflags=${c_flags}
    cxxflags=${cxx_flags}
    linkflags=${ld_flags}
    link=shared
    threading=multi
    hardcode-dll-paths=true
    dll-path=@V_DEPS_INSTALL_DIR@/lib)

ExternalProject_Add(fmt
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/fmt-7.0.3.tar.gz
  URL_MD5 57392b7ea09592a2b237a02950f35bb0
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  DEPENDS ${default_depends}
  CMAKE_ARGS
    ${common_cmake_args}
    -DFMT_INSTALL=ON
    -DFMT_DOC=OFF
    -DFMT_TEST=OFF)

ExternalProject_Add(protobuf
  DEPENDS zlib ${default_depends}
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/protobuf-v3.7.0.tar.gz
  URL_MD5 99ab003ca0e98c9dc40edbd60dd43633
  INSTALL_DIR   @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  SOURCE_SUBDIR cmake
  CMAKE_ARGS
    -Dprotobuf_BUILD_TESTS=OFF
    ${common_cmake_args})

if(@RP_ENABLE_DPDK@)
    set(dpdk_quadruple ${CMAKE_SYSTEM_PROCESSOR}-native-linuxapp-${toolset})

    set (dpdk_args
      EXTRA_CFLAGS=-Wno-error
      O=<BINARY_DIR>
      DESTDIR=@V_DEPS_INSTALL_DIR@
      T=${dpdk_quadruple})

    ExternalProject_Add(dpdk
      GIT_REPOSITORY https://github.com/vectorizedio/dpdk.git
      GIT_TAG 71db32d74
      INSTALL_DIR @V_DEPS_INSTALL_DIR@
      DEPENDS ${default_depends}
      PATCH_COMMAND

      CONFIGURE_COMMAND
        COMMAND
          ${CMAKE_COMMAND} -E chdir <SOURCE_DIR>
          make ${dpdk_args} config
        COMMAND
          ${CMAKE_COMMAND}
          -DSeastar_DPDK_CONFIG_FILE_IN=<BINARY_DIR>/.config
          -DSeastar_DPDK_CONFIG_FILE_CHANGES=@CMAKE_CURRENT_SOURCE_DIR@/dpdk_config
          -DSeastar_DPDK_CONFIG_FILE_OUT=<BINARY_DIR>/${dpdk_quadruple}/.config
          -P @CMAKE_CURRENT_SOURCE_DIR@/cmake/dpdk_configure.cmake
      BUILD_COMMAND ""
      INSTALL_COMMAND
       ${CMAKE_COMMAND} -E chdir <SOURCE_DIR>
       ${make_command} ${dpdk_args} install)
else()
    add_custom_target(dpdk)
endif()

ExternalProject_Add(c-ares
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/cares-1_14_0.tar.gz
  URL_MD5 79dcc4f2adaff431920755d9cafc9933
  DEPENDS ${default_depends}
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
    -DCARES_VERSION="1.14.0"
    ${common_cmake_args}
    -DCARES_INSTALL=ON)

ExternalProject_Add(yaml-cpp
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/yaml-cpp-0.6.0.tar.gz
  URL_MD5 8adc0ae6c2698a61ab086606cc7cf562
  DEPENDS ${default_depends}
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
    ${common_cmake_args}
    -DYAML_CPP_BUILD_TOOLS=OFF
    -DYAML_CPP_BUILD_TESTS=OFF
    -DBUILD_SHARED_LIBS=OFF)

ExternalProject_Add(gmp
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/gmp-6.1.2.tar.bz2
  URL_MD5 8ddbb26dc3bd4e2302984debba1406a5
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  CONFIGURE_COMMAND
    COMMAND
      ${CMAKE_COMMAND} -E env ${configure_env}
      autoreconf -ivf <SOURCE_DIR>
    COMMAND
      ${CMAKE_COMMAND} -E env ${configure_env}
      <SOURCE_DIR>/configure
      --prefix=<INSTALL_DIR>
      --srcdir=<SOURCE_DIR>
      --libdir=<INSTALL_DIR>/lib
      ${info_dir}/gmp
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install)

ExternalProject_Add(nettle
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/nettle-3.6.tar.gz
  URL_MD5 c45ee24ed7361dcda152a035d396fe8a
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  PATCH_COMMAND
    <SOURCE_DIR>/.bootstrap
  CONFIGURE_COMMAND
    COMMAND
      ${CMAKE_COMMAND} -E env ${nettle_build_env}
      autoreconf -ivf <SOURCE_DIR>
    COMMAND
      ${CMAKE_COMMAND} -E env ${nettle_build_env}
      <SOURCE_DIR>/configure
      --prefix=<INSTALL_DIR>
      --srcdir=<SOURCE_DIR>
      --libdir=<INSTALL_DIR>/lib
      --disable-documentation
      --enable-x86-aesni
  INSTALL_COMMAND ${make_command} install
  DEPENDS gmp ${default_depends})

ExternalProject_Add(gnutls
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/gnutls-3.6.14.tar.xz
  URL_MD5 bf70632d420e421baff482247f01dbfe
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  CONFIGURE_COMMAND
    COMMAND
      ${CMAKE_COMMAND} -E env ${configure_env}
      autoreconf -ivf <SOURCE_DIR>
    COMMAND
      ${CMAKE_COMMAND} -E env ${configure_env}
      <SOURCE_DIR>/configure
      --prefix=<INSTALL_DIR>
      --srcdir=<SOURCE_DIR>
      --libdir=<INSTALL_DIR>/lib
      --with-included-unistring
      --with-included-libtasn1
      --without-idn
      --without-p11-kit
      # https://lists.gnupg.org/pipermail/gnutls-help/2016-February/004085.html
      --disable-non-suiteb-curves
      --disable-doc
      --disable-tests
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install
  DEPENDS gmp nettle ${default_depends})

ExternalProject_Add(lz4
  GIT_REPOSITORY https://github.com/vectorizedio/lz4
  GIT_TAG 6b12fde42a3156441a994153997018940c5d8142
  DEPENDS ${default_depends}
  INSTALL_DIR   @V_DEPS_INSTALL_DIR@
  SOURCE_SUBDIR contrib/cmake_unofficial
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
    ${common_cmake_args}
    -DBUILD_STATIC_LIBS=ON
  )

ExternalProject_Add(numactl
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/numactl-2.0.12.tar.gz
  URL_MD5 2ba9777d78bfd7d408a387e53bc33ebc
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  CONFIGURE_COMMAND
    COMMAND
      ${CMAKE_COMMAND} -E env ${configure_env}
      autoreconf -ivf <SOURCE_DIR>
    COMMAND
      ${CMAKE_COMMAND} -E env ${configure_env}
      <SOURCE_DIR>/configure
      --prefix=<INSTALL_DIR>
      --srcdir=<SOURCE_DIR>
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install)

ExternalProject_Add(libpciaccess
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/libpciaccess-0.13.4.tar.gz
  URL_MD5 cc1fad87da60682af1d5fa43a5da45a4
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  CONFIGURE_COMMAND
    COMMAND
      ${CMAKE_COMMAND} -E env ${configure_env}
      autoreconf -ivf <SOURCE_DIR>
    COMMAND
      ${CMAKE_COMMAND} -E env ${configure_env}
      <SOURCE_DIR>/configure
      --prefix=<INSTALL_DIR>
      --srcdir=<SOURCE_DIR>
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install)

ExternalProject_Add(hwloc
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/hwloc-2.22-1af6d22.tar.gz
  URL_MD5 286d1b0459e7a3925717cfb47c5d6dad
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  CONFIGURE_COMMAND
    COMMAND
      ${CMAKE_COMMAND} -E env ${configure_env}
      autoreconf -ivf <SOURCE_DIR>
    COMMAND
      ${CMAKE_COMMAND} -E env ${configure_env}
      <SOURCE_DIR>/configure
      --disable-libudev
      --prefix=<INSTALL_DIR>
      --srcdir=<SOURCE_DIR>
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install
  DEPENDS ${default_depends} numactl libpciaccess)

ExternalProject_Add(xz
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/xz-5.2.2.tar.gz
  URL_MD5 7cf6a8544a7dae8e8106fdf7addfa28c
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  CONFIGURE_COMMAND
    COMMAND
      ${CMAKE_COMMAND} -E env ${configure_env}
      autoreconf -ivf <SOURCE_DIR>
    COMMAND
      ${CMAKE_COMMAND} -E env ${configure_env}
      <SOURCE_DIR>/configure
      --prefix=<INSTALL_DIR>
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install)

ExternalProject_Add(xml2
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/xml2-f8a8c1f.tar.gz
  URL_MD5 8717ac0b233af3ed1e47236afa6e7946
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  CONFIGURE_COMMAND
    COMMAND
      ${CMAKE_COMMAND} -E chdir <SOURCE_DIR>
      ${CMAKE_COMMAND} -E env ${configure_env}
        NOCONFIGURE=true ./autogen.sh
    COMMAND
      ${CMAKE_COMMAND} -E env ${configure_env}
      autoreconf -ivf <SOURCE_DIR>
    COMMAND
      ${CMAKE_COMMAND} -E env ${configure_env} LIBS=-ldl
      <SOURCE_DIR>/configure
      --without-python
      --with-zlib=@V_DEPS_INSTALL_DIR@/lib
      --with-lzma=@V_DEPS_INSTALL_DIR@/lib
      --prefix=<INSTALL_DIR>
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install
  DEPENDS ${default_depends} xz zlib)

ExternalProject_Add(cryptopp
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/CRYPTOPP_8_2_0.tar.gz
  URL_MD5 7b6f8cd8f4d9f5f6d1c018fc35db604e
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  DEPENDS ${default_depends}
  CMAKE_ARGS
     ${common_cmake_args}
    -DBUILD_TESTING=OFF)

ExternalProject_Add(lksctp-tools
  # Note: 1.0.18 has a bug w/ the build/configuration system that does not
  # produce sctp.h.in -> sctp.h and instead install sctp.h.in
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/lksctp-tools-1.0.17.tar.gz
  URL_MD5 910a4f1d4024d71149b91f50f97eae23
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  PATCH_COMMAND ./bootstrap
  DEPENDS ${default_depends}
  CONFIGURE_COMMAND
    COMMAND
      ${CMAKE_COMMAND} -E env ${configure_env}
      autoreconf -ivf <SOURCE_DIR>
    COMMAND
      ${CMAKE_COMMAND} -E env ${configure_env}
      <SOURCE_DIR>/configure
      --prefix=<INSTALL_DIR>
      --srcdir=<SOURCE_DIR>
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install)

ExternalProject_Add(valgrind
  GIT_REPOSITORY https://github.com/vectorizedio/valgrind-headers.git
  GIT_TAG f7de944
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  PATCH_COMMAND ""
  CONFIGURE_COMMAND ""
  BUILD_COMMAND ""
  INSTALL_COMMAND
  COMMAND ${CMAKE_COMMAND} -E copy <SOURCE_DIR>/valgrind.h <INSTALL_DIR>/include/valgrind/valgrind.h
  )

ExternalProject_Add(seastar
  GIT_REPOSITORY https://github.com/vectorizedio/seastar.git
  GIT_TAG 290f579f8f9dd72531194e5bd4e8a4a0a2ff4efd
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
    ${common_cmake_args}
    -DBoost_USE_STATIC_LIBS=OFF
    -DBoost_NO_BOOST_CMAKE=ON
    -DBoost_NO_SYSTEM_PATHS=TRUE
    -DProtobuf_USE_STATIC_LIBS=ON
    -DSeastar_INSTALL=ON
    -DSeastar_DPDK=@RP_ENABLE_DPDK@
    -DSeastar_APPS=ON
    -DSeastar_DEMOS=OFF
    -DSeastar_DOCS=OFF
    -DSeastar_TESTING=OFF
    -DSeastar_CXX_FLAGS=-Wno-error
    "-DSeastar_LD_FLAGS=${seastar_ld_flags}"
    -DSeastar_API_LEVEL=5
    -DSeastar_CXX_DIALECT=c++17
    -DSeastar_UNUSED_RESULT_ERROR=ON
  INSTALL_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install
  COMMAND cp -a apps/iotune/iotune @V_DEPS_INSTALL_DIR@/bin
  DEPENDS
    ${default_depends}
    dpdk
    fmt
    boost
    protobuf
    dpdk
    yaml-cpp
    c-ares
    gnutls
    lz4
    hwloc
    numactl
    xml2
    xz
    cryptopp
    lksctp-tools
    valgrind
    zlib)

ExternalProject_Add(zstd
  GIT_REPOSITORY https://github.com/vectorizedio/zstd
  GIT_TAG 1665462
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  SOURCE_SUBDIR  build/cmake
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  DEPENDS ${default_depends}
  CMAKE_ARGS
    ${common_cmake_args}
    -DZSTD_MULTITHREAD_SUPPORT=OFF
    -DZSTD_LEGACY_SUPPORT=OFF
    -DZSTD_BUILD_STATIC=ON
    -DZSTD_BUILD_SHARED=OFF
    -DZSTD_BUILD_PROGRAMS=OFF)

ExternalProject_Add(snappy
    GIT_REPOSITORY https://github.com/vectorizedio/snappy.git
    GIT_TAG f16eda3466633b88d0a55199deb00aa5429c6219
    INSTALL_DIR    @V_DEPS_INSTALL_DIR@
    CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
    DEPENDS ${default_depends}
    CMAKE_ARGS
      ${common_cmake_args}
      -DSNAPPY_INSTALL=ON
      -DSNAPPY_BUILD_TESTS=OFF)

ExternalProject_Add(HdrHistogram
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/hdrhistogram-7381c1b.tar.gz
  URL_MD5 7e9776c558fa9385776cb8c1e5ac7d1a
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
    ${common_cmake_args}
    -DHDR_HISTOGRAM_BUILD_PROGRAMS=OFF
    -DHDR_HISTOGRAM_BUILD_SHARED=OFF
  DEPENDS zlib ${default_depends})

ExternalProject_Add(xxhash
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/xxhash-c9970b8.tar.gz
  URL_MD5 c1c87865e98f79144814a1d57db47751
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  SOURCE_SUBDIR  cmake_unofficial
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
    ${common_cmake_args}
    -DBUILD_XXHSUM=OFF
    -DBUILD_SHARED_LIBS=OFF
    -DBUILD_ENABLE_INLINE_API=ON)

# -- below are seastar deps

ExternalProject_Add(GSL
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/gsl-0f68d13.tar.gz
  URL_MD5 d5cc382eadc5f757416d44d91d0222cf
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
    ${common_cmake_args}
    -DGSL_TEST=OFF)

ExternalProject_Add(pcg
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/pcg-b656278.tar.gz
  URL_MD5 576a4427f2c63ee15e36b5c88585569c
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  PATCH_COMMAND ""
  CONFIGURE_COMMAND ""
  BUILD_COMMAND ""
  INSTALL_COMMAND
  COMMAND ${CMAKE_COMMAND} -E copy <SOURCE_DIR>/include/pcg_extras.hpp <INSTALL_DIR>/include/pcg_extras.hpp
  COMMAND ${CMAKE_COMMAND} -E copy <SOURCE_DIR>/include/pcg_random.hpp <INSTALL_DIR>/include/pcg_random.hpp
  COMMAND ${CMAKE_COMMAND} -E copy <SOURCE_DIR>/include/pcg_uint128.hpp <INSTALL_DIR>/include/pcg_uint128.hpp
  )

ExternalProject_Add(abseil
  GIT_REPOSITORY https://github.com/vectorizedio/abseil-cpp.git
  GIT_TAG bcefbdcd
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  DEPENDS ${default_depends}
  CMAKE_ARGS
    ${common_cmake_args}
    -DABSL_ENABLE_INSTALL=ON
)

ExternalProject_Add(rapidjson
  GIT_REPOSITORY https://github.com/vectorizedio/rapidjson.git
  GIT_TAG 563fe5bbbea3505c930f233955bb420b799e86da
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  DEPENDS ${default_depends}
  CMAKE_ARGS
    ${common_cmake_args}
    -DRAPIDJSON_BUILD_EXAMPLES=OFF
    -DRAPIDJSON_BUILD_TESTS=OFF
    -DRAPIDJSON_BUILD_DOC=OFF
    -DRAPIDJSON_HAS_STDSTRING=ON
)

ExternalProject_Add(crc32c
  GIT_REPOSITORY https://github.com/vectorizedio/crc32c.git
  GIT_TAG 47b40d220949c5b013d49c1179643334196ec5a9
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  DEPENDS ${default_depends}
  CMAKE_ARGS
    ${common_cmake_args}
    -DCRC32C_BUILD_TESTS=0
    -DCRC32C_BUILD_BENCHMARKS=0
    -DCRC32C_USE_GLOG=0
  )

ExternalProject_Add(roaring
  GIT_REPOSITORY https://github.com/vectorizedio/CRoaring.git
  GIT_TAG 7b9c83740d4f764941d38144cc8e2122076e38e4
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
  ${common_cmake_args}
  -DENABLE_ROARING_TESTS=OFF
  -DROARING_BUILD_STATIC=ON
  -DROARING_DISABLE_NEON=ON # we target -march=westmere which doesn't have avx
  -DROARING_DISABLE_AVX=ON # we target -march=westmere which doesn't have avx
  -DROARING_DISABLE_NATIVE=ON)

ExternalProject_Add(alien_thread
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/alien_thread-bdfb56f.tar.gz
  URL_HASH SHA256=28f704566aed21bcc5944b1ad2003ee53cb40e2c424c1c917082d431f50f3911
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  PATCH_COMMAND ""
  CONFIGURE_COMMAND ""
  BUILD_COMMAND ""
  INSTALL_COMMAND
  COMMAND ${CMAKE_COMMAND} -E copy_directory <SOURCE_DIR>/include/v <INSTALL_DIR>/include/v)

ExternalProject_Add(librdkafka
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/librdkafka-v1.2.2.tar.gz
  URL_HASH SHA256=c5d6eb6ce080431f2996ee7e8e1f4b8f6c61455a1011b922e325e28e88d01b53
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends} boost zstd
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
    ${common_cmake_args}
    -DWITH_ZLIB=OFF
    -DWITH_ZSTD=OFF
    -DENABLE_LZ4_EXT=OFF
    -DRDKAFKA_BUILD_STATIC=ON
    -DRDKAFKA_BUILD_EXAMPLES=OFF
    -DRDKAFKA_BUILD_TESTS=OFF)

ExternalProject_Add(cppkafka
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/cppkafka-c3b4580.tar.gz
  URL_HASH SHA256=1989ecdab4325cf798db6f33f4ba171ecde46197496dfc1df7ec31a74d313f1d
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  DEPENDS librdkafka
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
    ${common_cmake_args}
    -DCPPKAFKA_BUILD_SHARED=OFF
    -DCPPKAFKA_RDKAFKA_STATIC_LIB=ON
    -DCPPKAFKA_BOOST_STATIC_LIBS=OFF
    -DCPPKAFKA_DISABLE_EXAMPLES=OFF
    -DCPPKAFKA_DISABLE_TESTS=OFF)

ExternalProject_Add(kafka-python-pex
  DOWNLOAD_COMMAND ""
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  PATCH_COMMAND ""
  CONFIGURE_COMMAND ""
  BUILD_COMMAND ""
  INSTALL_COMMAND
    COMMAND ${CMAKE_COMMAND} -E chdir <SOURCE_DIR> python3 -m venv env
    COMMAND <SOURCE_DIR>/env/bin/pip install pex
    COMMAND <SOURCE_DIR>/env/bin/pex kafka-python -o <INSTALL_DIR>/bin/kafka-python-env
)

ExternalProject_Add(kafka-codegen-pex
  DOWNLOAD_COMMAND ""
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  PATCH_COMMAND ""
  CONFIGURE_COMMAND ""
  BUILD_COMMAND ""
  INSTALL_COMMAND
    COMMAND ${CMAKE_COMMAND} -E chdir <SOURCE_DIR> python3 -m venv env
    COMMAND <SOURCE_DIR>/env/bin/pip install pex
    COMMAND <SOURCE_DIR>/env/bin/pex jsonschema jinja2 -o <INSTALL_DIR>/bin/kafka-codegen-venv
)

ExternalProject_Add(base64_ext
  URL https://storage.googleapis.com/vectorizedio-public/dependencies/base64-eaebee8.tar.xz
  URL_MD5 1fd5d4d053cc08c11f20e48188a28063
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  CONFIGURE_COMMAND ""
  BUILD_COMMAND
    ${CMAKE_COMMAND} -E env ${base64_build_env}
    make ${base64_build_env} lib/libbase64.o -j${build_concurrency_factor}
  BUILD_IN_SOURCE true
  INSTALL_COMMAND
    COMMAND ${CMAKE_COMMAND} -E copy <SOURCE_DIR>/include/libbase64.h <INSTALL_DIR>/include/libbase64.h
    COMMAND ${CMAKE_COMMAND} -E copy <SOURCE_DIR>/lib/libbase64.o <INSTALL_DIR>/lib/libbase64.o
)
