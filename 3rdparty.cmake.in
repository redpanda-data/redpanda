cmake_minimum_required(VERSION 3.9.0)
project(build-deps NONE)
cmake_host_system_information(
  RESULT build_concurrency_factor
  QUERY NUMBER_OF_LOGICAL_CORES)
set(make_command make -j ${build_concurrency_factor})
set(info_dir --infodir=@V_DEPS_INSTALL_DIR@/share/info)
include(ExternalProject)

set(cxx_flags "@BASE_CXX_FLAGS@")
set(ld_flags "@BASE_LD_FLAGS@")
set(default_depends "")
set(luajit_c_compiler "")
set(boost_link_flags "")
set(boost_cxx_flags "")
set(common_cmake_args 
    -DCMAKE_BUILD_TYPE=@CMAKE_BUILD_TYPE@ 
    -DCMAKE_PREFIX_PATH=@V_DEPS_INSTALL_DIR@ 
    -DCMAKE_INSTALL_PREFIX=@V_DEPS_INSTALL_DIR@ 
    -DCMAKE_INSTALL_RPATH=@V_DEPS_INSTALL_DIR@/lib 
    -DCMAKE_SKIP_BUILD_RPATH=OFF
    -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON)

if (@CMAKE_CXX_COMPILER_ID@ MATCHES "Clang")
    set(toolset clang)
    set(dpdk_compiler clang)
    # Boost build user config
    set(boost_user_config_jam "using clang : : @CMAKE_CXX_COMPILER@ $<SEMICOLON>")
    set(default_depends libcxx)
    # Luajit settings
    set(luajit_c_compiler CC=$ENV{CC})
    ExternalProject_Add(libcxxabi
        SOURCE_DIR @CMAKE_BINARY_DIR@/../llvm/llvm-src/libcxxabi
        INSTALL_DIR @V_DEPS_INSTALL_DIR@
        CMAKE_ARGS
            ${common_cmake_args}
            -DLLVM_PATH=@CMAKE_BINARY_DIR@/../llvm/llvm-src/llvm
            -DLIBCXXABI_LIBCXX_PATH=@CMAKE_BINARY_DIR@/../llvm/llvm-src/libcxx)
    ExternalProject_Add(libcxx
        SOURCE_DIR @CMAKE_BINARY_DIR@/../llvm/llvm-src/libcxx
        INSTALL_DIR @V_DEPS_INSTALL_DIR@
        CMAKE_ARGS
            ${common_cmake_args}
            -DLLVM_PATH=@CMAKE_BINARY_DIR@/../llvm/llvm-src/llvm
            -DLIBCXX_CXX_ABI=libcxxabi
            -DLIBCXX_CXX_ABI_INCLUDE_PATHS=@CMAKE_BINARY_DIR@/../llvm/llvm-src/libcxxabi/include
            -DLIBCXX_CXX_ABI_LIBRARY_PATH=@V_DEPS_INSTALL_DIR@/lib
            DEPENDS libcxxabi)
elseif (@CMAKE_CXX_COMPILER_ID@ STREQUAL "GNU")
    set(toolset gcc)
    # Boost build user config
    set(boost_user_config_jam "using gcc : : @CMAKE_CXX_COMPILER@ : $<SEMICOLON>")
endif()

# CMake build environment
set(cmake_build_env LDFLAGS=${ld_flags}\ -L@V_DEPS_INSTALL_DIR@/lib\ -L@V_DEPS_INSTALL_DIR@/lib64
                    CXXFLAGS=-std=gnu++17\ ${cxx_flags})
# CRYPTOPP does not build with C++17
set(cryptopp_build_env LDFLAGS=${ld_flags}\ -L@V_DEPS_INSTALL_DIR@/lib\ -L@V_DEPS_INSTALL_DIR@/lib64
                       CXXFLAGS=${cxx_flags})

# Build environment for autotools
set(build_env
    CFLAGS=-I@V_DEPS_INSTALL_DIR@/include
    CXXFLAGS=${cxx_flags}\ -I@V_DEPS_INSTALL_DIR@/include
    LDFLAGS=${ld_flags}\ -L@V_DEPS_INSTALL_DIR@/lib\ -L@V_DEPS_INSTALL_DIR@/lib64
    PKG_CONFIG_PATH=@V_DEPS_INSTALL_DIR@/lib/pkgconfig)

# Boost settings
if(ld_flags)
    set(boost_link_flags linkflags=${ld_flags}\ -L@V_DEPS_INSTALL_DIR@/lib\ -L@V_DEPS_INSTALL_DIR@/lib64)
endif()
if(cxx_flags)
    set(boost_cxx_flags cxxflags=${cxx_flags})
endif()

ExternalProject_Add(boost
  # The 1.67.0 release has a bug in Boost Lockfree around a missing header.
  URL https://dl.bintray.com/boostorg/release/1.70.0/source/boost_1_70_0.tar.gz
  URL_MD5 fea771fe8176828fabf9c09242ee8c26
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  PATCH_COMMAND
    ./bootstrap.sh
    --prefix=@V_DEPS_INSTALL_DIR@
    --with-libraries=atomic,chrono,date_time,filesystem,program_options,system,test,thread
    &&
    echo
    "${boost_user_config_jam}"
    > <SOURCE_DIR>/tools/build/src/user-config.jam
  CONFIGURE_COMMAND ""
  BUILD_COMMAND ""
  DEPENDS ${default_depends}
  INSTALL_COMMAND
    ${CMAKE_COMMAND} -E chdir <SOURCE_DIR>
    ./b2
    -j ${build_concurrency_factor}
    --toolset=${toolset}
    --layout=system
    --build-dir=<BINARY_DIR>
    install
    variant=release
    cflags=-fPIC
    cxxflags=-fPIC
    link=shared
    ${boost_cxx_flags}
    ${boost_link_flags}
    threading=multi
    hardcode-dll-paths=true
    dll-path=@V_DEPS_INSTALL_DIR@/lib)

ExternalProject_Add(fmt
  URL https://github.com/fmtlib/fmt/archive/9e554999ce02cf86fcdfe74fe740c4fe3f5a56d5.tar.gz
  URL_MD5 e2869a5032a6cc35b4d14008b6125ed9
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  DEPENDS ${default_depends}
  CMAKE_ARGS
    ${common_cmake_args}
    -DFMT_INSTALL=ON
    -DFMT_DOC=OFF
    -DFMT_TEST=OFF)

ExternalProject_Add(zlib
  URL https://zlib.net/zlib-1.2.11.tar.gz
  URL_MD5 1c9f62f0778697a09d36121ead88e08e
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  CONFIGURE_COMMAND
    ${CMAKE_COMMAND} -E env ${build_env}
    <SOURCE_DIR>/configure
    --prefix=<INSTALL_DIR>
    --libdir=<INSTALL_DIR>/lib
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install)

ExternalProject_Add(protobuf
  DEPENDS zlib ${default_depends}
  URL https://github.com/protocolbuffers/protobuf/archive/v3.7.0.tar.gz
  URL_MD5 99ab003ca0e98c9dc40edbd60dd43633
  INSTALL_DIR   @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  SOURCE_SUBDIR cmake
  CMAKE_ARGS
    -Dprotobuf_BUILD_TESTS=OFF
    ${common_cmake_args})

if(@RP_ENABLE_DPDK@)
    set(dpdk_quadruple ${CMAKE_SYSTEM_PROCESSOR}-native-linuxapp-${toolset})

    set (dpdk_args
      EXTRA_CFLAGS=-Wno-error
      O=<BINARY_DIR>
      DESTDIR=@V_DEPS_INSTALL_DIR@
      T=${dpdk_quadruple})

    ExternalProject_Add(dpdk
      URL https://github.com/scylladb/dpdk/archive/a1774652fbbb1fe7c0ff392d5e66de60a0154df6.tar.gz
      URL_MD5 2af337f9ed29955362845808d6cdaa3e
      INSTALL_DIR @V_DEPS_INSTALL_DIR@
      DEPENDS ${default_depends}
      PATCH_COMMAND

      CONFIGURE_COMMAND
        COMMAND
          ${CMAKE_COMMAND} -E chdir <SOURCE_DIR>
          make ${dpdk_args} config
        COMMAND
          ${CMAKE_COMMAND}
          -DSeastar_DPDK_CONFIG_FILE_IN=<BINARY_DIR>/.config
          -DSeastar_DPDK_CONFIG_FILE_CHANGES=@CMAKE_CURRENT_SOURCE_DIR@/dpdk_config
          -DSeastar_DPDK_CONFIG_FILE_OUT=<BINARY_DIR>/${dpdk_quadruple}/.config
          -P @CMAKE_CURRENT_SOURCE_DIR@/cmake/dpdk_configure.cmake
      BUILD_COMMAND ""
      INSTALL_COMMAND
       ${CMAKE_COMMAND} -E chdir <SOURCE_DIR>
       ${make_command} ${dpdk_args} install)
else()
    add_custom_target(dpdk)
endif()

ExternalProject_Add(c-ares
  URL https://github.com/c-ares/c-ares/archive/cares-1_14_0.tar.gz
  URL_MD5 79dcc4f2adaff431920755d9cafc9933
  DEPENDS ${default_depends}
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
    -DCARES_VERSION="1.14.0"
    ${common_cmake_args}
    -DCARES_INSTALL=ON)

ExternalProject_Add(yaml-cpp
  URL https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-0.6.0.tar.gz
  URL_MD5 8adc0ae6c2698a61ab086606cc7cf562
  DEPENDS ${default_depends}
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
    ${common_cmake_args}
    -DYAML_CPP_BUILD_TOOLS=OFF
    -DYAML_CPP_BUILD_TESTS=OFF
    -DBUILD_SHARED_LIBS=OFF)

ExternalProject_Add(gmp
  URL https://gmplib.org/download/gmp/gmp-6.1.2.tar.bz2
  URL_MD5 8ddbb26dc3bd4e2302984debba1406a5
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  CONFIGURE_COMMAND
    ${CMAKE_COMMAND} -E env ${build_env}
    <SOURCE_DIR>/configure
    --prefix=<INSTALL_DIR>
    --srcdir=<SOURCE_DIR>
    --libdir=<INSTALL_DIR>/lib
    ${info_dir}/gmp
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install)

ExternalProject_Add(nettle
  URL https://github.com/gnutls/nettle/archive/nettle_3.4_release_20171119.tar.gz
  URL_MD5 84747a2a1468bf9345e3e94bfb938169
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  PATCH_COMMAND
    <SOURCE_DIR>/.bootstrap
  CONFIGURE_COMMAND
    ${CMAKE_COMMAND} -E env ${build_env}
    <SOURCE_DIR>/configure
    --prefix=<INSTALL_DIR>
    --srcdir=<SOURCE_DIR>
    --libdir=<INSTALL_DIR>/lib
    ${info_dir}/nettle
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install
  DEPENDS gmp ${default_depends})

ExternalProject_Add(gnutls
  URL https://www.gnupg.org/ftp/gcrypt/gnutls/v3.5/gnutls-3.5.18.tar.xz
  URL_MD5 c2d93d305ecbc55939bc2a8ed4a76a3d
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  CONFIGURE_COMMAND
   ${CMAKE_COMMAND} -E env ${build_env}
    <SOURCE_DIR>/configure
    --prefix=<INSTALL_DIR>
    --srcdir=<SOURCE_DIR>
    --libdir=<INSTALL_DIR>/lib
    --with-included-unistring
    --with-included-libtasn1
    --without-idn
    --without-p11-kit
    # https://lists.gnupg.org/pipermail/gnutls-help/2016-February/004085.html
    --disable-non-suiteb-curves
    --disable-doc
    ${build_env}
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install
  DEPENDS gmp nettle ${default_depends})

ExternalProject_Add(lz4
  URL https://github.com/lz4/lz4/archive/v1.8.3.tar.gz
  URL_MD5 d5ce78f7b1b76002bbfffa6f78a5fc4e
  DEPENDS ${default_depends}
  INSTALL_DIR   @V_DEPS_INSTALL_DIR@
  SOURCE_SUBDIR contrib/cmake_unofficial
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
    ${common_cmake_args})

ExternalProject_Add(numactl
  URL https://github.com/numactl/numactl/releases/download/v2.0.12/numactl-2.0.12.tar.gz
  URL_MD5 2ba9777d78bfd7d408a387e53bc33ebc
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  CONFIGURE_COMMAND
    ${CMAKE_COMMAND} -E env ${build_env}
    <SOURCE_DIR>/configure
    --prefix=<INSTALL_DIR>
    --srcdir=<SOURCE_DIR>
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install)

ExternalProject_Add(libpciaccess
  URL https://www.x.org/releases/individual/lib/libpciaccess-0.13.4.tar.gz
  URL_MD5 cc1fad87da60682af1d5fa43a5da45a4
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  CONFIGURE_COMMAND
    ${CMAKE_COMMAND} -E env ${build_env}
    <SOURCE_DIR>/configure
    --prefix=<INSTALL_DIR>
    --srcdir=<SOURCE_DIR>
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install)

ExternalProject_Add(hwloc
  URL https://download.open-mpi.org/release/hwloc/v1.11/hwloc-1.11.5.tar.gz
  URL_MD5 8f5fe6a9be2eb478409ad5e640b2d3ba
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  CONFIGURE_COMMAND
    ${CMAKE_COMMAND} -E env ${build_env}
    <SOURCE_DIR>/configure
    --disable-libudev
    --prefix=<INSTALL_DIR>
    --srcdir=<SOURCE_DIR>
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install
  DEPENDS ${default_depends} numactl libpciaccess)

ExternalProject_Add(xz
  URL https://github.com/xz-mirror/xz/releases/download/v5.2.2/xz-5.2.2.tar.gz
  URL_MD5 7cf6a8544a7dae8e8106fdf7addfa28c
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  CONFIGURE_COMMAND
    ${CMAKE_COMMAND} -E env ${build_env}
    <SOURCE_DIR>/configure
    --prefix=<INSTALL_DIR>
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install)

ExternalProject_Add(xml2
  URL https://github.com/GNOME/libxml2/archive/f8a8c1f59db355b46962577e7b74f1a1e8149dc6.tar.gz
  URL_MD5 8717ac0b233af3ed1e47236afa6e7946
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  CONFIGURE_COMMAND
    COMMAND
      ${CMAKE_COMMAND} -E chdir <SOURCE_DIR>
      ${CMAKE_COMMAND} -E env ${build_env}
        NOCONFIGURE=true ./autogen.sh
    COMMAND
    ${CMAKE_COMMAND} -E env ${build_env}
      <SOURCE_DIR>/configure
      --without-python
      --with-zlib=@V_DEPS_INSTALL_DIR@/lib
      --with-lzma=@V_DEPS_INSTALL_DIR@/lib
      --prefix=<INSTALL_DIR>
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install
  DEPENDS ${default_depends} xz zlib)

ExternalProject_Add(cryptopp
  URL https://github.com/weidai11/cryptopp/archive/CRYPTOPP_5_6_5.tar.gz
  URL_MD5 88224d9c0322f63aa1fb5b8ae78170f0
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cryptopp_build_env} ${CMAKE_COMMAND}
  DEPENDS ${default_depends}
  CMAKE_ARGS
    ${common_cmake_args}
    -DBUILD_TESTING=OFF)

ExternalProject_Add(lksctp-tools
  # Note: 1.0.18 has a bug w/ the build/configuration system that does not
  # produce sctp.h.in -> sctp.h and instead install sctp.h.in
  URL https://github.com/sctp/lksctp-tools/archive/lksctp-tools-1.0.17.tar.gz
  URL_MD5 910a4f1d4024d71149b91f50f97eae23
  INSTALL_DIR @V_DEPS_INSTALL_DIR@
  PATCH_COMMAND ./bootstrap
  DEPENDS ${default_depends}
  CONFIGURE_COMMAND
    ${CMAKE_COMMAND} -E env ${build_env}
    <SOURCE_DIR>/configure
    --prefix=<INSTALL_DIR>
    --srcdir=<SOURCE_DIR>
  BUILD_COMMAND ${make_command}
  INSTALL_COMMAND ${make_command} install)

ExternalProject_Add(seastar
  URL https://github.com/vectorizedio/seastar/archive/cd38452d.tar.gz
  URL_MD5 282f28305918ec65017c21719de5b887
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
    ${common_cmake_args}
    -DBoost_USE_STATIC_LIBS:BOOL=OFF
    -DBoost_NO_BOOST_CMAKE:BOOL=ON
    -DSeastar_INSTALL=ON
    -DSeastar_DPDK=@RP_ENABLE_DPDK@
    -DSeastar_APPS=ON
    -DSeastar_DEMOS=OFF
    -DSeastar_DOCS=OFF
    -DSeastar_TESTING=OFF
    -DSeastar_CXX_FLAGS=-Wno-error
    -DSeastar_STD_OPTIONAL_VARIANT_STRINGVIEW=ON
    -DSeastar_CXX_DIALECT=c++17
  DEPENDS
    ${default_depends}
    fmt
    boost
    protobuf
    dpdk
    yaml-cpp
    c-ares
    gnutls
    lz4
    hwloc
    numactl
    xml2
    xz
    cryptopp
    lksctp-tools
    zlib)

ExternalProject_Add(zstd
  URL https://github.com/facebook/zstd/archive/470344d33e1d52a2ada75d278466da8d4ee2faf6.tar.gz
  URL_MD5 52368c486e11c0f21990c8f2d4b556f9
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  SOURCE_SUBDIR  build/cmake
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  DEPENDS ${default_depends}
  CMAKE_ARGS
    ${common_cmake_args}
    -DZSTD_MULTITHREAD_SUPPORT=OFF
    -DZSTD_LEGACY_SUPPORT=OFF
    -DZSTD_BUILD_STATIC=ON
    -DZSTD_BUILD_SHARED=OFF
    -DZSTD_BUILD_PROGRAMS=OFF)

ExternalProject_Add(HdrHistogram
  URL https://github.com/HdrHistogram/HdrHistogram_c/archive/7381c1bf78d462917cf31b736d5d9e700bfedb0f.tar.gz
  URL_MD5 7e9776c558fa9385776cb8c1e5ac7d1a
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
    ${common_cmake_args}
    -DHDR_HISTOGRAM_BUILD_PROGRAMS=OFF
    -DHDR_HISTOGRAM_BUILD_SHARED=OFF
  DEPENDS zlib ${default_depends})

ExternalProject_Add(xxhash
  URL https://github.com/Cyan4973/xxHash/archive/c9970b8ec4155e789f1c3682da923869a496ba9d.tar.gz
  URL_MD5 c1c87865e98f79144814a1d57db47751
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  SOURCE_SUBDIR  cmake_unofficial
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
    ${common_cmake_args}
    -DBUILD_XXHSUM=OFF
    -DBUILD_SHARED_LIBS=OFF
    -DBUILD_ENABLE_INLINE_API=ON)

# -- below are seastar deps

ExternalProject_Add(GSL
  URL https://github.com/Microsoft/GSL/archive/0f68d13.tar.gz
  URL_MD5 d5cc382eadc5f757416d44d91d0222cf
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  DEPENDS ${default_depends}
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  CMAKE_ARGS
    ${common_cmake_args}
    -DGSL_TEST=OFF)

ExternalProject_Add(pcg
  URL https://github.com/imneme/pcg-cpp/archive/b656278.tar.gz
  URL_MD5 576a4427f2c63ee15e36b5c88585569c
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  PATCH_COMMAND ""
  CONFIGURE_COMMAND ""
  BUILD_COMMAND ""
  INSTALL_COMMAND
  COMMAND ${CMAKE_COMMAND} -E copy <SOURCE_DIR>/include/pcg_extras.hpp <INSTALL_DIR>/include/pcg_extras.hpp
  COMMAND ${CMAKE_COMMAND} -E copy <SOURCE_DIR>/include/pcg_random.hpp <INSTALL_DIR>/include/pcg_random.hpp
  COMMAND ${CMAKE_COMMAND} -E copy <SOURCE_DIR>/include/pcg_uint128.hpp <INSTALL_DIR>/include/pcg_uint128.hpp
  )

ExternalProject_Add(bytellhashmap
  URL https://github.com/skarupke/flat_hash_map/archive/2c46874.tar.gz
  URL_MD5 0ed67930d4b3795d3fb2ab6ac721b66d
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  PATCH_COMMAND ""
  CONFIGURE_COMMAND ""
  BUILD_COMMAND ""
  INSTALL_COMMAND
  COMMAND ${CMAKE_COMMAND} -E copy <SOURCE_DIR>/bytell_hash_map.hpp <INSTALL_DIR>/include/bytell_hash_map.hpp
  COMMAND ${CMAKE_COMMAND} -E copy <SOURCE_DIR>/flat_hash_map.hpp <INSTALL_DIR>/include/flat_hash_map.hpp
  )

ExternalProject_Add(json
  URL https://github.com/nlohmann/json/releases/download/v3.7.0/include.zip
  URL_MD5 482c9cd8b6ba9749e018c3f3664afb36
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  PATCH_COMMAND ""
  CONFIGURE_COMMAND ""
  BUILD_COMMAND ""
  INSTALL_COMMAND
  COMMAND ${CMAKE_COMMAND} -E copy_directory <SOURCE_DIR>/nlohmann <INSTALL_DIR>/include/nlohmann)

ExternalProject_Add(crc32c
  URL https://github.com/google/crc32c/archive/fd33bccdf4824716df2552f7addd735264f77872.tar.gz
  URL_MD5 21c86fb3143fb748a52d11b9fee874de
  INSTALL_DIR    @V_DEPS_INSTALL_DIR@
  CMAKE_COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env} ${CMAKE_COMMAND}
  DEPENDS ${default_depends}
  CMAKE_ARGS
    ${common_cmake_args}
    -DCRC32C_BUILD_TESTS=0
    -DCRC32C_BUILD_BENCHMARKS=0
    -DCRC32C_USE_GLOG=0
  )

