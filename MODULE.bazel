module(
    name = "redpanda",
    repo_name = "com_github_redpanda_data_redpanda",
)

bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    commit = "a14ad3a64e7bf398ab48105aaa0348e032ac87f8",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
)

bazel_dep(name = "rules_boost", repo_name = "com_github_nelhage_rules_boost")
archive_override(
    module_name = "rules_boost",
    integrity = "sha256-Sk6Rjh7r4pUyRYQ4QO2qhgZYvdkWbyrLJTCl9oY6Z7I=",
    strip_prefix = "rules_boost-21cd44506bd15e06db89aa2866b9be90002d8eec",
    urls = "https://github.com/nelhage/rules_boost/archive/21cd44506bd15e06db89aa2866b9be90002d8eec.tar.gz",
)

bazel_dep(name = "rules_go", version = "0.49.0")
git_override(
    module_name = "rules_go",
    commit = "e51bc8d0d39d87fc32125aa39480b418bb04f2fe",
    remote = "https://github.com/bazelbuild/rules_go.git",
)

non_module_boost_repositories = use_extension("@com_github_nelhage_rules_boost//:boost/repositories.bzl", "non_module_dependencies")
use_repo(
    non_module_boost_repositories,
    "boost",
)

bazel_dep(name = "abseil-cpp", version = "20240722.0")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "crc32c", version = "1.1.0")
bazel_dep(name = "fmt", version = "8.1.1")
bazel_dep(name = "gazelle", version = "0.38.0")
bazel_dep(name = "googletest", version = "1.15.2")
bazel_dep(name = "liburing", version = "2.5")
bazel_dep(name = "lz4", version = "1.9.4")
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "protobuf", version = "27.3")
bazel_dep(name = "re2", version = "2024-07-02")
bazel_dep(name = "rules_foreign_cc", version = "0.10.1")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_proto", version = "6.0.2")
bazel_dep(name = "rules_rust", version = "0.49.3")
bazel_dep(name = "snappy", version = "1.2.1")
bazel_dep(name = "yaml-cpp", version = "0.8.0")
bazel_dep(name = "zlib", version = "1.3.1.bcr.3")
bazel_dep(name = "zstd", version = "1.5.6")

bazel_dep(name = "buildifier_prebuilt", version = "6.4.0", dev_dependency = True)
bazel_dep(name = "rules_python", version = "0.33.2", dev_dependency = True)

python = use_extension("@rules_python//python/extensions:python.bzl", "python", dev_dependency = True)
python.toolchain(
    ignore_root_user_error = True,
    is_default = True,
    python_version = "3.12",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    extra_pip_args = ["--require-hashes"],
    hub_name = "python_deps",
    python_version = "3.12",
    requirements_lock = "//bazel/thirdparty:requirements.txt",
)
use_repo(pip, "python_deps")

non_module_dependencies = use_extension("//bazel:extensions.bzl", "non_module_dependencies")
use_repo(non_module_dependencies, "ada")
use_repo(non_module_dependencies, "avro")
use_repo(non_module_dependencies, "base64")
use_repo(non_module_dependencies, "c-ares")
use_repo(non_module_dependencies, "hdrhistogram")
use_repo(non_module_dependencies, "hwloc")
use_repo(non_module_dependencies, "jsoncons")
use_repo(non_module_dependencies, "krb5")
use_repo(non_module_dependencies, "libpciaccess")
use_repo(non_module_dependencies, "libprotobuf_mutator")
use_repo(non_module_dependencies, "libxml2")
use_repo(non_module_dependencies, "lksctp")
use_repo(non_module_dependencies, "numactl")
use_repo(non_module_dependencies, "openssl")
use_repo(non_module_dependencies, "openssl-fips")

# non-BCR rapidjson is used because BCR publishes v1.1.0 from 2016, and Redpanda
# depends on newer changes since the last tagged upstream version.
use_repo(non_module_dependencies, "rapidjson")
use_repo(non_module_dependencies, "roaring")
use_repo(non_module_dependencies, "seastar")
use_repo(non_module_dependencies, "unordered_dense")
use_repo(non_module_dependencies, "wasmtime")
use_repo(non_module_dependencies, "xxhash")

bazel_dep(name = "toolchains_llvm", version = "1.1.2")
git_override(
    module_name = "toolchains_llvm",
    commit = "a7ac0ad3e4ce01f5390e7413c4e06ac4baf1807d",
    remote = "https://github.com/mmaslankaprv/toolchains_llvm",
)

# ====================================
# LLVM toolchain
# ====================================

# NOTE: We build our toolchains on ubuntu:jammy so you're going to need a distro at least that old.
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")

CXX_STANDARD = "c++20"

llvm.toolchain(
    name = "llvm_17_toolchain",
    cxx_standard = {"": CXX_STANDARD},
    llvm_versions = {
        "": "17.0.6",
    },
    sha256 = {
        "linux-aarch64": "259da3d332e2080ecfe5a059dedb8f485f0b20e6ed2e3880bc5a5b57084f4036",
        "linux-x86_64": "2c06b2acb362a10b9e7ac3b0aebdccd710a5329d9c7ee46c10889fdf00a41b9f",
    },
    urls = {
        "linux-aarch64": ["http://redpanda-core-toolchain.s3-website-us-east-1.amazonaws.com/llvm-17.0.6-ubuntu-22.04-aarch64.tar.gz"],
        "linux-x86_64": ["http://redpanda-core-toolchain.s3-website-us-east-1.amazonaws.com/llvm-17.0.6-ubuntu-22.04-x86_64.tar.gz"],
    },
)
use_repo(llvm, "llvm_17_toolchain", "llvm_17_toolchain_llvm")

register_toolchains("@llvm_17_toolchain//:all")

llvm.toolchain(
    name = "llvm_18_toolchain",
    cxx_standard = {"": CXX_STANDARD},
    llvm_versions = {
        "": "18.1.8",
    },
    sha256 = {
        "linux-aarch64": "95223a9fd35a2cfea2582b34519bbf65ff6bed498a378eb545a9d4fb8ee5a832",
        "linux-x86_64": "f79565afd6f5d270c10a11cbe4d4b59ecf807df29051af2b479daf4524aa9c73",
    },
    urls = {
        "linux-aarch64": ["http://redpanda-core-toolchain.s3-website-us-east-1.amazonaws.com/llvm-18.1.8-ubuntu-22.04-aarch64.tar.gz"],
        "linux-x86_64": ["http://redpanda-core-toolchain.s3-website-us-east-1.amazonaws.com/llvm-18.1.8-ubuntu-22.04-x86_64.tar.gz"],
    },
)
use_repo(llvm, "llvm_18_toolchain", "llvm_18_toolchain_llvm")

register_toolchains("@llvm_18_toolchain//:all")

# ====================================
# Go Toolchain
# ====================================
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.23.0")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_work = "//:go.work")
use_repo(
    go_deps,
    "com_github_actgardner_gogen_avro_v10",
    "com_github_hamba_avro",
    "com_github_redpanda_data_redpanda_src_transform_sdk_go_transform",
    "com_github_stretchr_testify",
    "com_github_testcontainers_testcontainers_go",
    "com_github_testcontainers_testcontainers_go_modules_redpanda",
    "com_github_twmb_franz_go",
    "com_github_twmb_franz_go_pkg_kadm",
    "com_github_twmb_franz_go_pkg_kmsg",
    "com_github_twmb_franz_go_pkg_sr",
)

# ====================================
# Rust Toolchain
# ====================================
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.80.0"],
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

crate = use_extension(
    "@rules_rust//crate_universe:extension.bzl",
    "crate",
)
crate.from_cargo(
    name = "crates",
    cargo_lockfile = "//bazel/thirdparty:Cargo.lock",
    manifests = ["//bazel/thirdparty:Cargo.toml"],
)
use_repo(crate, "crates")
crate.annotation(
    additive_build_file = "//bazel/thirdparty:wasmtime.BUILD",
    crate = "wasmtime-c-api-impl",
    extra_aliased_targets = {"wasmtime_c": "wasmtime_c"},
    gen_build_script = "off",
)
