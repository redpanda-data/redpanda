#!/usr/bin/env python

import asyncio
import sys
import argparse

from gobekli.kvapi import KVNode
from gobekli.workloads import symmetrical_mrsw
from gobekli.logging import init_logs

async def mrsw_aio(kvs, writers, readers, duration, ss_metrics, cmd_log, latency_log, stat_log):
    init_logs(cmd_log, latency_log, stat_log, ss_metrics)
    
    nodes = []
    for i in range(0, len(kvs)):
        nodes.append(KVNode(kvs[i], kvs[i]))
    
    await symmetrical_mrsw.start_mrsw_workload_aio(nodes, writers, readers, duration, ss_metrics)
    
    for kv in nodes:
        await kv.close_aio()

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('workload', choices=['mrsw'])
parser.add_argument('--kv', action='append', required=True)
parser.add_argument('--cmd-log', default="cmd.log", required=False, help="command log")
parser.add_argument('--latency-log', default="latency.log", required=False, help="latency log")
parser.add_argument('--stat-log', default="stat.log", required=False, help="stat log")
parser.add_argument('--duration', type=int, default=120, required=False, help="duration")
parser.add_argument('--writers', type=int, default=3, required=False, help="writers per kv")
parser.add_argument('--readers', type=int, default=3, required=False, help="readers per writer per kv")
parser.add_argument('--ss-metric', action='append', required=False)

args = parser.parse_args()

if args.workload == "mrsw":
    asyncio.run(mrsw_aio(args.kv, args.writers, args.readers, args.duration, args.ss_metric, args.cmd_log, args.latency_log, args.stat_log))