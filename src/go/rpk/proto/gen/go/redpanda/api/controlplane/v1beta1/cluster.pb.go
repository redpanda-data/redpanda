// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: redpanda/api/controlplane/v1beta1/cluster.proto

package controlplanev1beta1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/redpanda-data/redpanda/src/go/rpk/proto/gen/go/redpanda/api/common/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State describes the state of the cluster.
type Cluster_State int32

const (
	Cluster_STATE_UNSPECIFIED    Cluster_State = 0
	Cluster_STATE_CREATING_AGENT Cluster_State = 1
	Cluster_STATE_CREATING       Cluster_State = 2
	Cluster_STATE_READY          Cluster_State = 3
	Cluster_STATE_DELETING       Cluster_State = 4
	Cluster_STATE_DELETING_AGENT Cluster_State = 5
	Cluster_STATE_UPGRADING      Cluster_State = 6
	Cluster_STATE_FAILED         Cluster_State = 7
)

// Enum value maps for Cluster_State.
var (
	Cluster_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_CREATING_AGENT",
		2: "STATE_CREATING",
		3: "STATE_READY",
		4: "STATE_DELETING",
		5: "STATE_DELETING_AGENT",
		6: "STATE_UPGRADING",
		7: "STATE_FAILED",
	}
	Cluster_State_value = map[string]int32{
		"STATE_UNSPECIFIED":    0,
		"STATE_CREATING_AGENT": 1,
		"STATE_CREATING":       2,
		"STATE_READY":          3,
		"STATE_DELETING":       4,
		"STATE_DELETING_AGENT": 5,
		"STATE_UPGRADING":      6,
		"STATE_FAILED":         7,
	}
)

func (x Cluster_State) Enum() *Cluster_State {
	p := new(Cluster_State)
	*p = x
	return p
}

func (x Cluster_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cluster_State) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_enumTypes[0].Descriptor()
}

func (Cluster_State) Type() protoreflect.EnumType {
	return &file_redpanda_api_controlplane_v1beta1_cluster_proto_enumTypes[0]
}

func (x Cluster_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cluster_State.Descriptor instead.
func (Cluster_State) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 0}
}

// Type of the Cluster. Immutable. Can only be set on cluster creation.
type Cluster_Type int32

const (
	Cluster_TYPE_UNSPECIFIED Cluster_Type = 0
	Cluster_TYPE_DEDICATED   Cluster_Type = 1
	Cluster_TYPE_BYOC        Cluster_Type = 2
)

// Enum value maps for Cluster_Type.
var (
	Cluster_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_DEDICATED",
		2: "TYPE_BYOC",
	}
	Cluster_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_DEDICATED":   1,
		"TYPE_BYOC":        2,
	}
)

func (x Cluster_Type) Enum() *Cluster_Type {
	p := new(Cluster_Type)
	*p = x
	return p
}

func (x Cluster_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cluster_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_enumTypes[1].Descriptor()
}

func (Cluster_Type) Type() protoreflect.EnumType {
	return &file_redpanda_api_controlplane_v1beta1_cluster_proto_enumTypes[1]
}

func (x Cluster_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cluster_Type.Descriptor instead.
func (Cluster_Type) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 1}
}

// ConnectionType describes the cluster connection type of a Redpanda Cluster.
// Private clusters are not exposted to the internet.
type Cluster_ConnectionType int32

const (
	Cluster_CONNECTION_TYPE_UNSPECIFIED Cluster_ConnectionType = 0
	Cluster_CONNECTION_TYPE_PUBLIC      Cluster_ConnectionType = 1
	Cluster_CONNECTION_TYPE_PRIVATE     Cluster_ConnectionType = 2
)

// Enum value maps for Cluster_ConnectionType.
var (
	Cluster_ConnectionType_name = map[int32]string{
		0: "CONNECTION_TYPE_UNSPECIFIED",
		1: "CONNECTION_TYPE_PUBLIC",
		2: "CONNECTION_TYPE_PRIVATE",
	}
	Cluster_ConnectionType_value = map[string]int32{
		"CONNECTION_TYPE_UNSPECIFIED": 0,
		"CONNECTION_TYPE_PUBLIC":      1,
		"CONNECTION_TYPE_PRIVATE":     2,
	}
)

func (x Cluster_ConnectionType) Enum() *Cluster_ConnectionType {
	p := new(Cluster_ConnectionType)
	*p = x
	return p
}

func (x Cluster_ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cluster_ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_enumTypes[2].Descriptor()
}

func (Cluster_ConnectionType) Type() protoreflect.EnumType {
	return &file_redpanda_api_controlplane_v1beta1_cluster_proto_enumTypes[2]
}

func (x Cluster_ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cluster_ConnectionType.Descriptor instead.
func (Cluster_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 2}
}

// CreateClusterMetadata provides in-progress information about a CreateCluster Operation.
type CreateClusterMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the Cluster created by this operation.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,proto3" json:"cluster_id,omitempty"`
}

func (x *CreateClusterMetadata) Reset() {
	*x = CreateClusterMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterMetadata) ProtoMessage() {}

func (x *CreateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterMetadata.ProtoReflect.Descriptor instead.
func (*CreateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *CreateClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// DeleteClusterMetadata provides in-progress information about a DeleteCluster Operation.
type DeleteClusterMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteClusterMetadata) Reset() {
	*x = DeleteClusterMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterMetadata) ProtoMessage() {}

func (x *DeleteClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterMetadata) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{1}
}

// UpdateClusterMetadata provides in-progress information about a UpdateCluster Operation.
type UpdateClusterMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateClusterMetadata) Reset() {
	*x = UpdateClusterMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterMetadata) ProtoMessage() {}

func (x *UpdateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{2}
}

// MTLSSpec describes the mTLS configuration of a component.
type MTLSSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled           bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	CaCertificatesPem []string `protobuf:"bytes,2,rep,name=ca_certificates_pem,proto3" json:"ca_certificates_pem,omitempty"`
}

func (x *MTLSSpec) Reset() {
	*x = MTLSSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTLSSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTLSSpec) ProtoMessage() {}

func (x *MTLSSpec) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTLSSpec.ProtoReflect.Descriptor instead.
func (*MTLSSpec) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *MTLSSpec) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MTLSSpec) GetCaCertificatesPem() []string {
	if x != nil {
		return x.CaCertificatesPem
	}
	return nil
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the cluster. ID is an output of CreateCluster, and cannot be set by the caller.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the cluster.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace where the cluster will be placed.
	NamespaceId string `protobuf:"bytes,3,opt,name=namespace_id,proto3" json:"namespace_id,omitempty"`
	// Timestamp when the cluster was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,proto3" json:"created_at,omitempty"`
	// Timestamp when the cluster was updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,proto3" json:"updated_at,omitempty"`
	// State of the cluster
	State            Cluster_State  `protobuf:"varint,6,opt,name=state,proto3,enum=redpanda.api.controlplane.v1beta1.Cluster_State" json:"state,omitempty"`
	StateDescription *status.Status `protobuf:"bytes,23,opt,name=state_description,json=stateDescription,proto3" json:"state_description,omitempty"`
	// Desired redpanda version when creating a cluster, only major.minor semver
	// supported on creation.
	RedpandaVersion string                 `protobuf:"bytes,7,opt,name=redpanda_version,json=redpandaVersion,proto3" json:"redpanda_version,omitempty"`
	ThroughputTier  string                 `protobuf:"bytes,8,opt,name=throughput_tier,proto3" json:"throughput_tier,omitempty"`
	Type            Cluster_Type           `protobuf:"varint,9,opt,name=type,proto3,enum=redpanda.api.controlplane.v1beta1.Cluster_Type" json:"type,omitempty"`
	ConnectionType  Cluster_ConnectionType `protobuf:"varint,10,opt,name=connection_type,proto3,enum=redpanda.api.controlplane.v1beta1.Cluster_ConnectionType" json:"connection_type,omitempty"`
	// Network ID referst to the network of the cluster.
	NetworkId string `protobuf:"bytes,11,opt,name=network_id,proto3" json:"network_id,omitempty"`
	// Cloud Provider where the cluster is created
	CloudProvider CloudProvider `protobuf:"varint,12,opt,name=cloud_provider,proto3,enum=redpanda.api.controlplane.v1beta1.CloudProvider" json:"cloud_provider,omitempty"`
	// Region represents the name of the region where the cluster will be provisioned.
	Region string `protobuf:"bytes,13,opt,name=region,proto3" json:"region,omitempty"`
	// Zones of the cluster. Must be valid zones within the selected region.
	// If multiple zones are used, the cluster is a multi-AZ cluster.
	Zones                    []string                          `protobuf:"bytes,14,rep,name=zones,proto3" json:"zones,omitempty"`
	KafkaApi                 *Cluster_KafkaAPI                 `protobuf:"bytes,16,opt,name=kafka_api,proto3" json:"kafka_api,omitempty"`
	HttpProxy                *Cluster_HTTPProxy                `protobuf:"bytes,17,opt,name=http_proxy,proto3" json:"http_proxy,omitempty"`
	RedpandaConsole          *Cluster_RedpandaConsole          `protobuf:"bytes,18,opt,name=redpanda_console,proto3" json:"redpanda_console,omitempty"`
	SchemaRegistry           *Cluster_SchemaRegistry           `protobuf:"bytes,19,opt,name=schema_registry,proto3" json:"schema_registry,omitempty"`
	Prometheus               *Cluster_Prometheus               `protobuf:"bytes,20,opt,name=prometheus,proto3" json:"prometheus,omitempty"`
	CustomerManagedResources *Cluster_CustomerManagedResources `protobuf:"bytes,21,opt,name=customer_managed_resources,proto3" json:"customer_managed_resources,omitempty"`
	PrivateLink              *Cluster_PrivateLinkSpec          `protobuf:"bytes,22,opt,name=private_link,json=privateLink,proto3" json:"private_link,omitempty"`
	DataplaneApi             *Cluster_DataplaneAPI             `protobuf:"bytes,24,opt,name=dataplane_api,proto3" json:"dataplane_api,omitempty"`
	// Tags that are placed on Cloud resources.
	CloudTags map[string]string `protobuf:"bytes,25,rep,name=cloud_tags,json=cloudTags,proto3" json:"cloud_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *Cluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *Cluster) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Cluster) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Cluster) GetState() Cluster_State {
	if x != nil {
		return x.State
	}
	return Cluster_STATE_UNSPECIFIED
}

func (x *Cluster) GetStateDescription() *status.Status {
	if x != nil {
		return x.StateDescription
	}
	return nil
}

func (x *Cluster) GetRedpandaVersion() string {
	if x != nil {
		return x.RedpandaVersion
	}
	return ""
}

func (x *Cluster) GetThroughputTier() string {
	if x != nil {
		return x.ThroughputTier
	}
	return ""
}

func (x *Cluster) GetType() Cluster_Type {
	if x != nil {
		return x.Type
	}
	return Cluster_TYPE_UNSPECIFIED
}

func (x *Cluster) GetConnectionType() Cluster_ConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return Cluster_CONNECTION_TYPE_UNSPECIFIED
}

func (x *Cluster) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *Cluster) GetCloudProvider() CloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return CloudProvider_CLOUD_PROVIDER_UNSPECIFIED
}

func (x *Cluster) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Cluster) GetZones() []string {
	if x != nil {
		return x.Zones
	}
	return nil
}

func (x *Cluster) GetKafkaApi() *Cluster_KafkaAPI {
	if x != nil {
		return x.KafkaApi
	}
	return nil
}

func (x *Cluster) GetHttpProxy() *Cluster_HTTPProxy {
	if x != nil {
		return x.HttpProxy
	}
	return nil
}

func (x *Cluster) GetRedpandaConsole() *Cluster_RedpandaConsole {
	if x != nil {
		return x.RedpandaConsole
	}
	return nil
}

func (x *Cluster) GetSchemaRegistry() *Cluster_SchemaRegistry {
	if x != nil {
		return x.SchemaRegistry
	}
	return nil
}

func (x *Cluster) GetPrometheus() *Cluster_Prometheus {
	if x != nil {
		return x.Prometheus
	}
	return nil
}

func (x *Cluster) GetCustomerManagedResources() *Cluster_CustomerManagedResources {
	if x != nil {
		return x.CustomerManagedResources
	}
	return nil
}

func (x *Cluster) GetPrivateLink() *Cluster_PrivateLinkSpec {
	if x != nil {
		return x.PrivateLink
	}
	return nil
}

func (x *Cluster) GetDataplaneApi() *Cluster_DataplaneAPI {
	if x != nil {
		return x.DataplaneApi
	}
	return nil
}

func (x *Cluster) GetCloudTags() map[string]string {
	if x != nil {
		return x.CloudTags
	}
	return nil
}

// CreateClusterRequest is the request of CreateCluster.
type CreateClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *CreateClusterRequest) Reset() {
	*x = CreateClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterRequest) ProtoMessage() {}

func (x *CreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *CreateClusterRequest) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// GetClusterRequest is the request of GetCluster.
type GetClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *GetClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// UpdateClusterRequest is the request of UpdateCluster.
type UpdateClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster    *Cluster               `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateClusterRequest) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *UpdateClusterRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// UpdateClusterResponse is the resposne of UpdateCluster. It is provided by
// the Operation returned by UpdateCluster once the Operation is done.
type UpdateClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *UpdateClusterResponse) Reset() {
	*x = UpdateClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterResponse) ProtoMessage() {}

func (x *UpdateClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdateClusterResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// ListClustersRequest is the request of ListClusters.
type ListClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter   *ListClustersRequest_Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	PageSize int32                       `protobuf:"varint,3,opt,name=page_size,proto3" json:"page_size,omitempty"`
	// Value of the next_page_token field returned by the previous response. If not provided, the system assumes the first page is requested.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,proto3" json:"page_token,omitempty"`
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{9}
}

func (x *ListClustersRequest) GetFilter() *ListClustersRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListClustersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClustersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListClustersResponse is the response of ListClusters.
type ListClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// Page Token to fetch the next page. The value can be used as next_page_token in the next call to this endpoint. If the response respresents the final page, this field is not set.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{10}
}

func (x *ListClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ListClustersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// DeleteClusterRequest is the request of DeleteCluster.
type DeleteClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// DeleteClusterResponse is the response of DeleteCluster. It is provided by
// the Operation returned by DeleteCluster once the Operation is done.
type DeleteClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteClusterResponse) Reset() {
	*x = DeleteClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterResponse) ProtoMessage() {}

func (x *DeleteClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{12}
}

type Cluster_KafkaAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kafka API Seed Brokers (also known as Bootstrap servers).
	SeedBrokers []string `protobuf:"bytes,1,rep,name=seed_brokers,proto3" json:"seed_brokers,omitempty"`
	// Kafka TLS configurations.
	Mtls *MTLSSpec `protobuf:"bytes,2,opt,name=mtls,proto3" json:"mtls,omitempty"`
}

func (x *Cluster_KafkaAPI) Reset() {
	*x = Cluster_KafkaAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_KafkaAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_KafkaAPI) ProtoMessage() {}

func (x *Cluster_KafkaAPI) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_KafkaAPI.ProtoReflect.Descriptor instead.
func (*Cluster_KafkaAPI) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Cluster_KafkaAPI) GetSeedBrokers() []string {
	if x != nil {
		return x.SeedBrokers
	}
	return nil
}

func (x *Cluster_KafkaAPI) GetMtls() *MTLSSpec {
	if x != nil {
		return x.Mtls
	}
	return nil
}

type Cluster_HTTPProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mtls *MTLSSpec `protobuf:"bytes,1,opt,name=mtls,proto3" json:"mtls,omitempty"`
	// HTTP Proxy URL.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Cluster_HTTPProxy) Reset() {
	*x = Cluster_HTTPProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_HTTPProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_HTTPProxy) ProtoMessage() {}

func (x *Cluster_HTTPProxy) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_HTTPProxy.ProtoReflect.Descriptor instead.
func (*Cluster_HTTPProxy) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Cluster_HTTPProxy) GetMtls() *MTLSSpec {
	if x != nil {
		return x.Mtls
	}
	return nil
}

func (x *Cluster_HTTPProxy) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Cluster_RedpandaConsole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Cluster_RedpandaConsole) Reset() {
	*x = Cluster_RedpandaConsole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_RedpandaConsole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_RedpandaConsole) ProtoMessage() {}

func (x *Cluster_RedpandaConsole) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_RedpandaConsole.ProtoReflect.Descriptor instead.
func (*Cluster_RedpandaConsole) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 2}
}

func (x *Cluster_RedpandaConsole) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Cluster_SchemaRegistry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mtls *MTLSSpec `protobuf:"bytes,1,opt,name=mtls,proto3" json:"mtls,omitempty"`
	// Schema Registry URL.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Cluster_SchemaRegistry) Reset() {
	*x = Cluster_SchemaRegistry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_SchemaRegistry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_SchemaRegistry) ProtoMessage() {}

func (x *Cluster_SchemaRegistry) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_SchemaRegistry.ProtoReflect.Descriptor instead.
func (*Cluster_SchemaRegistry) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 3}
}

func (x *Cluster_SchemaRegistry) GetMtls() *MTLSSpec {
	if x != nil {
		return x.Mtls
	}
	return nil
}

func (x *Cluster_SchemaRegistry) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Cluster_Prometheus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Cluster_Prometheus) Reset() {
	*x = Cluster_Prometheus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_Prometheus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_Prometheus) ProtoMessage() {}

func (x *Cluster_Prometheus) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_Prometheus.ProtoReflect.Descriptor instead.
func (*Cluster_Prometheus) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 4}
}

func (x *Cluster_Prometheus) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// The cloud resources created by user.
type Cluster_CustomerManagedResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CloudProvider:
	//
	//	*Cluster_CustomerManagedResources_Gcp
	CloudProvider isCluster_CustomerManagedResources_CloudProvider `protobuf_oneof:"cloud_provider"`
}

func (x *Cluster_CustomerManagedResources) Reset() {
	*x = Cluster_CustomerManagedResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_CustomerManagedResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_CustomerManagedResources) ProtoMessage() {}

func (x *Cluster_CustomerManagedResources) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_CustomerManagedResources.ProtoReflect.Descriptor instead.
func (*Cluster_CustomerManagedResources) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 5}
}

func (m *Cluster_CustomerManagedResources) GetCloudProvider() isCluster_CustomerManagedResources_CloudProvider {
	if m != nil {
		return m.CloudProvider
	}
	return nil
}

func (x *Cluster_CustomerManagedResources) GetGcp() *Cluster_CustomerManagedResources_GCP {
	if x, ok := x.GetCloudProvider().(*Cluster_CustomerManagedResources_Gcp); ok {
		return x.Gcp
	}
	return nil
}

type isCluster_CustomerManagedResources_CloudProvider interface {
	isCluster_CustomerManagedResources_CloudProvider()
}

type Cluster_CustomerManagedResources_Gcp struct {
	// GCP defines GCP resources created by user.
	Gcp *Cluster_CustomerManagedResources_GCP `protobuf:"bytes,1,opt,name=gcp,proto3,oneof"`
}

func (*Cluster_CustomerManagedResources_Gcp) isCluster_CustomerManagedResources_CloudProvider() {}

// Describes specifics about GCP PSC or AWS Private Link.
type Cluster_PrivateLinkSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indication on whether Redpanda AWS Private Link Endpoint Service is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Types that are assignable to CloudProvider:
	//
	//	*Cluster_PrivateLinkSpec_Aws
	//	*Cluster_PrivateLinkSpec_Gcp
	CloudProvider isCluster_PrivateLinkSpec_CloudProvider `protobuf_oneof:"cloud_provider"`
	// The status of Redpanda Private Link Service.
	Status *Cluster_PrivateLinkSpec_PrivateLinkStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Cluster_PrivateLinkSpec) Reset() {
	*x = Cluster_PrivateLinkSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_PrivateLinkSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_PrivateLinkSpec) ProtoMessage() {}

func (x *Cluster_PrivateLinkSpec) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_PrivateLinkSpec.ProtoReflect.Descriptor instead.
func (*Cluster_PrivateLinkSpec) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 6}
}

func (x *Cluster_PrivateLinkSpec) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (m *Cluster_PrivateLinkSpec) GetCloudProvider() isCluster_PrivateLinkSpec_CloudProvider {
	if m != nil {
		return m.CloudProvider
	}
	return nil
}

func (x *Cluster_PrivateLinkSpec) GetAws() *Cluster_PrivateLinkSpec_AWS {
	if x, ok := x.GetCloudProvider().(*Cluster_PrivateLinkSpec_Aws); ok {
		return x.Aws
	}
	return nil
}

func (x *Cluster_PrivateLinkSpec) GetGcp() *Cluster_PrivateLinkSpec_GCP {
	if x, ok := x.GetCloudProvider().(*Cluster_PrivateLinkSpec_Gcp); ok {
		return x.Gcp
	}
	return nil
}

func (x *Cluster_PrivateLinkSpec) GetStatus() *Cluster_PrivateLinkSpec_PrivateLinkStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type isCluster_PrivateLinkSpec_CloudProvider interface {
	isCluster_PrivateLinkSpec_CloudProvider()
}

type Cluster_PrivateLinkSpec_Aws struct {
	Aws *Cluster_PrivateLinkSpec_AWS `protobuf:"bytes,2,opt,name=aws,proto3,oneof"`
}

type Cluster_PrivateLinkSpec_Gcp struct {
	Gcp *Cluster_PrivateLinkSpec_GCP `protobuf:"bytes,3,opt,name=gcp,proto3,oneof"`
}

func (*Cluster_PrivateLinkSpec_Aws) isCluster_PrivateLinkSpec_CloudProvider() {}

func (*Cluster_PrivateLinkSpec_Gcp) isCluster_PrivateLinkSpec_CloudProvider() {}

type Cluster_DataplaneAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Cluster_DataplaneAPI) Reset() {
	*x = Cluster_DataplaneAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_DataplaneAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_DataplaneAPI) ProtoMessage() {}

func (x *Cluster_DataplaneAPI) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_DataplaneAPI.ProtoReflect.Descriptor instead.
func (*Cluster_DataplaneAPI) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 7}
}

func (x *Cluster_DataplaneAPI) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// GCP resources created by user.
type Cluster_CustomerManagedResources_GCP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GCP subnet where Redpanda cluster is deployed.
	Subnet *Cluster_CustomerManagedResources_GCP_Subnet `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	// GCP service account for the agent.
	AgentServiceAccount *Cluster_CustomerManagedResources_GCP_ServiceAccount `protobuf:"bytes,2,opt,name=agent_service_account,proto3" json:"agent_service_account,omitempty"`
	// GCP service account for the Redpanda console.
	ConsoleServiceAccount *Cluster_CustomerManagedResources_GCP_ServiceAccount `protobuf:"bytes,3,opt,name=console_service_account,proto3" json:"console_service_account,omitempty"`
	// GCP service account for the connectors.
	ConnectorServiceAccount *Cluster_CustomerManagedResources_GCP_ServiceAccount `protobuf:"bytes,4,opt,name=connector_service_account,proto3" json:"connector_service_account,omitempty"`
	// GCP service account for the Redpanda cluster.
	RedpandaClusterServiceAccount *Cluster_CustomerManagedResources_GCP_ServiceAccount `protobuf:"bytes,5,opt,name=redpanda_cluster_service_account,proto3" json:"redpanda_cluster_service_account,omitempty"`
	// GCP service account for GKE (GCP Kubernetes Engine).
	GkeServiceAccount *Cluster_CustomerManagedResources_GCP_ServiceAccount `protobuf:"bytes,6,opt,name=gke_service_account,proto3" json:"gke_service_account,omitempty"`
	// GCP storage bucket for tiered storage.
	TieredStorageBucket *CustomerManagedGoogleCloudStorageBucket `protobuf:"bytes,7,opt,name=tiered_storage_bucket,proto3" json:"tiered_storage_bucket,omitempty"`
	// NAT subnet name if GCP Private Service Connect (a.k.a Private Link) is enabled.
	PscNatSubnetName string `protobuf:"bytes,8,opt,name=psc_nat_subnet_name,json=pscNatSubnetName,proto3" json:"psc_nat_subnet_name,omitempty"`
}

func (x *Cluster_CustomerManagedResources_GCP) Reset() {
	*x = Cluster_CustomerManagedResources_GCP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_CustomerManagedResources_GCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_CustomerManagedResources_GCP) ProtoMessage() {}

func (x *Cluster_CustomerManagedResources_GCP) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_CustomerManagedResources_GCP.ProtoReflect.Descriptor instead.
func (*Cluster_CustomerManagedResources_GCP) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 5, 0}
}

func (x *Cluster_CustomerManagedResources_GCP) GetSubnet() *Cluster_CustomerManagedResources_GCP_Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *Cluster_CustomerManagedResources_GCP) GetAgentServiceAccount() *Cluster_CustomerManagedResources_GCP_ServiceAccount {
	if x != nil {
		return x.AgentServiceAccount
	}
	return nil
}

func (x *Cluster_CustomerManagedResources_GCP) GetConsoleServiceAccount() *Cluster_CustomerManagedResources_GCP_ServiceAccount {
	if x != nil {
		return x.ConsoleServiceAccount
	}
	return nil
}

func (x *Cluster_CustomerManagedResources_GCP) GetConnectorServiceAccount() *Cluster_CustomerManagedResources_GCP_ServiceAccount {
	if x != nil {
		return x.ConnectorServiceAccount
	}
	return nil
}

func (x *Cluster_CustomerManagedResources_GCP) GetRedpandaClusterServiceAccount() *Cluster_CustomerManagedResources_GCP_ServiceAccount {
	if x != nil {
		return x.RedpandaClusterServiceAccount
	}
	return nil
}

func (x *Cluster_CustomerManagedResources_GCP) GetGkeServiceAccount() *Cluster_CustomerManagedResources_GCP_ServiceAccount {
	if x != nil {
		return x.GkeServiceAccount
	}
	return nil
}

func (x *Cluster_CustomerManagedResources_GCP) GetTieredStorageBucket() *CustomerManagedGoogleCloudStorageBucket {
	if x != nil {
		return x.TieredStorageBucket
	}
	return nil
}

func (x *Cluster_CustomerManagedResources_GCP) GetPscNatSubnetName() string {
	if x != nil {
		return x.PscNatSubnetName
	}
	return ""
}

// Subnet defines the GCP subnet where Redpanda cluster is deployed.
// GCP API: https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks
type Cluster_CustomerManagedResources_GCP_Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subnet name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Secondary IPv4 range for pods.
	SecondaryIpv4RangePods *Cluster_CustomerManagedResources_GCP_Subnet_SecondaryIPv4Range `protobuf:"bytes,3,opt,name=secondary_ipv4_range_pods,proto3" json:"secondary_ipv4_range_pods,omitempty"`
	// Secondary IPv4 range for services.
	SecondaryIpv4RangeServices *Cluster_CustomerManagedResources_GCP_Subnet_SecondaryIPv4Range `protobuf:"bytes,4,opt,name=secondary_ipv4_range_services,proto3" json:"secondary_ipv4_range_services,omitempty"`
	// Kubernetes Master IPv4 range, e.g. 10.0.0.0/24.
	K8SMasterIpv4Range string `protobuf:"bytes,5,opt,name=k8s_master_ipv4_range,proto3" json:"k8s_master_ipv4_range,omitempty"`
}

func (x *Cluster_CustomerManagedResources_GCP_Subnet) Reset() {
	*x = Cluster_CustomerManagedResources_GCP_Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_CustomerManagedResources_GCP_Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_CustomerManagedResources_GCP_Subnet) ProtoMessage() {}

func (x *Cluster_CustomerManagedResources_GCP_Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_CustomerManagedResources_GCP_Subnet.ProtoReflect.Descriptor instead.
func (*Cluster_CustomerManagedResources_GCP_Subnet) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 5, 0, 0}
}

func (x *Cluster_CustomerManagedResources_GCP_Subnet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster_CustomerManagedResources_GCP_Subnet) GetSecondaryIpv4RangePods() *Cluster_CustomerManagedResources_GCP_Subnet_SecondaryIPv4Range {
	if x != nil {
		return x.SecondaryIpv4RangePods
	}
	return nil
}

func (x *Cluster_CustomerManagedResources_GCP_Subnet) GetSecondaryIpv4RangeServices() *Cluster_CustomerManagedResources_GCP_Subnet_SecondaryIPv4Range {
	if x != nil {
		return x.SecondaryIpv4RangeServices
	}
	return nil
}

func (x *Cluster_CustomerManagedResources_GCP_Subnet) GetK8SMasterIpv4Range() string {
	if x != nil {
		return x.K8SMasterIpv4Range
	}
	return ""
}

// ServiceAccount specifies GCP service account.
type Cluster_CustomerManagedResources_GCP_ServiceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The email of GCP service account.
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *Cluster_CustomerManagedResources_GCP_ServiceAccount) Reset() {
	*x = Cluster_CustomerManagedResources_GCP_ServiceAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_CustomerManagedResources_GCP_ServiceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_CustomerManagedResources_GCP_ServiceAccount) ProtoMessage() {}

func (x *Cluster_CustomerManagedResources_GCP_ServiceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_CustomerManagedResources_GCP_ServiceAccount.ProtoReflect.Descriptor instead.
func (*Cluster_CustomerManagedResources_GCP_ServiceAccount) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 5, 0, 1}
}

func (x *Cluster_CustomerManagedResources_GCP_ServiceAccount) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// SecondaryIPv4Range defines IPv4 range.
type Cluster_CustomerManagedResources_GCP_Subnet_SecondaryIPv4Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Cluster_CustomerManagedResources_GCP_Subnet_SecondaryIPv4Range) Reset() {
	*x = Cluster_CustomerManagedResources_GCP_Subnet_SecondaryIPv4Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_CustomerManagedResources_GCP_Subnet_SecondaryIPv4Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_CustomerManagedResources_GCP_Subnet_SecondaryIPv4Range) ProtoMessage() {}

func (x *Cluster_CustomerManagedResources_GCP_Subnet_SecondaryIPv4Range) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_CustomerManagedResources_GCP_Subnet_SecondaryIPv4Range.ProtoReflect.Descriptor instead.
func (*Cluster_CustomerManagedResources_GCP_Subnet_SecondaryIPv4Range) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 5, 0, 0, 0}
}

func (x *Cluster_CustomerManagedResources_GCP_Subnet_SecondaryIPv4Range) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Cluster_PrivateLinkSpec_AWS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedPrincipals []string `protobuf:"bytes,7,rep,name=allowed_principals,json=allowedPrincipals,proto3" json:"allowed_principals,omitempty"`
}

func (x *Cluster_PrivateLinkSpec_AWS) Reset() {
	*x = Cluster_PrivateLinkSpec_AWS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_PrivateLinkSpec_AWS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_PrivateLinkSpec_AWS) ProtoMessage() {}

func (x *Cluster_PrivateLinkSpec_AWS) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_PrivateLinkSpec_AWS.ProtoReflect.Descriptor instead.
func (*Cluster_PrivateLinkSpec_AWS) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 6, 0}
}

func (x *Cluster_PrivateLinkSpec_AWS) GetAllowedPrincipals() []string {
	if x != nil {
		return x.AllowedPrincipals
	}
	return nil
}

type Cluster_PrivateLinkSpec_GCP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// consumer_accept_list is the list of consumers that are allowed to establish a connection through PSC.
	ConsumerAcceptList []*Cluster_PrivateLinkSpec_GCP_PrivateServiceConnectConsumer `protobuf:"bytes,4,rep,name=consumer_accept_list,json=consumerAcceptList,proto3" json:"consumer_accept_list,omitempty"`
}

func (x *Cluster_PrivateLinkSpec_GCP) Reset() {
	*x = Cluster_PrivateLinkSpec_GCP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_PrivateLinkSpec_GCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_PrivateLinkSpec_GCP) ProtoMessage() {}

func (x *Cluster_PrivateLinkSpec_GCP) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_PrivateLinkSpec_GCP.ProtoReflect.Descriptor instead.
func (*Cluster_PrivateLinkSpec_GCP) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 6, 1}
}

func (x *Cluster_PrivateLinkSpec_GCP) GetConsumerAcceptList() []*Cluster_PrivateLinkSpec_GCP_PrivateServiceConnectConsumer {
	if x != nil {
		return x.ConsumerAcceptList
	}
	return nil
}

// PrivateLinkStatus defines the status of Redpanda Private Link Service.
type Cluster_PrivateLinkSpec_PrivateLinkStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CloudProvider:
	//
	//	*Cluster_PrivateLinkSpec_PrivateLinkStatus_Aws
	//	*Cluster_PrivateLinkSpec_PrivateLinkStatus_Gcp
	CloudProvider isCluster_PrivateLinkSpec_PrivateLinkStatus_CloudProvider `protobuf_oneof:"cloud_provider"`
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus) Reset() {
	*x = Cluster_PrivateLinkSpec_PrivateLinkStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_PrivateLinkSpec_PrivateLinkStatus) ProtoMessage() {}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_PrivateLinkSpec_PrivateLinkStatus.ProtoReflect.Descriptor instead.
func (*Cluster_PrivateLinkSpec_PrivateLinkStatus) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 6, 2}
}

func (m *Cluster_PrivateLinkSpec_PrivateLinkStatus) GetCloudProvider() isCluster_PrivateLinkSpec_PrivateLinkStatus_CloudProvider {
	if m != nil {
		return m.CloudProvider
	}
	return nil
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus) GetAws() *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS {
	if x, ok := x.GetCloudProvider().(*Cluster_PrivateLinkSpec_PrivateLinkStatus_Aws); ok {
		return x.Aws
	}
	return nil
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus) GetGcp() *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP {
	if x, ok := x.GetCloudProvider().(*Cluster_PrivateLinkSpec_PrivateLinkStatus_Gcp); ok {
		return x.Gcp
	}
	return nil
}

type isCluster_PrivateLinkSpec_PrivateLinkStatus_CloudProvider interface {
	isCluster_PrivateLinkSpec_PrivateLinkStatus_CloudProvider()
}

type Cluster_PrivateLinkSpec_PrivateLinkStatus_Aws struct {
	Aws *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS `protobuf:"bytes,1,opt,name=aws,proto3,oneof"`
}

type Cluster_PrivateLinkSpec_PrivateLinkStatus_Gcp struct {
	Gcp *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP `protobuf:"bytes,2,opt,name=gcp,proto3,oneof"`
}

func (*Cluster_PrivateLinkSpec_PrivateLinkStatus_Aws) isCluster_PrivateLinkSpec_PrivateLinkStatus_CloudProvider() {
}

func (*Cluster_PrivateLinkSpec_PrivateLinkStatus_Gcp) isCluster_PrivateLinkSpec_PrivateLinkStatus_CloudProvider() {
}

// PrivateServiceConnectConsumer contains the info for a PSC consumer.
type Cluster_PrivateLinkSpec_GCP_PrivateServiceConnectConsumer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *Cluster_PrivateLinkSpec_GCP_PrivateServiceConnectConsumer) Reset() {
	*x = Cluster_PrivateLinkSpec_GCP_PrivateServiceConnectConsumer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_PrivateLinkSpec_GCP_PrivateServiceConnectConsumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_PrivateLinkSpec_GCP_PrivateServiceConnectConsumer) ProtoMessage() {}

func (x *Cluster_PrivateLinkSpec_GCP_PrivateServiceConnectConsumer) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_PrivateLinkSpec_GCP_PrivateServiceConnectConsumer.ProtoReflect.Descriptor instead.
func (*Cluster_PrivateLinkSpec_GCP_PrivateServiceConnectConsumer) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 6, 1, 0}
}

func (x *Cluster_PrivateLinkSpec_GCP_PrivateServiceConnectConsumer) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId    string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ServiceName  string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceState string `protobuf:"bytes,3,opt,name=service_state,json=serviceState,proto3" json:"service_state,omitempty"`
	// Timestamp when Redpanda AWS Private Link Endpoint Service was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp when Redpanda AWS Private Link Service was deleted.
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// The list of VPC endpoints established with Redpanda AWS Private Link Endpoint Service.
	VpcEndpointConnections []*Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection `protobuf:"bytes,6,rep,name=vpc_endpoint_connections,json=vpcEndpointConnections,proto3" json:"vpc_endpoint_connections,omitempty"`
	// The port of Kafka API seed service.
	KafkaApiSeedPort int32 `protobuf:"varint,7,opt,name=kafka_api_seed_port,json=kafkaApiSeedPort,proto3" json:"kafka_api_seed_port,omitempty"`
	// The port of Schema Registry seed service.
	SchemaRegistrySeedPort int32 `protobuf:"varint,8,opt,name=schema_registry_seed_port,json=schemaRegistrySeedPort,proto3" json:"schema_registry_seed_port,omitempty"`
	// The port of Redpanda Proxy seed service.
	RedpandaProxySeedPort int32 `protobuf:"varint,9,opt,name=redpanda_proxy_seed_port,json=redpandaProxySeedPort,proto3" json:"redpanda_proxy_seed_port,omitempty"`
	// The base port of Kafka API node service. The port for node i (0 .. node_count-1) is kafka_api_node_base_port + i.
	KafkaApiNodeBasePort int32 `protobuf:"varint,10,opt,name=kafka_api_node_base_port,json=kafkaApiNodeBasePort,proto3" json:"kafka_api_node_base_port,omitempty"`
	// The base port of Redpanda Proxy node service. The port for node i (0 .. node_count-1) is redpanda_proxy_node_base_port + i.
	RedpandaProxyNodeBasePort int32 `protobuf:"varint,11,opt,name=redpanda_proxy_node_base_port,json=redpandaProxyNodeBasePort,proto3" json:"redpanda_proxy_node_base_port,omitempty"`
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS) Reset() {
	*x = Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS) ProtoMessage() {}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS.ProtoReflect.Descriptor instead.
func (*Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 6, 2, 0}
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS) GetServiceState() string {
	if x != nil {
		return x.ServiceState
	}
	return ""
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS) GetVpcEndpointConnections() []*Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection {
	if x != nil {
		return x.VpcEndpointConnections
	}
	return nil
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS) GetKafkaApiSeedPort() int32 {
	if x != nil {
		return x.KafkaApiSeedPort
	}
	return 0
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS) GetSchemaRegistrySeedPort() int32 {
	if x != nil {
		return x.SchemaRegistrySeedPort
	}
	return 0
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS) GetRedpandaProxySeedPort() int32 {
	if x != nil {
		return x.RedpandaProxySeedPort
	}
	return 0
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS) GetKafkaApiNodeBasePort() int32 {
	if x != nil {
		return x.KafkaApiNodeBasePort
	}
	return 0
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS) GetRedpandaProxyNodeBasePort() int32 {
	if x != nil {
		return x.RedpandaProxyNodeBasePort
	}
	return 0
}

type Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The service attachment used by by consumers to create endpoint connections to Redpanda GCP PSC.
	ServiceAttachment string `protobuf:"bytes,1,opt,name=service_attachment,json=serviceAttachment,proto3" json:"service_attachment,omitempty"`
	// Timestamp when Redpanda GCP PSC was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp when Redpanda GCP PSC was deleted.
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// The port of Kafka API seed service.
	KafkaApiSeedPort int32 `protobuf:"varint,5,opt,name=kafka_api_seed_port,json=kafkaApiSeedPort,proto3" json:"kafka_api_seed_port,omitempty"`
	// The port of Schema Registry seed service.
	SchemaRegistrySeedPort int32 `protobuf:"varint,6,opt,name=schema_registry_seed_port,json=schemaRegistrySeedPort,proto3" json:"schema_registry_seed_port,omitempty"`
	// The port of Redpanda Proxy seed service.
	RedpandaProxySeedPort int32 `protobuf:"varint,7,opt,name=redpanda_proxy_seed_port,json=redpandaProxySeedPort,proto3" json:"redpanda_proxy_seed_port,omitempty"`
	// The base port of Kafka API node service. The port for node i (0 .. node_count-1) is kafka_api_node_base_port + i.
	KafkaApiNodeBasePort int32 `protobuf:"varint,8,opt,name=kafka_api_node_base_port,json=kafkaApiNodeBasePort,proto3" json:"kafka_api_node_base_port,omitempty"`
	// The base port of Redpanda Proxy node service. The port for node i (0 .. node_count-1) is redpanda_proxy_node_base_port + i.
	RedpandaProxyNodeBasePort int32 `protobuf:"varint,9,opt,name=redpanda_proxy_node_base_port,json=redpandaProxyNodeBasePort,proto3" json:"redpanda_proxy_node_base_port,omitempty"`
	// The list of VPC endpoints established with GCP PSC.
	ConnectedEndpoints []*Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP_ConnectedEndpoint `protobuf:"bytes,10,rep,name=connected_endpoints,json=connectedEndpoints,proto3" json:"connected_endpoints,omitempty"`
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP) Reset() {
	*x = Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP) ProtoMessage() {}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP.ProtoReflect.Descriptor instead.
func (*Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 6, 2, 1}
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP) GetServiceAttachment() string {
	if x != nil {
		return x.ServiceAttachment
	}
	return ""
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP) GetKafkaApiSeedPort() int32 {
	if x != nil {
		return x.KafkaApiSeedPort
	}
	return 0
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP) GetSchemaRegistrySeedPort() int32 {
	if x != nil {
		return x.SchemaRegistrySeedPort
	}
	return 0
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP) GetRedpandaProxySeedPort() int32 {
	if x != nil {
		return x.RedpandaProxySeedPort
	}
	return 0
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP) GetKafkaApiNodeBasePort() int32 {
	if x != nil {
		return x.KafkaApiNodeBasePort
	}
	return 0
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP) GetRedpandaProxyNodeBasePort() int32 {
	if x != nil {
		return x.RedpandaProxyNodeBasePort
	}
	return 0
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP) GetConnectedEndpoints() []*Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP_ConnectedEndpoint {
	if x != nil {
		return x.ConnectedEndpoints
	}
	return nil
}

type Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of VPC endpoint.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The owner of VPC endpoint.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// Timestamp when was an VPC endpoint created.
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ConnectionId string                 `protobuf:"bytes,5,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// The list of load balancer ARNs.
	LoadBalancerArns []string `protobuf:"bytes,6,rep,name=load_balancer_arns,json=loadBalancerArns,proto3" json:"load_balancer_arns,omitempty"`
	// The list of DNS entries associated to VPC endpoint.
	DnsEntries []*Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection_DNSEntry `protobuf:"bytes,7,rep,name=dns_entries,json=dnsEntries,proto3" json:"dns_entries,omitempty"`
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection) Reset() {
	*x = Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection) ProtoMessage() {}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection.ProtoReflect.Descriptor instead.
func (*Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 6, 2, 0, 0}
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection) GetLoadBalancerArns() []string {
	if x != nil {
		return x.LoadBalancerArns
	}
	return nil
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection) GetDnsEntries() []*Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection_DNSEntry {
	if x != nil {
		return x.DnsEntries
	}
	return nil
}

type Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection_DNSEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsName string `protobuf:"bytes,1,opt,name=dns_name,json=dnsName,proto3" json:"dns_name,omitempty"`
	// The ID of Route53 DNS zone.
	HostedZoneId string `protobuf:"bytes,2,opt,name=hosted_zone_id,json=hostedZoneId,proto3" json:"hosted_zone_id,omitempty"`
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection_DNSEntry) Reset() {
	*x = Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection_DNSEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection_DNSEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection_DNSEntry) ProtoMessage() {}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection_DNSEntry) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection_DNSEntry.ProtoReflect.Descriptor instead.
func (*Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection_DNSEntry) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 6, 2, 0, 0, 0}
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection_DNSEntry) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection_DNSEntry) GetHostedZoneId() string {
	if x != nil {
		return x.HostedZoneId
	}
	return ""
}

// ConnectedEndpoint defines endpoint connection connected to Redpanda GCP PSC (Private Service Connect) service.
type Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP_ConnectedEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of endpoint connection.
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// The network of consumer connecting to Redpanda GCP PSC (Private Service Connect).
	// e.g. https://www.googleapis.com/compute/v1/projects/my-project/global/networks/vpc-consumer-psc
	ConsumerNetwork string `protobuf:"bytes,2,opt,name=consumer_network,json=consumerNetwork,proto3" json:"consumer_network,omitempty"`
	// The endpoint of connection.
	// e.g. https://www.googleapis.com/compute/v1/projects/my-project/regions/us-west2/forwardingRules/vpc-consumer-psc
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// status is the status of the endpoint (ACCEPTED | REJECTED).
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP_ConnectedEndpoint) Reset() {
	*x = Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP_ConnectedEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP_ConnectedEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP_ConnectedEndpoint) ProtoMessage() {}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP_ConnectedEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP_ConnectedEndpoint.ProtoReflect.Descriptor instead.
func (*Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP_ConnectedEndpoint) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{4, 6, 2, 1, 0}
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP_ConnectedEndpoint) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP_ConnectedEndpoint) GetConsumerNetwork() string {
	if x != nil {
		return x.ConsumerNetwork
	}
	return ""
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP_ConnectedEndpoint) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP_ConnectedEndpoint) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ListClustersRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceId   string        `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	Name          string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Region        string        `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	CloudProvider CloudProvider `protobuf:"varint,4,opt,name=cloud_provider,json=cloudProvider,proto3,enum=redpanda.api.controlplane.v1beta1.CloudProvider" json:"cloud_provider,omitempty"`
	NetworkId     string        `protobuf:"bytes,5,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
}

func (x *ListClustersRequest_Filter) Reset() {
	*x = ListClustersRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClustersRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest_Filter) ProtoMessage() {}

func (x *ListClustersRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListClustersRequest_Filter) Descriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ListClustersRequest_Filter) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *ListClustersRequest_Filter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListClustersRequest_Filter) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListClustersRequest_Filter) GetCloudProvider() CloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return CloudProvider_CLOUD_PROVIDER_UNSPECIFIED
}

func (x *ListClustersRequest_Filter) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

var File_redpanda_api_controlplane_v1beta1_cluster_proto protoreflect.FileDescriptor

var file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x21, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70,
	0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x01,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08,
	0xca, 0x3e, 0x05, 0xfa, 0x02, 0x02, 0x69, 0x64, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x3a, 0x59, 0x92, 0x41, 0x56, 0x0a, 0x54, 0x2a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x3b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x2d, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x20, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x22,
	0x72, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x59, 0x92, 0x41, 0x56, 0x0a, 0x54, 0x2a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x32, 0x3b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x20, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x22, 0x72, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x59, 0x92, 0x41,
	0x56, 0x0a, 0x54, 0x2a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x32, 0x3b, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x6e, 0x67, 0x20,
	0x61, 0x6e, 0x20, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x22, 0xd3, 0x01, 0x0a, 0x08, 0x4d, 0x54, 0x4c, 0x53,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x6d, 0x54, 0x4c, 0x53, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x9a, 0x01, 0x0a, 0x13, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x68,
	0x92, 0x41, 0x65, 0x32, 0x1c, 0x43, 0x41, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x50, 0x45, 0x4d, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x4a, 0x45, 0x22, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43,
	0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x5c,
	0x6e, 0x4d, 0x49, 0x49, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x5c, 0x6e, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x22, 0x52, 0x13, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x6d, 0x22, 0xf8, 0x58,
	0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xe0, 0x41, 0x05, 0xe0, 0x41, 0x03, 0xba, 0x48, 0x17,
	0xd0, 0x01, 0x01, 0x72, 0x12, 0x32, 0x0d, 0x5e, 0x5b, 0x61, 0x2d, 0x76, 0x30, 0x2d, 0x39, 0x5d,
	0x7b, 0x32, 0x30, 0x7d, 0x98, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x1b,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x15, 0x22, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x77, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x53,
	0x92, 0x41, 0x45, 0x32, 0x1b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x69,
	0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4a, 0x26, 0x22, 0x61, 0x30, 0x62, 0x34, 0x30, 0x61, 0x66, 0x39, 0x2d, 0x30, 0x32, 0x35, 0x30,
	0x2d, 0x34, 0x38, 0x63, 0x61, 0x2d, 0x39, 0x34, 0x31, 0x37, 0x2d, 0x37, 0x38, 0x33, 0x65, 0x64,
	0x31, 0x32, 0x37, 0x63, 0x65, 0x34, 0x32, 0x22, 0xe0, 0x41, 0x05, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x12, 0x53, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x92, 0x41, 0x02, 0x40, 0x01, 0xe0, 0x41, 0x05, 0xe0, 0x41,
	0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x10, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xe0, 0x41, 0x01, 0xe0, 0x41, 0x05, 0xba, 0x48, 0x43, 0xd0, 0x01,
	0x01, 0x72, 0x3e, 0x32, 0x3c, 0x5e, 0x28, 0x3f, 0x50, 0x3c, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x3e,
	0x30, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5c, 0x64, 0x2a, 0x29, 0x5c, 0x2e, 0x28, 0x3f, 0x50,
	0x3c, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x3e, 0x30, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5c, 0x64,
	0x2a, 0x29, 0x28, 0x5c, 0x2e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x31, 0x34, 0x7d, 0x29, 0x3f,
	0x24, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0xcc, 0x02, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75,
	0x74, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0xa1, 0x02, 0x92,
	0x41, 0x9d, 0x02, 0x32, 0x9a, 0x02, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74,
	0x20, 0x74, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x3c, 0x62, 0x72, 0x3e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x3c, 0x62, 0x72, 0x3e, 0x41, 0x57,
	0x53, 0x3a, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x74, 0x69, 0x65, 0x72, 0x2d, 0x31, 0x2d, 0x61,
	0x77, 0x73, 0x2d, 0x73, 0x62, 0x64, 0x67, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x74, 0x69, 0x65,
	0x72, 0x2d, 0x32, 0x2d, 0x61, 0x77, 0x73, 0x2d, 0x75, 0x67, 0x6e, 0x30, 0x3c, 0x62, 0x72, 0x3e,
	0x2d, 0x20, 0x74, 0x69, 0x65, 0x72, 0x2d, 0x33, 0x2d, 0x61, 0x77, 0x73, 0x2d, 0x75, 0x67, 0x6f,
	0x30, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x74, 0x69, 0x65, 0x72, 0x2d, 0x34, 0x2d, 0x61, 0x77,
	0x73, 0x2d, 0x75, 0x67, 0x6f, 0x67, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x74, 0x69, 0x65, 0x72,
	0x2d, 0x35, 0x2d, 0x61, 0x77, 0x73, 0x2d, 0x75, 0x67, 0x70, 0x30, 0x3c, 0x62, 0x72, 0x3e, 0x47,
	0x43, 0x50, 0x3a, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x74, 0x69, 0x65, 0x72, 0x2d, 0x31, 0x2d,
	0x67, 0x63, 0x70, 0x2d, 0x75, 0x6d, 0x34, 0x67, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x74, 0x69,
	0x65, 0x72, 0x2d, 0x32, 0x2d, 0x67, 0x63, 0x70, 0x2d, 0x75, 0x6d, 0x35, 0x30, 0x3c, 0x62, 0x72,
	0x3e, 0x2d, 0x20, 0x74, 0x69, 0x65, 0x72, 0x2d, 0x33, 0x2d, 0x67, 0x63, 0x70, 0x2d, 0x75, 0x6d,
	0x35, 0x67, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x74, 0x69, 0x65, 0x72, 0x2d, 0x34, 0x2d, 0x67,
	0x63, 0x70, 0x2d, 0x75, 0x6d, 0x36, 0x30, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x74, 0x69, 0x65,
	0x72, 0x2d, 0x35, 0x2d, 0x67, 0x63, 0x70, 0x2d, 0x75, 0x6d, 0x36, 0x67, 0x3c, 0x62, 0x72, 0x3e,
	0x52, 0x0f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x65,
	0x72, 0x12, 0x53, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0e, 0xe0, 0x41, 0x05, 0xba, 0x48, 0x08, 0x82, 0x01, 0x05, 0x10, 0x01, 0x22, 0x01, 0x00,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x82, 0x02, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x9c, 0x01, 0x92, 0x41,
	0x8a, 0x01, 0x32, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20, 0x69, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x20, 0x28, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x28, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x29, 0x2e, 0x4a, 0x18, 0x22, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x22, 0xe0, 0x41, 0x05, 0xba,
	0x48, 0x08, 0x82, 0x01, 0x05, 0x10, 0x01, 0x22, 0x01, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x0a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x66, 0x92, 0x41, 0x4c, 0x32, 0x32, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20,
	0x62, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x4a, 0x16, 0x22, 0x63, 0x6a, 0x63, 0x75,
	0x71, 0x37, 0x39, 0x63, 0x34, 0x76, 0x73, 0x39, 0x34, 0x66, 0x63, 0x75, 0x66, 0x63, 0x32, 0x67,
	0x22, 0xba, 0x48, 0x14, 0x72, 0x12, 0x32, 0x0d, 0x5e, 0x5b, 0x61, 0x2d, 0x76, 0x30, 0x2d, 0x39,
	0x5d, 0x7b, 0x32, 0x30, 0x7d, 0x98, 0x01, 0x14, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x64, 0x12, 0xa9, 0x01, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42,
	0x4f, 0x92, 0x41, 0x4c, 0x2a, 0x07, 0x64, 0x65, 0x66, 0x66, 0x66, 0x66, 0x66, 0x32, 0x2b, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20,
	0x69, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x14, 0x22, 0x43, 0x4c, 0x4f,
	0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x43, 0x50, 0x22,
	0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0xaf, 0x03, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x96, 0x03, 0x92, 0x41, 0x8f, 0x03, 0x32, 0xfd, 0x02, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3c, 0x62, 0x72, 0x3e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x3c, 0x62, 0x72, 0x3e,
	0x47, 0x43, 0x50, 0x3a, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x61, 0x73, 0x69, 0x61, 0x2d, 0x73,
	0x6f, 0x75, 0x74, 0x68, 0x31, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x61, 0x73, 0x69, 0x61, 0x2d,
	0x73, 0x6f, 0x75, 0x74, 0x68, 0x65, 0x61, 0x73, 0x74, 0x31, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20,
	0x61, 0x75, 0x73, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x61, 0x2d, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x65,
	0x61, 0x73, 0x74, 0x31, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x65,
	0x2d, 0x77, 0x65, 0x73, 0x74, 0x31, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x65, 0x75, 0x72, 0x6f,
	0x70, 0x65, 0x2d, 0x77, 0x65, 0x73, 0x74, 0x32, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x6e, 0x6f,
	0x72, 0x74, 0x68, 0x61, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x2d, 0x6e, 0x6f, 0x72, 0x74, 0x68,
	0x65, 0x61, 0x73, 0x74, 0x31, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x75, 0x73, 0x2d, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x31, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x75, 0x73, 0x2d, 0x65,
	0x61, 0x73, 0x74, 0x31, 0x3c, 0x62, 0x72, 0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x41, 0x57, 0x53, 0x3a,
	0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x61, 0x66, 0x2d, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x2d, 0x31,
	0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x61, 0x70, 0x2d, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x65, 0x61,
	0x73, 0x74, 0x2d, 0x31, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x61, 0x70, 0x2d, 0x73, 0x6f, 0x75,
	0x74, 0x68, 0x65, 0x61, 0x73, 0x74, 0x2d, 0x31, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x63, 0x61,
	0x2d, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2d, 0x31, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20,
	0x65, 0x75, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x2d, 0x31, 0x3c, 0x62, 0x72, 0x3e,
	0x2d, 0x20, 0x65, 0x75, 0x2d, 0x77, 0x65, 0x73, 0x74, 0x2d, 0x31, 0x3c, 0x62, 0x72, 0x3e, 0x2d,
	0x20, 0x75, 0x73, 0x2d, 0x65, 0x61, 0x73, 0x74, 0x2d, 0x31, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20,
	0x75, 0x73, 0x2d, 0x65, 0x61, 0x73, 0x74, 0x2d, 0x32, 0x3c, 0x62, 0x72, 0x3e, 0x2d, 0x20, 0x75,
	0x73, 0x2d, 0x77, 0x65, 0x73, 0x74, 0x2d, 0x32, 0x4a, 0x0d, 0x22, 0x75, 0x73, 0x2d, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x31, 0x22, 0xe0, 0x41, 0x05, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x09, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x41, 0x50, 0x49,
	0x52, 0x09, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x61, 0x70, 0x69, 0x12, 0x5c, 0x0a, 0x0a, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x06, 0xe0, 0x41, 0x05, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x66, 0x0a, 0x10, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x52,
	0x10, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x12, 0x63, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x65, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75,
	0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x12, 0x83, 0x01,
	0x0a, 0x1a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x1a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x5d, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x41,
	0x50, 0x49, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x12, 0x62, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x9a, 0x01, 0x02, 0x10, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x54, 0x61, 0x67, 0x73, 0x1a, 0xaf, 0x01, 0x0a, 0x08, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x41,
	0x50, 0x49, 0x12, 0x2a, 0x0a, 0x0c, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x05, 0xe0, 0x41, 0x03,
	0x52, 0x0c, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x3f,
	0x0a, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x3a,
	0x36, 0x92, 0x41, 0x33, 0x0a, 0x31, 0x32, 0x2f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x20, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x27, 0x73, 0x20, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x20, 0x41, 0x50, 0x49, 0x2e, 0x1a, 0x8d, 0x02, 0x0a, 0x09, 0x48, 0x54, 0x54, 0x50,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x3f, 0x0a, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x7b, 0x92, 0x41, 0x72, 0x32, 0x1c, 0x55, 0x52, 0x4c, 0x20, 0x6f,
	0x66, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x27, 0x73, 0x20, 0x48, 0x54, 0x54,
	0x50, 0x20, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4a, 0x52, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61, 0x61, 0x30,
	0x30, 0x30, 0x30, 0x6c, 0x30, 0x2e, 0x63, 0x6a, 0x62, 0x36, 0x39, 0x68, 0x31, 0x63, 0x34, 0x76,
	0x73, 0x34, 0x32, 0x70, 0x63, 0x61, 0x38, 0x39, 0x73, 0x30, 0x2e, 0x66, 0x6d, 0x63, 0x2e, 0x70,
	0x72, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x39, 0x30, 0x39, 0x32, 0x22, 0xe0, 0x41, 0x05, 0xe0, 0x41,
	0x03, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x3a, 0x2f, 0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x32, 0x28, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x48, 0x54, 0x54,
	0x50, 0x20, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x1a, 0xe0, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x78, 0x92, 0x41, 0x6f, 0x32, 0x1b,
	0x55, 0x52, 0x4c, 0x20, 0x6f, 0x66, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x20, 0x41, 0x50, 0x49, 0x40, 0x01, 0x4a, 0x4e, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2d,
	0x61, 0x61, 0x30, 0x30, 0x30, 0x30, 0x6c, 0x30, 0x2e, 0x63, 0x6a, 0x62, 0x36, 0x39, 0x68, 0x31,
	0x63, 0x34, 0x76, 0x73, 0x34, 0x32, 0x70, 0x63, 0x61, 0x38, 0x39, 0x73, 0x30, 0x2e, 0x66, 0x6d,
	0x63, 0x2e, 0x70, 0x72, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x22, 0xe0, 0x41, 0x05,
	0xe0, 0x41, 0x03, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x3a, 0x40, 0x92, 0x41, 0x3d, 0x0a, 0x3b, 0x32,
	0x37, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x52,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x20,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x40, 0x01, 0x1a, 0xaa, 0x01, 0x0a, 0x0e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x3f, 0x0a,
	0x04, 0x6d, 0x74, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4d, 0x54, 0x4c, 0x53, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x12, 0x18,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x05,
	0xe0, 0x41, 0x03, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x3a, 0x3d, 0x92, 0x41, 0x3a, 0x0a, 0x38, 0x32,
	0x36, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x20, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0xf9, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x93, 0x01, 0x92, 0x41, 0x89, 0x01, 0x32, 0x15, 0x55, 0x52, 0x4c,
	0x20, 0x6f, 0x66, 0x20, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x20, 0x41,
	0x50, 0x49, 0x40, 0x01, 0x4a, 0x6e, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2d, 0x61, 0x61, 0x30, 0x30, 0x30, 0x30, 0x6c, 0x30, 0x2e,
	0x63, 0x6a, 0x62, 0x36, 0x39, 0x68, 0x31, 0x63, 0x34, 0x76, 0x73, 0x34, 0x32, 0x70, 0x63, 0x61,
	0x38, 0x39, 0x73, 0x30, 0x2e, 0x66, 0x6d, 0x63, 0x2e, 0x70, 0x72, 0x64, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x65, 0x75, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x22, 0xe0, 0x41, 0x05, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x3a,
	0x42, 0x92, 0x41, 0x3f, 0x0a, 0x3d, 0x32, 0x39, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73,
	0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x40, 0x01, 0x1a, 0xc1, 0x12, 0x0a, 0x18, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x5b, 0x0a, 0x03, 0x67, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x48, 0x00, 0x52, 0x03, 0x67, 0x63, 0x70, 0x1a, 0xae, 0x11,
	0x0a, 0x03, 0x47, 0x43, 0x50, 0x12, 0x6e, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x15, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x15, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x98, 0x01, 0x0a,
	0x17, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x17,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x9c, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x43, 0x50, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x19, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xaa, 0x01, 0x0a, 0x20, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x56, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x20, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x13, 0x67, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x56, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x13, 0x67, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x74, 0x69, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x15, 0x74, 0x69, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x73, 0x63, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x73, 0x63, 0x4e, 0x61, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0xc5, 0x05, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x05, 0xba, 0x48,
	0x25, 0xc8, 0x01, 0x01, 0x72, 0x20, 0x18, 0x3e, 0x32, 0x1c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d,
	0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xa7, 0x01, 0x0a,
	0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x61, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x50, 0x76, 0x34, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x19, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x1d, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x50, 0x76, 0x34, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x1d, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x15, 0x6b, 0x38, 0x73, 0x5f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x15, 0x6b, 0x38,
	0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x1a, 0x55, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x49, 0x50, 0x76, 0x34, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x05, 0xba, 0x48, 0x25, 0xc8,
	0x01, 0x01, 0x72, 0x20, 0x18, 0x3e, 0x32, 0x1c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b,
	0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x29, 0x3f, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x8b, 0x01, 0x92, 0x41, 0x87,
	0x01, 0x0a, 0x84, 0x01, 0x2a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x32, 0x1f, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x6e,
	0x67, 0x20, 0x47, 0x43, 0x50, 0x20, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0xd2, 0x01, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x64, 0x73,
	0xd2, 0x01, 0x1d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0xd2, 0x01, 0x15, 0x6b, 0x38, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x86, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe0, 0x41, 0x05, 0xba,
	0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x3a, 0x4f, 0x92, 0x41, 0x4c, 0x0a, 0x4a, 0x2a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x20, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x73, 0x20, 0x47, 0x43, 0x50, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0xd2, 0x01, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x3a, 0x9a, 0x02, 0x92, 0x41, 0x96, 0x02, 0x0a, 0x93, 0x02, 0x2a, 0x1d, 0x47, 0x43, 0x50,
	0x20, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x20, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x65, 0x73, 0x32, 0x4a, 0x47, 0x43, 0x50, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0xd2, 0x01, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0xd2,
	0x01, 0x15, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0xd2, 0x01, 0x19, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x20,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0xd2, 0x01, 0x13, 0x67, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x15, 0x74, 0x69, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x17,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x1a, 0x9e, 0x20, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41,
	0x57, 0x53, 0x48, 0x00, 0x52, 0x03, 0x61, 0x77, 0x73, 0x12, 0x52, 0x0a, 0x03, 0x67, 0x63, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x47, 0x43, 0x50, 0x48, 0x00, 0x52, 0x03, 0x67, 0x63, 0x70, 0x12, 0x69, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xc2, 0x02, 0x0a, 0x03, 0x41, 0x57, 0x53,
	0x12, 0xba, 0x02, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x8a, 0x02,
	0x92, 0x41, 0x86, 0x02, 0x32, 0x92, 0x01, 0x54, 0x68, 0x65, 0x20, 0x41, 0x52, 0x4e, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x41, 0x57, 0x53, 0x20, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x20, 0x54, 0x6f, 0x20,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x73, 0x2c, 0x20, 0x75, 0x73, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x6b, 0x20, 0x28, 0x2a, 0x29, 0x2e, 0x4a, 0x6f, 0x22, 0x61, 0x72, 0x6e, 0x3a,
	0x61, 0x77, 0x73, 0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x3a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x2d,
	0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x73, 0x3a, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x72, 0x6e, 0x3a, 0x61, 0x77, 0x73,
	0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x3a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x2d, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x2d, 0x68, 0x79, 0x70,
	0x68, 0x65, 0x6e, 0x73, 0x3a, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x1a, 0xa3, 0x03,
	0x0a, 0x03, 0x47, 0x43, 0x50, 0x12, 0x80, 0x02, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x47, 0x43, 0x50, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x42, 0x70, 0x92, 0x41, 0x6d, 0x32, 0x6b, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x47,
	0x43, 0x50, 0x20, 0x50, 0x53, 0x43, 0x20, 0x28, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x29,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x92, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x56, 0x32,
	0x43, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x65, 0x69, 0x74, 0x68,
	0x65, 0x72, 0x20, 0x62, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x43, 0x50, 0x20, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20,
	0x69, 0x74, 0x73, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x20, 0x49, 0x44, 0x2e, 0x4a, 0x0f, 0x22, 0x67, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2d, 0x31, 0x22, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x04, 0x1a, 0xe0, 0x17, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x64, 0x0a, 0x03, 0x61, 0x77, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x48, 0x00, 0x52, 0x03, 0x61, 0x77, 0x73, 0x12,
	0x64, 0x0a, 0x03, 0x67, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x48, 0x00,
	0x52, 0x03, 0x67, 0x63, 0x70, 0x1a, 0x9f, 0x0f, 0x0a, 0x03, 0x41, 0x57, 0x53, 0x12, 0x77, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x58, 0x92, 0x41, 0x55, 0x32, 0x35, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f,
	0x66, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x41, 0x57, 0x53, 0x20, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4a, 0x1c, 0x22,
	0x76, 0x70, 0x63, 0x65, 0x2d, 0x73, 0x76, 0x63, 0x2d, 0x30, 0x35, 0x66, 0x66, 0x66, 0x32, 0x31,
	0x31, 0x37, 0x64, 0x36, 0x34, 0x38, 0x64, 0x61, 0x33, 0x35, 0x22, 0x52, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x77, 0x92,
	0x41, 0x74, 0x32, 0x37, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x41, 0x57, 0x53, 0x20, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4a, 0x39, 0x22, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x76, 0x70, 0x63, 0x65,
	0x2e, 0x75, 0x73, 0x2d, 0x77, 0x65, 0x73, 0x74, 0x2d, 0x32, 0x2e, 0x76, 0x70, 0x63, 0x65, 0x2d,
	0x73, 0x76, 0x63, 0x2d, 0x30, 0x35, 0x66, 0x66, 0x66, 0x32, 0x31, 0x31, 0x37, 0x64, 0x36, 0x34,
	0x38, 0x64, 0x61, 0x33, 0x35, 0x22, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x72, 0x92, 0x41, 0x6f,
	0x32, 0x38, 0x54, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x52,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x41, 0x57, 0x53, 0x20, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4a, 0x33, 0x22, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x20, 0x7c, 0x20, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x7c, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x7c, 0x20, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x7c, 0x20, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0x52,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0xa0, 0x01, 0x0a, 0x18, 0x76, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x2e, 0x56, 0x50, 0x43, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16,
	0x76, 0x70, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x41, 0x70, 0x69, 0x53, 0x65, 0x65,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x53, 0x65, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x18, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x41, 0x70, 0x69, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x40, 0x0a, 0x1d, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x61, 0x73, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x1a, 0xb1, 0x07, 0x0a, 0x15, 0x56, 0x50, 0x43, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0xc3, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0xac, 0x01, 0x92, 0x41, 0xa8, 0x01, 0x32, 0x52, 0x54, 0x68, 0x65, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x56, 0x50, 0x43, 0x20, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x41, 0x57, 0x53, 0x20,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4a, 0x52,
	0x22, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x20, 0x7c, 0x20, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x7c, 0x20, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x7c, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x7c, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x7c, 0x20,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x7c, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x22, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7d, 0x92, 0x41,
	0x7a, 0x32, 0x5a, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x56, 0x50, 0x43, 0x20, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x41, 0x57, 0x53, 0x20, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4a, 0x1c, 0x22,
	0x76, 0x70, 0x63, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x2d, 0x30, 0x30, 0x62, 0x39, 0x63, 0x62, 0x61,
	0x33, 0x33, 0x36, 0x30, 0x66, 0x65, 0x34, 0x61, 0x65, 0x63, 0x22, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x41, 0x72, 0x6e, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6f, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x2e,
	0x56, 0x50, 0x43, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x4e, 0x53, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x64, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x8a, 0x02, 0x0a, 0x08, 0x44,
	0x4e, 0x53, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0xd7, 0x01, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xbb, 0x01, 0x92, 0x41, 0xb7,
	0x01, 0x32, 0x5a, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x56, 0x50, 0x43, 0x20, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x41, 0x57, 0x53, 0x20, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4a, 0x59, 0x22,
	0x76, 0x70, 0x63, 0x65, 0x2d, 0x30, 0x37, 0x35, 0x31, 0x62, 0x37, 0x61, 0x64, 0x38, 0x61, 0x35,
	0x31, 0x37, 0x37, 0x37, 0x66, 0x32, 0x2d, 0x31, 0x68, 0x70, 0x69, 0x65, 0x76, 0x66, 0x35, 0x2e,
	0x76, 0x70, 0x63, 0x65, 0x2d, 0x73, 0x76, 0x63, 0x2d, 0x30, 0x64, 0x34, 0x38, 0x39, 0x66, 0x61,
	0x38, 0x39, 0x66, 0x32, 0x34, 0x65, 0x33, 0x38, 0x30, 0x32, 0x2e, 0x75, 0x73, 0x2d, 0x65, 0x61,
	0x73, 0x74, 0x2d, 0x32, 0x2e, 0x76, 0x70, 0x63, 0x65, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e,
	0x61, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x1a, 0x83, 0x06, 0x0a, 0x03, 0x47, 0x43, 0x50, 0x12,
	0x2d, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x41, 0x70, 0x69, 0x53, 0x65, 0x65, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x37,
	0x0a, 0x18, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53,
	0x65, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x18, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x41, 0x70, 0x69, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x40, 0x0a, 0x1d, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x93, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x62, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x47, 0x43,
	0x50, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x9d, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x3a, 0x3e, 0x92,
	0x41, 0x3b, 0x0a, 0x39, 0x32, 0x35, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x4c,
	0x69, 0x6e, 0x6b, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x40, 0x01, 0x42, 0x17, 0x0a,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0xca, 0x01, 0x0a, 0x0c, 0x44, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x41, 0x50, 0x49, 0x12, 0x7b, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x69, 0x92, 0x41, 0x60, 0x32, 0x14, 0x55, 0x52, 0x4c,
	0x20, 0x6f, 0x66, 0x20, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x20, 0x41, 0x50,
	0x49, 0x40, 0x01, 0x4a, 0x46, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x61, 0x62, 0x31, 0x32, 0x33, 0x34, 0x6c, 0x30, 0x2e, 0x63, 0x6a, 0x62, 0x36, 0x39,
	0x68, 0x31, 0x63, 0x34, 0x76, 0x73, 0x34, 0x32, 0x70, 0x63, 0x61, 0x38, 0x39, 0x73, 0x30, 0x2e,
	0x66, 0x6d, 0x63, 0x2e, 0x70, 0x72, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0xe0, 0x41, 0x05, 0xe0, 0x41,
	0x03, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x3a, 0x3d, 0x92, 0x41, 0x3a, 0x0a, 0x38, 0x32, 0x34, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x44, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x40, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10,
	0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x22, 0x3f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x59, 0x4f, 0x43, 0x10, 0x02, 0x22, 0x6a, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x3a, 0xa0, 0x01, 0x92, 0x41, 0x9c, 0x01, 0x0a, 0x99, 0x01, 0x2a,
	0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x1e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2,
	0x01, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0xd2, 0x01,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xd2,
	0x01, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0xd2, 0x01, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0xd2, 0x01,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x0f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x65, 0x72, 0xd2, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65,
	0xd2, 0x01, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0xad, 0x01, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42,
	0x67, 0xba, 0x48, 0x64, 0xba, 0x01, 0x61, 0x0a, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x3d, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x69,
	0x64, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x20, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x74, 0x1a, 0x0d, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x69, 0x64, 0x20, 0x3d, 0x3d, 0x20, 0x22, 0x22, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4f, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x09, 0xba, 0x48,
	0x06, 0xc0, 0x01, 0x01, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x5d, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xfa, 0x03, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x49,
	0x92, 0x41, 0x46, 0x32, 0x32, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40,
	0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x82, 0x02, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xd0, 0x01, 0x01, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0xba, 0x48, 0x17, 0xd0, 0x01, 0x01, 0x72, 0x12, 0x32, 0x0d, 0x5e, 0x5b,
	0x61, 0x2d, 0x76, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x30, 0x7d, 0x98, 0x01, 0x14, 0x52, 0x09,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0xa3, 0x02, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6d, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x1d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x20,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0xa0, 0x01, 0x64, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x9b, 0x01, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x73, 0x92, 0x41, 0x70,
	0x32, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x74, 0x6f, 0x20,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x70,
	0x61, 0x67, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x63,
	0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74,
	0x6f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x83, 0x17, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xfc, 0x03, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x03, 0x92,
	0x41, 0xc2, 0x02, 0x12, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x1a, 0x3c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x20,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x2d, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4a, 0x43, 0x0a, 0x03, 0x32, 0x30, 0x32, 0x12, 0x3c, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x2e, 0x1a, 0x2c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x2c, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x25, 0x0a,
	0x0b, 0x42, 0x61, 0x64, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x14,
	0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4a, 0x29, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x22, 0x0a, 0x08, 0x43,
	0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a,
	0x54, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x4d, 0x0a, 0x33, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f, 0x75,
	0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x12, 0x16, 0x0a,
	0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0xb2, 0xbf, 0x07, 0x17, 0x77, 0x72, 0x69, 0x74, 0x65, 0x3a, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x66, 0x6f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22,
	0x11, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0xe2, 0x03, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x34, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x22, 0xf1, 0x02, 0x92, 0x41, 0xb5, 0x02, 0x12, 0x0b, 0x47, 0x65, 0x74, 0x20,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x15, 0x47, 0x65, 0x74, 0x20, 0x52, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x3b,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x34, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x2e, 0x0a, 0x2c, 0x1a,
	0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4a, 0x7c, 0x0a, 0x03, 0x34,
	0x30, 0x34, 0x12, 0x75, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x50, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x3c, 0x7b, 0x22, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3a, 0x36, 0x2c, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x3a, 0x22, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x67,
	0x69, 0x76, 0x65, 0x6e, 0x20, 0x49, 0x44, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x22, 0x7d, 0x4a, 0x54, 0x0a, 0x03, 0x35, 0x30, 0x30,
	0x12, 0x4d, 0x0a, 0x33, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0xb2,
	0xbf, 0x07, 0x16, 0x72, 0x65, 0x61, 0x64, 0x3a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12,
	0x16, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8c, 0x04, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x93, 0x03, 0x92, 0x41, 0xc5, 0x02, 0x12, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x61, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4a, 0x43, 0x0a, 0x03, 0x32, 0x30, 0x32, 0x12, 0x3c, 0x0a, 0x08, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x2e, 0x1a, 0x2c, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x7c, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12,
	0x75, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14,
	0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x50, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x3c, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x3a, 0x36, 0x2c, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x67, 0x69, 0x76, 0x65,
	0x6e, 0x20, 0x49, 0x44, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x2e, 0x22, 0x7d, 0x4a, 0x54, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x4d, 0x0a,
	0x33, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0xb2, 0xbf, 0x07, 0x17,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x3a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x1e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x81, 0x03, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x36, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xff, 0x01, 0x92, 0x41, 0xc8, 0x01, 0x12,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4a, 0x48, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x41,
	0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x3b, 0x0a, 0x39, 0x1a, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4a, 0x54, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x4d, 0x0a, 0x33, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x20,
	0x6f, 0x75, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x12,
	0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0xb2, 0xbf, 0x07, 0x16, 0x72, 0x65, 0x61, 0x64, 0x3a,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x66,
	0x6f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x9b, 0x04, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x03, 0x92, 0x41, 0xe5, 0x02, 0x12, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x3a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c,
	0x6f, 0x6e, 0x67, 0x2d, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x43, 0x0a, 0x03, 0x32, 0x30, 0x32, 0x12, 0x3c, 0x0a,
	0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x2e, 0x1a, 0x2c, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x7c, 0x0a, 0x03, 0x34,
	0x30, 0x34, 0x12, 0x75, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x50, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x3c, 0x7b, 0x22, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3a, 0x36, 0x2c, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x3a, 0x22, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x67,
	0x69, 0x76, 0x65, 0x6e, 0x20, 0x49, 0x44, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x22, 0x7d, 0x4a, 0x54, 0x0a, 0x03, 0x35, 0x30, 0x30,
	0x12, 0x4d, 0x0a, 0x33, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0xb2,
	0xbf, 0x07, 0x17, 0x77, 0x72, 0x69, 0x74, 0x65, 0x3a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x2a, 0x16, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x44, 0x75, 0x6d,
	0x6d, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x88,
	0x01, 0x0a, 0x13, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x92, 0x41, 0x38, 0x12, 0x36,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x42, 0xcd, 0x02, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x42, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x6f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x70, 0x6b, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0xa2, 0x02, 0x03, 0x52, 0x41, 0x43, 0xaa, 0x02, 0x21, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x21, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2,
	0x02, 0x2d, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x24, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a,
	0x3a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescOnce sync.Once
	file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescData = file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDesc
)

func file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescGZIP() []byte {
	file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescOnce.Do(func() {
		file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescData)
	})
	return file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDescData
}

var file_redpanda_api_controlplane_v1beta1_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_redpanda_api_controlplane_v1beta1_cluster_proto_goTypes = []interface{}{
	(Cluster_State)(0),                                          // 0: redpanda.api.controlplane.v1beta1.Cluster.State
	(Cluster_Type)(0),                                           // 1: redpanda.api.controlplane.v1beta1.Cluster.Type
	(Cluster_ConnectionType)(0),                                 // 2: redpanda.api.controlplane.v1beta1.Cluster.ConnectionType
	(*CreateClusterMetadata)(nil),                               // 3: redpanda.api.controlplane.v1beta1.CreateClusterMetadata
	(*DeleteClusterMetadata)(nil),                               // 4: redpanda.api.controlplane.v1beta1.DeleteClusterMetadata
	(*UpdateClusterMetadata)(nil),                               // 5: redpanda.api.controlplane.v1beta1.UpdateClusterMetadata
	(*MTLSSpec)(nil),                                            // 6: redpanda.api.controlplane.v1beta1.MTLSSpec
	(*Cluster)(nil),                                             // 7: redpanda.api.controlplane.v1beta1.Cluster
	(*CreateClusterRequest)(nil),                                // 8: redpanda.api.controlplane.v1beta1.CreateClusterRequest
	(*GetClusterRequest)(nil),                                   // 9: redpanda.api.controlplane.v1beta1.GetClusterRequest
	(*UpdateClusterRequest)(nil),                                // 10: redpanda.api.controlplane.v1beta1.UpdateClusterRequest
	(*UpdateClusterResponse)(nil),                               // 11: redpanda.api.controlplane.v1beta1.UpdateClusterResponse
	(*ListClustersRequest)(nil),                                 // 12: redpanda.api.controlplane.v1beta1.ListClustersRequest
	(*ListClustersResponse)(nil),                                // 13: redpanda.api.controlplane.v1beta1.ListClustersResponse
	(*DeleteClusterRequest)(nil),                                // 14: redpanda.api.controlplane.v1beta1.DeleteClusterRequest
	(*DeleteClusterResponse)(nil),                               // 15: redpanda.api.controlplane.v1beta1.DeleteClusterResponse
	(*Cluster_KafkaAPI)(nil),                                    // 16: redpanda.api.controlplane.v1beta1.Cluster.KafkaAPI
	(*Cluster_HTTPProxy)(nil),                                   // 17: redpanda.api.controlplane.v1beta1.Cluster.HTTPProxy
	(*Cluster_RedpandaConsole)(nil),                             // 18: redpanda.api.controlplane.v1beta1.Cluster.RedpandaConsole
	(*Cluster_SchemaRegistry)(nil),                              // 19: redpanda.api.controlplane.v1beta1.Cluster.SchemaRegistry
	(*Cluster_Prometheus)(nil),                                  // 20: redpanda.api.controlplane.v1beta1.Cluster.Prometheus
	(*Cluster_CustomerManagedResources)(nil),                    // 21: redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources
	(*Cluster_PrivateLinkSpec)(nil),                             // 22: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec
	(*Cluster_DataplaneAPI)(nil),                                // 23: redpanda.api.controlplane.v1beta1.Cluster.DataplaneAPI
	nil,                                                         // 24: redpanda.api.controlplane.v1beta1.Cluster.CloudTagsEntry
	(*Cluster_CustomerManagedResources_GCP)(nil),                // 25: redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP
	(*Cluster_CustomerManagedResources_GCP_Subnet)(nil),         // 26: redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.Subnet
	(*Cluster_CustomerManagedResources_GCP_ServiceAccount)(nil), // 27: redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.ServiceAccount
	(*Cluster_CustomerManagedResources_GCP_Subnet_SecondaryIPv4Range)(nil),               // 28: redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.Subnet.SecondaryIPv4Range
	(*Cluster_PrivateLinkSpec_AWS)(nil),                                                  // 29: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.AWS
	(*Cluster_PrivateLinkSpec_GCP)(nil),                                                  // 30: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.GCP
	(*Cluster_PrivateLinkSpec_PrivateLinkStatus)(nil),                                    // 31: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus
	(*Cluster_PrivateLinkSpec_GCP_PrivateServiceConnectConsumer)(nil),                    // 32: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.GCP.PrivateServiceConnectConsumer
	(*Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS)(nil),                                // 33: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.AWS
	(*Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP)(nil),                                // 34: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.GCP
	(*Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection)(nil),          // 35: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.AWS.VPCEndpointConnection
	(*Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection_DNSEntry)(nil), // 36: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.AWS.VPCEndpointConnection.DNSEntry
	(*Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP_ConnectedEndpoint)(nil),              // 37: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.GCP.ConnectedEndpoint
	(*ListClustersRequest_Filter)(nil),                                                   // 38: redpanda.api.controlplane.v1beta1.ListClustersRequest.Filter
	(*timestamppb.Timestamp)(nil),                                                        // 39: google.protobuf.Timestamp
	(*status.Status)(nil),                                                                // 40: google.rpc.Status
	(CloudProvider)(0),                                                                   // 41: redpanda.api.controlplane.v1beta1.CloudProvider
	(*fieldmaskpb.FieldMask)(nil),                                                        // 42: google.protobuf.FieldMask
	(*CustomerManagedGoogleCloudStorageBucket)(nil),                                      // 43: redpanda.api.controlplane.v1beta1.CustomerManagedGoogleCloudStorageBucket
	(*Operation)(nil), // 44: redpanda.api.controlplane.v1beta1.Operation
}
var file_redpanda_api_controlplane_v1beta1_cluster_proto_depIdxs = []int32{
	39, // 0: redpanda.api.controlplane.v1beta1.Cluster.created_at:type_name -> google.protobuf.Timestamp
	39, // 1: redpanda.api.controlplane.v1beta1.Cluster.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 2: redpanda.api.controlplane.v1beta1.Cluster.state:type_name -> redpanda.api.controlplane.v1beta1.Cluster.State
	40, // 3: redpanda.api.controlplane.v1beta1.Cluster.state_description:type_name -> google.rpc.Status
	1,  // 4: redpanda.api.controlplane.v1beta1.Cluster.type:type_name -> redpanda.api.controlplane.v1beta1.Cluster.Type
	2,  // 5: redpanda.api.controlplane.v1beta1.Cluster.connection_type:type_name -> redpanda.api.controlplane.v1beta1.Cluster.ConnectionType
	41, // 6: redpanda.api.controlplane.v1beta1.Cluster.cloud_provider:type_name -> redpanda.api.controlplane.v1beta1.CloudProvider
	16, // 7: redpanda.api.controlplane.v1beta1.Cluster.kafka_api:type_name -> redpanda.api.controlplane.v1beta1.Cluster.KafkaAPI
	17, // 8: redpanda.api.controlplane.v1beta1.Cluster.http_proxy:type_name -> redpanda.api.controlplane.v1beta1.Cluster.HTTPProxy
	18, // 9: redpanda.api.controlplane.v1beta1.Cluster.redpanda_console:type_name -> redpanda.api.controlplane.v1beta1.Cluster.RedpandaConsole
	19, // 10: redpanda.api.controlplane.v1beta1.Cluster.schema_registry:type_name -> redpanda.api.controlplane.v1beta1.Cluster.SchemaRegistry
	20, // 11: redpanda.api.controlplane.v1beta1.Cluster.prometheus:type_name -> redpanda.api.controlplane.v1beta1.Cluster.Prometheus
	21, // 12: redpanda.api.controlplane.v1beta1.Cluster.customer_managed_resources:type_name -> redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources
	22, // 13: redpanda.api.controlplane.v1beta1.Cluster.private_link:type_name -> redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec
	23, // 14: redpanda.api.controlplane.v1beta1.Cluster.dataplane_api:type_name -> redpanda.api.controlplane.v1beta1.Cluster.DataplaneAPI
	24, // 15: redpanda.api.controlplane.v1beta1.Cluster.cloud_tags:type_name -> redpanda.api.controlplane.v1beta1.Cluster.CloudTagsEntry
	7,  // 16: redpanda.api.controlplane.v1beta1.CreateClusterRequest.cluster:type_name -> redpanda.api.controlplane.v1beta1.Cluster
	7,  // 17: redpanda.api.controlplane.v1beta1.UpdateClusterRequest.cluster:type_name -> redpanda.api.controlplane.v1beta1.Cluster
	42, // 18: redpanda.api.controlplane.v1beta1.UpdateClusterRequest.update_mask:type_name -> google.protobuf.FieldMask
	7,  // 19: redpanda.api.controlplane.v1beta1.UpdateClusterResponse.cluster:type_name -> redpanda.api.controlplane.v1beta1.Cluster
	38, // 20: redpanda.api.controlplane.v1beta1.ListClustersRequest.filter:type_name -> redpanda.api.controlplane.v1beta1.ListClustersRequest.Filter
	7,  // 21: redpanda.api.controlplane.v1beta1.ListClustersResponse.clusters:type_name -> redpanda.api.controlplane.v1beta1.Cluster
	6,  // 22: redpanda.api.controlplane.v1beta1.Cluster.KafkaAPI.mtls:type_name -> redpanda.api.controlplane.v1beta1.MTLSSpec
	6,  // 23: redpanda.api.controlplane.v1beta1.Cluster.HTTPProxy.mtls:type_name -> redpanda.api.controlplane.v1beta1.MTLSSpec
	6,  // 24: redpanda.api.controlplane.v1beta1.Cluster.SchemaRegistry.mtls:type_name -> redpanda.api.controlplane.v1beta1.MTLSSpec
	25, // 25: redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.gcp:type_name -> redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP
	29, // 26: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.aws:type_name -> redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.AWS
	30, // 27: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.gcp:type_name -> redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.GCP
	31, // 28: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.status:type_name -> redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus
	26, // 29: redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.subnet:type_name -> redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.Subnet
	27, // 30: redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.agent_service_account:type_name -> redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.ServiceAccount
	27, // 31: redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.console_service_account:type_name -> redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.ServiceAccount
	27, // 32: redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.connector_service_account:type_name -> redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.ServiceAccount
	27, // 33: redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.redpanda_cluster_service_account:type_name -> redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.ServiceAccount
	27, // 34: redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.gke_service_account:type_name -> redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.ServiceAccount
	43, // 35: redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.tiered_storage_bucket:type_name -> redpanda.api.controlplane.v1beta1.CustomerManagedGoogleCloudStorageBucket
	28, // 36: redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.Subnet.secondary_ipv4_range_pods:type_name -> redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.Subnet.SecondaryIPv4Range
	28, // 37: redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.Subnet.secondary_ipv4_range_services:type_name -> redpanda.api.controlplane.v1beta1.Cluster.CustomerManagedResources.GCP.Subnet.SecondaryIPv4Range
	32, // 38: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.GCP.consumer_accept_list:type_name -> redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.GCP.PrivateServiceConnectConsumer
	33, // 39: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.aws:type_name -> redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.AWS
	34, // 40: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.gcp:type_name -> redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.GCP
	39, // 41: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.AWS.created_at:type_name -> google.protobuf.Timestamp
	39, // 42: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.AWS.deleted_at:type_name -> google.protobuf.Timestamp
	35, // 43: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.AWS.vpc_endpoint_connections:type_name -> redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.AWS.VPCEndpointConnection
	39, // 44: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.GCP.created_at:type_name -> google.protobuf.Timestamp
	39, // 45: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.GCP.deleted_at:type_name -> google.protobuf.Timestamp
	37, // 46: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.GCP.connected_endpoints:type_name -> redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.GCP.ConnectedEndpoint
	39, // 47: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.AWS.VPCEndpointConnection.created_at:type_name -> google.protobuf.Timestamp
	36, // 48: redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.AWS.VPCEndpointConnection.dns_entries:type_name -> redpanda.api.controlplane.v1beta1.Cluster.PrivateLinkSpec.PrivateLinkStatus.AWS.VPCEndpointConnection.DNSEntry
	41, // 49: redpanda.api.controlplane.v1beta1.ListClustersRequest.Filter.cloud_provider:type_name -> redpanda.api.controlplane.v1beta1.CloudProvider
	8,  // 50: redpanda.api.controlplane.v1beta1.ClusterService.CreateCluster:input_type -> redpanda.api.controlplane.v1beta1.CreateClusterRequest
	9,  // 51: redpanda.api.controlplane.v1beta1.ClusterService.GetCluster:input_type -> redpanda.api.controlplane.v1beta1.GetClusterRequest
	10, // 52: redpanda.api.controlplane.v1beta1.ClusterService.UpdateCluster:input_type -> redpanda.api.controlplane.v1beta1.UpdateClusterRequest
	12, // 53: redpanda.api.controlplane.v1beta1.ClusterService.ListClusters:input_type -> redpanda.api.controlplane.v1beta1.ListClustersRequest
	14, // 54: redpanda.api.controlplane.v1beta1.ClusterService.DeleteCluster:input_type -> redpanda.api.controlplane.v1beta1.DeleteClusterRequest
	8,  // 55: redpanda.api.controlplane.v1beta1.ClusterService.DummyCreateMetadata:input_type -> redpanda.api.controlplane.v1beta1.CreateClusterRequest
	10, // 56: redpanda.api.controlplane.v1beta1.ClusterService.DummyUpdateMetadata:input_type -> redpanda.api.controlplane.v1beta1.UpdateClusterRequest
	14, // 57: redpanda.api.controlplane.v1beta1.ClusterService.DummyDeleteMetadata:input_type -> redpanda.api.controlplane.v1beta1.DeleteClusterRequest
	44, // 58: redpanda.api.controlplane.v1beta1.ClusterService.CreateCluster:output_type -> redpanda.api.controlplane.v1beta1.Operation
	7,  // 59: redpanda.api.controlplane.v1beta1.ClusterService.GetCluster:output_type -> redpanda.api.controlplane.v1beta1.Cluster
	44, // 60: redpanda.api.controlplane.v1beta1.ClusterService.UpdateCluster:output_type -> redpanda.api.controlplane.v1beta1.Operation
	13, // 61: redpanda.api.controlplane.v1beta1.ClusterService.ListClusters:output_type -> redpanda.api.controlplane.v1beta1.ListClustersResponse
	44, // 62: redpanda.api.controlplane.v1beta1.ClusterService.DeleteCluster:output_type -> redpanda.api.controlplane.v1beta1.Operation
	3,  // 63: redpanda.api.controlplane.v1beta1.ClusterService.DummyCreateMetadata:output_type -> redpanda.api.controlplane.v1beta1.CreateClusterMetadata
	5,  // 64: redpanda.api.controlplane.v1beta1.ClusterService.DummyUpdateMetadata:output_type -> redpanda.api.controlplane.v1beta1.UpdateClusterMetadata
	4,  // 65: redpanda.api.controlplane.v1beta1.ClusterService.DummyDeleteMetadata:output_type -> redpanda.api.controlplane.v1beta1.DeleteClusterMetadata
	58, // [58:66] is the sub-list for method output_type
	50, // [50:58] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_redpanda_api_controlplane_v1beta1_cluster_proto_init() }
func file_redpanda_api_controlplane_v1beta1_cluster_proto_init() {
	if File_redpanda_api_controlplane_v1beta1_cluster_proto != nil {
		return
	}
	file_redpanda_api_controlplane_v1beta1_common_proto_init()
	file_redpanda_api_controlplane_v1beta1_operation_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTLSSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_KafkaAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_HTTPProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_RedpandaConsole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_SchemaRegistry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_Prometheus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_CustomerManagedResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_PrivateLinkSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_DataplaneAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_CustomerManagedResources_GCP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_CustomerManagedResources_GCP_Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_CustomerManagedResources_GCP_ServiceAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_CustomerManagedResources_GCP_Subnet_SecondaryIPv4Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_PrivateLinkSpec_AWS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_PrivateLinkSpec_GCP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_PrivateLinkSpec_PrivateLinkStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_PrivateLinkSpec_GCP_PrivateServiceConnectConsumer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_PrivateLinkSpec_PrivateLinkStatus_AWS_VPCEndpointConnection_DNSEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster_PrivateLinkSpec_PrivateLinkStatus_GCP_ConnectedEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClustersRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Cluster_CustomerManagedResources_Gcp)(nil),
	}
	file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*Cluster_PrivateLinkSpec_Aws)(nil),
		(*Cluster_PrivateLinkSpec_Gcp)(nil),
	}
	file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*Cluster_PrivateLinkSpec_PrivateLinkStatus_Aws)(nil),
		(*Cluster_PrivateLinkSpec_PrivateLinkStatus_Gcp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_controlplane_v1beta1_cluster_proto_goTypes,
		DependencyIndexes: file_redpanda_api_controlplane_v1beta1_cluster_proto_depIdxs,
		EnumInfos:         file_redpanda_api_controlplane_v1beta1_cluster_proto_enumTypes,
		MessageInfos:      file_redpanda_api_controlplane_v1beta1_cluster_proto_msgTypes,
	}.Build()
	File_redpanda_api_controlplane_v1beta1_cluster_proto = out.File
	file_redpanda_api_controlplane_v1beta1_cluster_proto_rawDesc = nil
	file_redpanda_api_controlplane_v1beta1_cluster_proto_goTypes = nil
	file_redpanda_api_controlplane_v1beta1_cluster_proto_depIdxs = nil
}
