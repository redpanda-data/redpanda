// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/controlplane/v1beta1/cluster.proto

package controlplanev1beta1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1beta1 "github.com/redpanda-data/redpanda/src/go/rpk/proto/gen/go/redpanda/api/controlplane/v1beta1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ClusterServiceName is the fully-qualified name of the ClusterService service.
	ClusterServiceName = "redpanda.api.controlplane.v1beta1.ClusterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClusterServiceCreateClusterProcedure is the fully-qualified name of the ClusterService's
	// CreateCluster RPC.
	ClusterServiceCreateClusterProcedure = "/redpanda.api.controlplane.v1beta1.ClusterService/CreateCluster"
	// ClusterServiceGetClusterProcedure is the fully-qualified name of the ClusterService's GetCluster
	// RPC.
	ClusterServiceGetClusterProcedure = "/redpanda.api.controlplane.v1beta1.ClusterService/GetCluster"
	// ClusterServiceUpdateClusterProcedure is the fully-qualified name of the ClusterService's
	// UpdateCluster RPC.
	ClusterServiceUpdateClusterProcedure = "/redpanda.api.controlplane.v1beta1.ClusterService/UpdateCluster"
	// ClusterServiceListClustersProcedure is the fully-qualified name of the ClusterService's
	// ListClusters RPC.
	ClusterServiceListClustersProcedure = "/redpanda.api.controlplane.v1beta1.ClusterService/ListClusters"
	// ClusterServiceDeleteClusterProcedure is the fully-qualified name of the ClusterService's
	// DeleteCluster RPC.
	ClusterServiceDeleteClusterProcedure = "/redpanda.api.controlplane.v1beta1.ClusterService/DeleteCluster"
	// ClusterServiceDummyCreateMetadataProcedure is the fully-qualified name of the ClusterService's
	// DummyCreateMetadata RPC.
	ClusterServiceDummyCreateMetadataProcedure = "/redpanda.api.controlplane.v1beta1.ClusterService/DummyCreateMetadata"
	// ClusterServiceDummyUpdateMetadataProcedure is the fully-qualified name of the ClusterService's
	// DummyUpdateMetadata RPC.
	ClusterServiceDummyUpdateMetadataProcedure = "/redpanda.api.controlplane.v1beta1.ClusterService/DummyUpdateMetadata"
	// ClusterServiceDummyDeleteMetadataProcedure is the fully-qualified name of the ClusterService's
	// DummyDeleteMetadata RPC.
	ClusterServiceDummyDeleteMetadataProcedure = "/redpanda.api.controlplane.v1beta1.ClusterService/DummyDeleteMetadata"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	clusterServiceServiceDescriptor                   = v1beta1.File_redpanda_api_controlplane_v1beta1_cluster_proto.Services().ByName("ClusterService")
	clusterServiceCreateClusterMethodDescriptor       = clusterServiceServiceDescriptor.Methods().ByName("CreateCluster")
	clusterServiceGetClusterMethodDescriptor          = clusterServiceServiceDescriptor.Methods().ByName("GetCluster")
	clusterServiceUpdateClusterMethodDescriptor       = clusterServiceServiceDescriptor.Methods().ByName("UpdateCluster")
	clusterServiceListClustersMethodDescriptor        = clusterServiceServiceDescriptor.Methods().ByName("ListClusters")
	clusterServiceDeleteClusterMethodDescriptor       = clusterServiceServiceDescriptor.Methods().ByName("DeleteCluster")
	clusterServiceDummyCreateMetadataMethodDescriptor = clusterServiceServiceDescriptor.Methods().ByName("DummyCreateMetadata")
	clusterServiceDummyUpdateMetadataMethodDescriptor = clusterServiceServiceDescriptor.Methods().ByName("DummyUpdateMetadata")
	clusterServiceDummyDeleteMetadataMethodDescriptor = clusterServiceServiceDescriptor.Methods().ByName("DummyDeleteMetadata")
)

// ClusterServiceClient is a client for the redpanda.api.controlplane.v1beta1.ClusterService
// service.
type ClusterServiceClient interface {
	// Ignore these linter rules, because we intentionally return a generic Operation message for all long-running operations.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// CreateCluster create a Redpanda cluster. The input contains the spec, that describes the cluster.
	// A Operation is returned. This task allows the caller to find out when the long-running operation of creating a cluster has finished.
	CreateCluster(context.Context, *connect.Request[v1beta1.CreateClusterRequest]) (*connect.Response[v1beta1.Operation], error)
	// GetCluster retrieves the cluster's information
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetCluster(context.Context, *connect.Request[v1beta1.GetClusterRequest]) (*connect.Response[v1beta1.Cluster], error)
	// Ignore these linter rules, because we intentionally return a generic Operation message for all long-running operations.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// UpdateCluster updates the cluster. It returns a Operation that can be used to wait for the Update to be applied.
	UpdateCluster(context.Context, *connect.Request[v1beta1.UpdateClusterRequest]) (*connect.Response[v1beta1.Operation], error)
	// ListClusters lists clusters.
	ListClusters(context.Context, *connect.Request[v1beta1.ListClustersRequest]) (*connect.Response[v1beta1.ListClustersResponse], error)
	// Ignore these linter rules, because we intentionally return a generic Operation message for all long-running operations.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// DeleteCluster deletes a cluster. It returns a Operation, that can be used to wait for the deletion to be finished.
	DeleteCluster(context.Context, *connect.Request[v1beta1.DeleteClusterRequest]) (*connect.Response[v1beta1.Operation], error)
	// Force openapi generator to generate the CreateClusterMetadata, so we can use it in OpenAPI schema.
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	DummyCreateMetadata(context.Context, *connect.Request[v1beta1.CreateClusterRequest]) (*connect.Response[v1beta1.CreateClusterMetadata], error)
	// Force openapi generator to generate the UpdateClusterMetadata, so we can use it in OpenAPI schema.
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	DummyUpdateMetadata(context.Context, *connect.Request[v1beta1.UpdateClusterRequest]) (*connect.Response[v1beta1.UpdateClusterMetadata], error)
	// Force openapi generator to generate the DeleteClusterMetadata, so we can use it in OpenAPI schema.
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	DummyDeleteMetadata(context.Context, *connect.Request[v1beta1.DeleteClusterRequest]) (*connect.Response[v1beta1.DeleteClusterMetadata], error)
}

// NewClusterServiceClient constructs a client for the
// redpanda.api.controlplane.v1beta1.ClusterService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClusterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &clusterServiceClient{
		createCluster: connect.NewClient[v1beta1.CreateClusterRequest, v1beta1.Operation](
			httpClient,
			baseURL+ClusterServiceCreateClusterProcedure,
			connect.WithSchema(clusterServiceCreateClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCluster: connect.NewClient[v1beta1.GetClusterRequest, v1beta1.Cluster](
			httpClient,
			baseURL+ClusterServiceGetClusterProcedure,
			connect.WithSchema(clusterServiceGetClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateCluster: connect.NewClient[v1beta1.UpdateClusterRequest, v1beta1.Operation](
			httpClient,
			baseURL+ClusterServiceUpdateClusterProcedure,
			connect.WithSchema(clusterServiceUpdateClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listClusters: connect.NewClient[v1beta1.ListClustersRequest, v1beta1.ListClustersResponse](
			httpClient,
			baseURL+ClusterServiceListClustersProcedure,
			connect.WithSchema(clusterServiceListClustersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteCluster: connect.NewClient[v1beta1.DeleteClusterRequest, v1beta1.Operation](
			httpClient,
			baseURL+ClusterServiceDeleteClusterProcedure,
			connect.WithSchema(clusterServiceDeleteClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		dummyCreateMetadata: connect.NewClient[v1beta1.CreateClusterRequest, v1beta1.CreateClusterMetadata](
			httpClient,
			baseURL+ClusterServiceDummyCreateMetadataProcedure,
			connect.WithSchema(clusterServiceDummyCreateMetadataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		dummyUpdateMetadata: connect.NewClient[v1beta1.UpdateClusterRequest, v1beta1.UpdateClusterMetadata](
			httpClient,
			baseURL+ClusterServiceDummyUpdateMetadataProcedure,
			connect.WithSchema(clusterServiceDummyUpdateMetadataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		dummyDeleteMetadata: connect.NewClient[v1beta1.DeleteClusterRequest, v1beta1.DeleteClusterMetadata](
			httpClient,
			baseURL+ClusterServiceDummyDeleteMetadataProcedure,
			connect.WithSchema(clusterServiceDummyDeleteMetadataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// clusterServiceClient implements ClusterServiceClient.
type clusterServiceClient struct {
	createCluster       *connect.Client[v1beta1.CreateClusterRequest, v1beta1.Operation]
	getCluster          *connect.Client[v1beta1.GetClusterRequest, v1beta1.Cluster]
	updateCluster       *connect.Client[v1beta1.UpdateClusterRequest, v1beta1.Operation]
	listClusters        *connect.Client[v1beta1.ListClustersRequest, v1beta1.ListClustersResponse]
	deleteCluster       *connect.Client[v1beta1.DeleteClusterRequest, v1beta1.Operation]
	dummyCreateMetadata *connect.Client[v1beta1.CreateClusterRequest, v1beta1.CreateClusterMetadata]
	dummyUpdateMetadata *connect.Client[v1beta1.UpdateClusterRequest, v1beta1.UpdateClusterMetadata]
	dummyDeleteMetadata *connect.Client[v1beta1.DeleteClusterRequest, v1beta1.DeleteClusterMetadata]
}

// CreateCluster calls redpanda.api.controlplane.v1beta1.ClusterService.CreateCluster.
func (c *clusterServiceClient) CreateCluster(ctx context.Context, req *connect.Request[v1beta1.CreateClusterRequest]) (*connect.Response[v1beta1.Operation], error) {
	return c.createCluster.CallUnary(ctx, req)
}

// GetCluster calls redpanda.api.controlplane.v1beta1.ClusterService.GetCluster.
func (c *clusterServiceClient) GetCluster(ctx context.Context, req *connect.Request[v1beta1.GetClusterRequest]) (*connect.Response[v1beta1.Cluster], error) {
	return c.getCluster.CallUnary(ctx, req)
}

// UpdateCluster calls redpanda.api.controlplane.v1beta1.ClusterService.UpdateCluster.
func (c *clusterServiceClient) UpdateCluster(ctx context.Context, req *connect.Request[v1beta1.UpdateClusterRequest]) (*connect.Response[v1beta1.Operation], error) {
	return c.updateCluster.CallUnary(ctx, req)
}

// ListClusters calls redpanda.api.controlplane.v1beta1.ClusterService.ListClusters.
func (c *clusterServiceClient) ListClusters(ctx context.Context, req *connect.Request[v1beta1.ListClustersRequest]) (*connect.Response[v1beta1.ListClustersResponse], error) {
	return c.listClusters.CallUnary(ctx, req)
}

// DeleteCluster calls redpanda.api.controlplane.v1beta1.ClusterService.DeleteCluster.
func (c *clusterServiceClient) DeleteCluster(ctx context.Context, req *connect.Request[v1beta1.DeleteClusterRequest]) (*connect.Response[v1beta1.Operation], error) {
	return c.deleteCluster.CallUnary(ctx, req)
}

// DummyCreateMetadata calls redpanda.api.controlplane.v1beta1.ClusterService.DummyCreateMetadata.
func (c *clusterServiceClient) DummyCreateMetadata(ctx context.Context, req *connect.Request[v1beta1.CreateClusterRequest]) (*connect.Response[v1beta1.CreateClusterMetadata], error) {
	return c.dummyCreateMetadata.CallUnary(ctx, req)
}

// DummyUpdateMetadata calls redpanda.api.controlplane.v1beta1.ClusterService.DummyUpdateMetadata.
func (c *clusterServiceClient) DummyUpdateMetadata(ctx context.Context, req *connect.Request[v1beta1.UpdateClusterRequest]) (*connect.Response[v1beta1.UpdateClusterMetadata], error) {
	return c.dummyUpdateMetadata.CallUnary(ctx, req)
}

// DummyDeleteMetadata calls redpanda.api.controlplane.v1beta1.ClusterService.DummyDeleteMetadata.
func (c *clusterServiceClient) DummyDeleteMetadata(ctx context.Context, req *connect.Request[v1beta1.DeleteClusterRequest]) (*connect.Response[v1beta1.DeleteClusterMetadata], error) {
	return c.dummyDeleteMetadata.CallUnary(ctx, req)
}

// ClusterServiceHandler is an implementation of the
// redpanda.api.controlplane.v1beta1.ClusterService service.
type ClusterServiceHandler interface {
	// Ignore these linter rules, because we intentionally return a generic Operation message for all long-running operations.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// CreateCluster create a Redpanda cluster. The input contains the spec, that describes the cluster.
	// A Operation is returned. This task allows the caller to find out when the long-running operation of creating a cluster has finished.
	CreateCluster(context.Context, *connect.Request[v1beta1.CreateClusterRequest]) (*connect.Response[v1beta1.Operation], error)
	// GetCluster retrieves the cluster's information
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetCluster(context.Context, *connect.Request[v1beta1.GetClusterRequest]) (*connect.Response[v1beta1.Cluster], error)
	// Ignore these linter rules, because we intentionally return a generic Operation message for all long-running operations.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// UpdateCluster updates the cluster. It returns a Operation that can be used to wait for the Update to be applied.
	UpdateCluster(context.Context, *connect.Request[v1beta1.UpdateClusterRequest]) (*connect.Response[v1beta1.Operation], error)
	// ListClusters lists clusters.
	ListClusters(context.Context, *connect.Request[v1beta1.ListClustersRequest]) (*connect.Response[v1beta1.ListClustersResponse], error)
	// Ignore these linter rules, because we intentionally return a generic Operation message for all long-running operations.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// DeleteCluster deletes a cluster. It returns a Operation, that can be used to wait for the deletion to be finished.
	DeleteCluster(context.Context, *connect.Request[v1beta1.DeleteClusterRequest]) (*connect.Response[v1beta1.Operation], error)
	// Force openapi generator to generate the CreateClusterMetadata, so we can use it in OpenAPI schema.
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	DummyCreateMetadata(context.Context, *connect.Request[v1beta1.CreateClusterRequest]) (*connect.Response[v1beta1.CreateClusterMetadata], error)
	// Force openapi generator to generate the UpdateClusterMetadata, so we can use it in OpenAPI schema.
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	DummyUpdateMetadata(context.Context, *connect.Request[v1beta1.UpdateClusterRequest]) (*connect.Response[v1beta1.UpdateClusterMetadata], error)
	// Force openapi generator to generate the DeleteClusterMetadata, so we can use it in OpenAPI schema.
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	DummyDeleteMetadata(context.Context, *connect.Request[v1beta1.DeleteClusterRequest]) (*connect.Response[v1beta1.DeleteClusterMetadata], error)
}

// NewClusterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterServiceHandler(svc ClusterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clusterServiceCreateClusterHandler := connect.NewUnaryHandler(
		ClusterServiceCreateClusterProcedure,
		svc.CreateCluster,
		connect.WithSchema(clusterServiceCreateClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceGetClusterHandler := connect.NewUnaryHandler(
		ClusterServiceGetClusterProcedure,
		svc.GetCluster,
		connect.WithSchema(clusterServiceGetClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceUpdateClusterHandler := connect.NewUnaryHandler(
		ClusterServiceUpdateClusterProcedure,
		svc.UpdateCluster,
		connect.WithSchema(clusterServiceUpdateClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceListClustersHandler := connect.NewUnaryHandler(
		ClusterServiceListClustersProcedure,
		svc.ListClusters,
		connect.WithSchema(clusterServiceListClustersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceDeleteClusterHandler := connect.NewUnaryHandler(
		ClusterServiceDeleteClusterProcedure,
		svc.DeleteCluster,
		connect.WithSchema(clusterServiceDeleteClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceDummyCreateMetadataHandler := connect.NewUnaryHandler(
		ClusterServiceDummyCreateMetadataProcedure,
		svc.DummyCreateMetadata,
		connect.WithSchema(clusterServiceDummyCreateMetadataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceDummyUpdateMetadataHandler := connect.NewUnaryHandler(
		ClusterServiceDummyUpdateMetadataProcedure,
		svc.DummyUpdateMetadata,
		connect.WithSchema(clusterServiceDummyUpdateMetadataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceDummyDeleteMetadataHandler := connect.NewUnaryHandler(
		ClusterServiceDummyDeleteMetadataProcedure,
		svc.DummyDeleteMetadata,
		connect.WithSchema(clusterServiceDummyDeleteMetadataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.controlplane.v1beta1.ClusterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClusterServiceCreateClusterProcedure:
			clusterServiceCreateClusterHandler.ServeHTTP(w, r)
		case ClusterServiceGetClusterProcedure:
			clusterServiceGetClusterHandler.ServeHTTP(w, r)
		case ClusterServiceUpdateClusterProcedure:
			clusterServiceUpdateClusterHandler.ServeHTTP(w, r)
		case ClusterServiceListClustersProcedure:
			clusterServiceListClustersHandler.ServeHTTP(w, r)
		case ClusterServiceDeleteClusterProcedure:
			clusterServiceDeleteClusterHandler.ServeHTTP(w, r)
		case ClusterServiceDummyCreateMetadataProcedure:
			clusterServiceDummyCreateMetadataHandler.ServeHTTP(w, r)
		case ClusterServiceDummyUpdateMetadataProcedure:
			clusterServiceDummyUpdateMetadataHandler.ServeHTTP(w, r)
		case ClusterServiceDummyDeleteMetadataProcedure:
			clusterServiceDummyDeleteMetadataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClusterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterServiceHandler struct{}

func (UnimplementedClusterServiceHandler) CreateCluster(context.Context, *connect.Request[v1beta1.CreateClusterRequest]) (*connect.Response[v1beta1.Operation], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.ClusterService.CreateCluster is not implemented"))
}

func (UnimplementedClusterServiceHandler) GetCluster(context.Context, *connect.Request[v1beta1.GetClusterRequest]) (*connect.Response[v1beta1.Cluster], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.ClusterService.GetCluster is not implemented"))
}

func (UnimplementedClusterServiceHandler) UpdateCluster(context.Context, *connect.Request[v1beta1.UpdateClusterRequest]) (*connect.Response[v1beta1.Operation], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.ClusterService.UpdateCluster is not implemented"))
}

func (UnimplementedClusterServiceHandler) ListClusters(context.Context, *connect.Request[v1beta1.ListClustersRequest]) (*connect.Response[v1beta1.ListClustersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.ClusterService.ListClusters is not implemented"))
}

func (UnimplementedClusterServiceHandler) DeleteCluster(context.Context, *connect.Request[v1beta1.DeleteClusterRequest]) (*connect.Response[v1beta1.Operation], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.ClusterService.DeleteCluster is not implemented"))
}

func (UnimplementedClusterServiceHandler) DummyCreateMetadata(context.Context, *connect.Request[v1beta1.CreateClusterRequest]) (*connect.Response[v1beta1.CreateClusterMetadata], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.ClusterService.DummyCreateMetadata is not implemented"))
}

func (UnimplementedClusterServiceHandler) DummyUpdateMetadata(context.Context, *connect.Request[v1beta1.UpdateClusterRequest]) (*connect.Response[v1beta1.UpdateClusterMetadata], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.ClusterService.DummyUpdateMetadata is not implemented"))
}

func (UnimplementedClusterServiceHandler) DummyDeleteMetadata(context.Context, *connect.Request[v1beta1.DeleteClusterRequest]) (*connect.Response[v1beta1.DeleteClusterMetadata], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.ClusterService.DummyDeleteMetadata is not implemented"))
}
