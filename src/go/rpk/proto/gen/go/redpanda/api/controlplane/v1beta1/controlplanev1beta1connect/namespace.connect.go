// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/controlplane/v1beta1/namespace.proto

package controlplanev1beta1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1beta1 "github.com/redpanda-data/redpanda/src/go/rpk/proto/gen/go/redpanda/api/controlplane/v1beta1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NamespaceServiceName is the fully-qualified name of the NamespaceService service.
	NamespaceServiceName = "redpanda.api.controlplane.v1beta1.NamespaceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NamespaceServiceCreateNamespaceProcedure is the fully-qualified name of the NamespaceService's
	// CreateNamespace RPC.
	NamespaceServiceCreateNamespaceProcedure = "/redpanda.api.controlplane.v1beta1.NamespaceService/CreateNamespace"
	// NamespaceServiceUpdateNamespaceProcedure is the fully-qualified name of the NamespaceService's
	// UpdateNamespace RPC.
	NamespaceServiceUpdateNamespaceProcedure = "/redpanda.api.controlplane.v1beta1.NamespaceService/UpdateNamespace"
	// NamespaceServiceGetNamespaceProcedure is the fully-qualified name of the NamespaceService's
	// GetNamespace RPC.
	NamespaceServiceGetNamespaceProcedure = "/redpanda.api.controlplane.v1beta1.NamespaceService/GetNamespace"
	// NamespaceServiceListNamespacesProcedure is the fully-qualified name of the NamespaceService's
	// ListNamespaces RPC.
	NamespaceServiceListNamespacesProcedure = "/redpanda.api.controlplane.v1beta1.NamespaceService/ListNamespaces"
	// NamespaceServiceDeleteNamespaceProcedure is the fully-qualified name of the NamespaceService's
	// DeleteNamespace RPC.
	NamespaceServiceDeleteNamespaceProcedure = "/redpanda.api.controlplane.v1beta1.NamespaceService/DeleteNamespace"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	namespaceServiceServiceDescriptor               = v1beta1.File_redpanda_api_controlplane_v1beta1_namespace_proto.Services().ByName("NamespaceService")
	namespaceServiceCreateNamespaceMethodDescriptor = namespaceServiceServiceDescriptor.Methods().ByName("CreateNamespace")
	namespaceServiceUpdateNamespaceMethodDescriptor = namespaceServiceServiceDescriptor.Methods().ByName("UpdateNamespace")
	namespaceServiceGetNamespaceMethodDescriptor    = namespaceServiceServiceDescriptor.Methods().ByName("GetNamespace")
	namespaceServiceListNamespacesMethodDescriptor  = namespaceServiceServiceDescriptor.Methods().ByName("ListNamespaces")
	namespaceServiceDeleteNamespaceMethodDescriptor = namespaceServiceServiceDescriptor.Methods().ByName("DeleteNamespace")
)

// NamespaceServiceClient is a client for the redpanda.api.controlplane.v1beta1.NamespaceService
// service.
type NamespaceServiceClient interface {
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// CreateNamespace creates the namespace
	CreateNamespace(context.Context, *connect.Request[v1beta1.CreateNamespaceRequest]) (*connect.Response[v1beta1.Namespace], error)
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// UpdateNamespace updates the namespace. It returns a Operation that can be used to wait for the Update to be applied.
	UpdateNamespace(context.Context, *connect.Request[v1beta1.UpdateNamespaceRequest]) (*connect.Response[v1beta1.Namespace], error)
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// GetNamespace retrieves the namespace's information
	GetNamespace(context.Context, *connect.Request[v1beta1.GetNamespaceRequest]) (*connect.Response[v1beta1.Namespace], error)
	// ListNamespaces list namespaces.
	ListNamespaces(context.Context, *connect.Request[v1beta1.ListNamespacesRequest]) (*connect.Response[v1beta1.ListNamespacesResponse], error)
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// DeleteNamespace deletes a namespace.
	DeleteNamespace(context.Context, *connect.Request[v1beta1.DeleteNamespaceRequest]) (*connect.Response[v1beta1.DeleteNamespaceResponse], error)
}

// NewNamespaceServiceClient constructs a client for the
// redpanda.api.controlplane.v1beta1.NamespaceService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNamespaceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NamespaceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &namespaceServiceClient{
		createNamespace: connect.NewClient[v1beta1.CreateNamespaceRequest, v1beta1.Namespace](
			httpClient,
			baseURL+NamespaceServiceCreateNamespaceProcedure,
			connect.WithSchema(namespaceServiceCreateNamespaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateNamespace: connect.NewClient[v1beta1.UpdateNamespaceRequest, v1beta1.Namespace](
			httpClient,
			baseURL+NamespaceServiceUpdateNamespaceProcedure,
			connect.WithSchema(namespaceServiceUpdateNamespaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNamespace: connect.NewClient[v1beta1.GetNamespaceRequest, v1beta1.Namespace](
			httpClient,
			baseURL+NamespaceServiceGetNamespaceProcedure,
			connect.WithSchema(namespaceServiceGetNamespaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listNamespaces: connect.NewClient[v1beta1.ListNamespacesRequest, v1beta1.ListNamespacesResponse](
			httpClient,
			baseURL+NamespaceServiceListNamespacesProcedure,
			connect.WithSchema(namespaceServiceListNamespacesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteNamespace: connect.NewClient[v1beta1.DeleteNamespaceRequest, v1beta1.DeleteNamespaceResponse](
			httpClient,
			baseURL+NamespaceServiceDeleteNamespaceProcedure,
			connect.WithSchema(namespaceServiceDeleteNamespaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// namespaceServiceClient implements NamespaceServiceClient.
type namespaceServiceClient struct {
	createNamespace *connect.Client[v1beta1.CreateNamespaceRequest, v1beta1.Namespace]
	updateNamespace *connect.Client[v1beta1.UpdateNamespaceRequest, v1beta1.Namespace]
	getNamespace    *connect.Client[v1beta1.GetNamespaceRequest, v1beta1.Namespace]
	listNamespaces  *connect.Client[v1beta1.ListNamespacesRequest, v1beta1.ListNamespacesResponse]
	deleteNamespace *connect.Client[v1beta1.DeleteNamespaceRequest, v1beta1.DeleteNamespaceResponse]
}

// CreateNamespace calls redpanda.api.controlplane.v1beta1.NamespaceService.CreateNamespace.
func (c *namespaceServiceClient) CreateNamespace(ctx context.Context, req *connect.Request[v1beta1.CreateNamespaceRequest]) (*connect.Response[v1beta1.Namespace], error) {
	return c.createNamespace.CallUnary(ctx, req)
}

// UpdateNamespace calls redpanda.api.controlplane.v1beta1.NamespaceService.UpdateNamespace.
func (c *namespaceServiceClient) UpdateNamespace(ctx context.Context, req *connect.Request[v1beta1.UpdateNamespaceRequest]) (*connect.Response[v1beta1.Namespace], error) {
	return c.updateNamespace.CallUnary(ctx, req)
}

// GetNamespace calls redpanda.api.controlplane.v1beta1.NamespaceService.GetNamespace.
func (c *namespaceServiceClient) GetNamespace(ctx context.Context, req *connect.Request[v1beta1.GetNamespaceRequest]) (*connect.Response[v1beta1.Namespace], error) {
	return c.getNamespace.CallUnary(ctx, req)
}

// ListNamespaces calls redpanda.api.controlplane.v1beta1.NamespaceService.ListNamespaces.
func (c *namespaceServiceClient) ListNamespaces(ctx context.Context, req *connect.Request[v1beta1.ListNamespacesRequest]) (*connect.Response[v1beta1.ListNamespacesResponse], error) {
	return c.listNamespaces.CallUnary(ctx, req)
}

// DeleteNamespace calls redpanda.api.controlplane.v1beta1.NamespaceService.DeleteNamespace.
func (c *namespaceServiceClient) DeleteNamespace(ctx context.Context, req *connect.Request[v1beta1.DeleteNamespaceRequest]) (*connect.Response[v1beta1.DeleteNamespaceResponse], error) {
	return c.deleteNamespace.CallUnary(ctx, req)
}

// NamespaceServiceHandler is an implementation of the
// redpanda.api.controlplane.v1beta1.NamespaceService service.
type NamespaceServiceHandler interface {
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// CreateNamespace creates the namespace
	CreateNamespace(context.Context, *connect.Request[v1beta1.CreateNamespaceRequest]) (*connect.Response[v1beta1.Namespace], error)
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// UpdateNamespace updates the namespace. It returns a Operation that can be used to wait for the Update to be applied.
	UpdateNamespace(context.Context, *connect.Request[v1beta1.UpdateNamespaceRequest]) (*connect.Response[v1beta1.Namespace], error)
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// GetNamespace retrieves the namespace's information
	GetNamespace(context.Context, *connect.Request[v1beta1.GetNamespaceRequest]) (*connect.Response[v1beta1.Namespace], error)
	// ListNamespaces list namespaces.
	ListNamespaces(context.Context, *connect.Request[v1beta1.ListNamespacesRequest]) (*connect.Response[v1beta1.ListNamespacesResponse], error)
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// DeleteNamespace deletes a namespace.
	DeleteNamespace(context.Context, *connect.Request[v1beta1.DeleteNamespaceRequest]) (*connect.Response[v1beta1.DeleteNamespaceResponse], error)
}

// NewNamespaceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNamespaceServiceHandler(svc NamespaceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	namespaceServiceCreateNamespaceHandler := connect.NewUnaryHandler(
		NamespaceServiceCreateNamespaceProcedure,
		svc.CreateNamespace,
		connect.WithSchema(namespaceServiceCreateNamespaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	namespaceServiceUpdateNamespaceHandler := connect.NewUnaryHandler(
		NamespaceServiceUpdateNamespaceProcedure,
		svc.UpdateNamespace,
		connect.WithSchema(namespaceServiceUpdateNamespaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	namespaceServiceGetNamespaceHandler := connect.NewUnaryHandler(
		NamespaceServiceGetNamespaceProcedure,
		svc.GetNamespace,
		connect.WithSchema(namespaceServiceGetNamespaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	namespaceServiceListNamespacesHandler := connect.NewUnaryHandler(
		NamespaceServiceListNamespacesProcedure,
		svc.ListNamespaces,
		connect.WithSchema(namespaceServiceListNamespacesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	namespaceServiceDeleteNamespaceHandler := connect.NewUnaryHandler(
		NamespaceServiceDeleteNamespaceProcedure,
		svc.DeleteNamespace,
		connect.WithSchema(namespaceServiceDeleteNamespaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.controlplane.v1beta1.NamespaceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NamespaceServiceCreateNamespaceProcedure:
			namespaceServiceCreateNamespaceHandler.ServeHTTP(w, r)
		case NamespaceServiceUpdateNamespaceProcedure:
			namespaceServiceUpdateNamespaceHandler.ServeHTTP(w, r)
		case NamespaceServiceGetNamespaceProcedure:
			namespaceServiceGetNamespaceHandler.ServeHTTP(w, r)
		case NamespaceServiceListNamespacesProcedure:
			namespaceServiceListNamespacesHandler.ServeHTTP(w, r)
		case NamespaceServiceDeleteNamespaceProcedure:
			namespaceServiceDeleteNamespaceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNamespaceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNamespaceServiceHandler struct{}

func (UnimplementedNamespaceServiceHandler) CreateNamespace(context.Context, *connect.Request[v1beta1.CreateNamespaceRequest]) (*connect.Response[v1beta1.Namespace], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.NamespaceService.CreateNamespace is not implemented"))
}

func (UnimplementedNamespaceServiceHandler) UpdateNamespace(context.Context, *connect.Request[v1beta1.UpdateNamespaceRequest]) (*connect.Response[v1beta1.Namespace], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.NamespaceService.UpdateNamespace is not implemented"))
}

func (UnimplementedNamespaceServiceHandler) GetNamespace(context.Context, *connect.Request[v1beta1.GetNamespaceRequest]) (*connect.Response[v1beta1.Namespace], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.NamespaceService.GetNamespace is not implemented"))
}

func (UnimplementedNamespaceServiceHandler) ListNamespaces(context.Context, *connect.Request[v1beta1.ListNamespacesRequest]) (*connect.Response[v1beta1.ListNamespacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.NamespaceService.ListNamespaces is not implemented"))
}

func (UnimplementedNamespaceServiceHandler) DeleteNamespace(context.Context, *connect.Request[v1beta1.DeleteNamespaceRequest]) (*connect.Response[v1beta1.DeleteNamespaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.NamespaceService.DeleteNamespace is not implemented"))
}
