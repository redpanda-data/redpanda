// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/controlplane/v1beta1/network.proto

package controlplanev1beta1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1beta1 "github.com/redpanda-data/redpanda/src/go/rpk/proto/gen/go/redpanda/api/controlplane/v1beta1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NetworkServiceName is the fully-qualified name of the NetworkService service.
	NetworkServiceName = "redpanda.api.controlplane.v1beta1.NetworkService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NetworkServiceCreateNetworkProcedure is the fully-qualified name of the NetworkService's
	// CreateNetwork RPC.
	NetworkServiceCreateNetworkProcedure = "/redpanda.api.controlplane.v1beta1.NetworkService/CreateNetwork"
	// NetworkServiceGetNetworkProcedure is the fully-qualified name of the NetworkService's GetNetwork
	// RPC.
	NetworkServiceGetNetworkProcedure = "/redpanda.api.controlplane.v1beta1.NetworkService/GetNetwork"
	// NetworkServiceListNetworksProcedure is the fully-qualified name of the NetworkService's
	// ListNetworks RPC.
	NetworkServiceListNetworksProcedure = "/redpanda.api.controlplane.v1beta1.NetworkService/ListNetworks"
	// NetworkServiceDeleteNetworkProcedure is the fully-qualified name of the NetworkService's
	// DeleteNetwork RPC.
	NetworkServiceDeleteNetworkProcedure = "/redpanda.api.controlplane.v1beta1.NetworkService/DeleteNetwork"
	// NetworkServiceDummyCreateMetadataProcedure is the fully-qualified name of the NetworkService's
	// DummyCreateMetadata RPC.
	NetworkServiceDummyCreateMetadataProcedure = "/redpanda.api.controlplane.v1beta1.NetworkService/DummyCreateMetadata"
	// NetworkServiceDummyDeleteMetadataProcedure is the fully-qualified name of the NetworkService's
	// DummyDeleteMetadata RPC.
	NetworkServiceDummyDeleteMetadataProcedure = "/redpanda.api.controlplane.v1beta1.NetworkService/DummyDeleteMetadata"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	networkServiceServiceDescriptor                   = v1beta1.File_redpanda_api_controlplane_v1beta1_network_proto.Services().ByName("NetworkService")
	networkServiceCreateNetworkMethodDescriptor       = networkServiceServiceDescriptor.Methods().ByName("CreateNetwork")
	networkServiceGetNetworkMethodDescriptor          = networkServiceServiceDescriptor.Methods().ByName("GetNetwork")
	networkServiceListNetworksMethodDescriptor        = networkServiceServiceDescriptor.Methods().ByName("ListNetworks")
	networkServiceDeleteNetworkMethodDescriptor       = networkServiceServiceDescriptor.Methods().ByName("DeleteNetwork")
	networkServiceDummyCreateMetadataMethodDescriptor = networkServiceServiceDescriptor.Methods().ByName("DummyCreateMetadata")
	networkServiceDummyDeleteMetadataMethodDescriptor = networkServiceServiceDescriptor.Methods().ByName("DummyDeleteMetadata")
)

// NetworkServiceClient is a client for the redpanda.api.controlplane.v1beta1.NetworkService
// service.
type NetworkServiceClient interface {
	// Ignore these linter rules, because we intentionally return a generic Operation message for all long-running operations.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// CreateNetwork create a Redpanda managed network. The input contains the spec, that describes the network.
	// A Operation is returned. This task allows the caller to find out when the long-running operation of creating a network has finished.
	CreateNetwork(context.Context, *connect.Request[v1beta1.CreateNetworkRequest]) (*connect.Response[v1beta1.Operation], error)
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// GetNetwork retrieves the network's information
	GetNetwork(context.Context, *connect.Request[v1beta1.GetNetworkRequest]) (*connect.Response[v1beta1.Network], error)
	// ListNetworks list networks.
	ListNetworks(context.Context, *connect.Request[v1beta1.ListNetworksRequest]) (*connect.Response[v1beta1.ListNetworksResponse], error)
	// Ignore these linter rules, because we intentionally return a generic Operation message for all long-running operations.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// DeleteNetwork deletes a network. It returns a Operation, that can be used to wait for the deletion to be finished.
	DeleteNetwork(context.Context, *connect.Request[v1beta1.DeleteNetworkRequest]) (*connect.Response[v1beta1.Operation], error)
	// Force openapi generator to generate the CreateClusterResponse, so we can use it in OpenAPI schema.
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	DummyCreateMetadata(context.Context, *connect.Request[v1beta1.CreateNetworkRequest]) (*connect.Response[v1beta1.CreateNetworkMetadata], error)
	// Force openapi generator to generate the DeleteClusterResponse, so we can use it in OpenAPI schema.
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	DummyDeleteMetadata(context.Context, *connect.Request[v1beta1.DeleteNetworkRequest]) (*connect.Response[v1beta1.DeleteNetworkMetadata], error)
}

// NewNetworkServiceClient constructs a client for the
// redpanda.api.controlplane.v1beta1.NetworkService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNetworkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NetworkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &networkServiceClient{
		createNetwork: connect.NewClient[v1beta1.CreateNetworkRequest, v1beta1.Operation](
			httpClient,
			baseURL+NetworkServiceCreateNetworkProcedure,
			connect.WithSchema(networkServiceCreateNetworkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNetwork: connect.NewClient[v1beta1.GetNetworkRequest, v1beta1.Network](
			httpClient,
			baseURL+NetworkServiceGetNetworkProcedure,
			connect.WithSchema(networkServiceGetNetworkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listNetworks: connect.NewClient[v1beta1.ListNetworksRequest, v1beta1.ListNetworksResponse](
			httpClient,
			baseURL+NetworkServiceListNetworksProcedure,
			connect.WithSchema(networkServiceListNetworksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteNetwork: connect.NewClient[v1beta1.DeleteNetworkRequest, v1beta1.Operation](
			httpClient,
			baseURL+NetworkServiceDeleteNetworkProcedure,
			connect.WithSchema(networkServiceDeleteNetworkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		dummyCreateMetadata: connect.NewClient[v1beta1.CreateNetworkRequest, v1beta1.CreateNetworkMetadata](
			httpClient,
			baseURL+NetworkServiceDummyCreateMetadataProcedure,
			connect.WithSchema(networkServiceDummyCreateMetadataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		dummyDeleteMetadata: connect.NewClient[v1beta1.DeleteNetworkRequest, v1beta1.DeleteNetworkMetadata](
			httpClient,
			baseURL+NetworkServiceDummyDeleteMetadataProcedure,
			connect.WithSchema(networkServiceDummyDeleteMetadataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// networkServiceClient implements NetworkServiceClient.
type networkServiceClient struct {
	createNetwork       *connect.Client[v1beta1.CreateNetworkRequest, v1beta1.Operation]
	getNetwork          *connect.Client[v1beta1.GetNetworkRequest, v1beta1.Network]
	listNetworks        *connect.Client[v1beta1.ListNetworksRequest, v1beta1.ListNetworksResponse]
	deleteNetwork       *connect.Client[v1beta1.DeleteNetworkRequest, v1beta1.Operation]
	dummyCreateMetadata *connect.Client[v1beta1.CreateNetworkRequest, v1beta1.CreateNetworkMetadata]
	dummyDeleteMetadata *connect.Client[v1beta1.DeleteNetworkRequest, v1beta1.DeleteNetworkMetadata]
}

// CreateNetwork calls redpanda.api.controlplane.v1beta1.NetworkService.CreateNetwork.
func (c *networkServiceClient) CreateNetwork(ctx context.Context, req *connect.Request[v1beta1.CreateNetworkRequest]) (*connect.Response[v1beta1.Operation], error) {
	return c.createNetwork.CallUnary(ctx, req)
}

// GetNetwork calls redpanda.api.controlplane.v1beta1.NetworkService.GetNetwork.
func (c *networkServiceClient) GetNetwork(ctx context.Context, req *connect.Request[v1beta1.GetNetworkRequest]) (*connect.Response[v1beta1.Network], error) {
	return c.getNetwork.CallUnary(ctx, req)
}

// ListNetworks calls redpanda.api.controlplane.v1beta1.NetworkService.ListNetworks.
func (c *networkServiceClient) ListNetworks(ctx context.Context, req *connect.Request[v1beta1.ListNetworksRequest]) (*connect.Response[v1beta1.ListNetworksResponse], error) {
	return c.listNetworks.CallUnary(ctx, req)
}

// DeleteNetwork calls redpanda.api.controlplane.v1beta1.NetworkService.DeleteNetwork.
func (c *networkServiceClient) DeleteNetwork(ctx context.Context, req *connect.Request[v1beta1.DeleteNetworkRequest]) (*connect.Response[v1beta1.Operation], error) {
	return c.deleteNetwork.CallUnary(ctx, req)
}

// DummyCreateMetadata calls redpanda.api.controlplane.v1beta1.NetworkService.DummyCreateMetadata.
func (c *networkServiceClient) DummyCreateMetadata(ctx context.Context, req *connect.Request[v1beta1.CreateNetworkRequest]) (*connect.Response[v1beta1.CreateNetworkMetadata], error) {
	return c.dummyCreateMetadata.CallUnary(ctx, req)
}

// DummyDeleteMetadata calls redpanda.api.controlplane.v1beta1.NetworkService.DummyDeleteMetadata.
func (c *networkServiceClient) DummyDeleteMetadata(ctx context.Context, req *connect.Request[v1beta1.DeleteNetworkRequest]) (*connect.Response[v1beta1.DeleteNetworkMetadata], error) {
	return c.dummyDeleteMetadata.CallUnary(ctx, req)
}

// NetworkServiceHandler is an implementation of the
// redpanda.api.controlplane.v1beta1.NetworkService service.
type NetworkServiceHandler interface {
	// Ignore these linter rules, because we intentionally return a generic Operation message for all long-running operations.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// CreateNetwork create a Redpanda managed network. The input contains the spec, that describes the network.
	// A Operation is returned. This task allows the caller to find out when the long-running operation of creating a network has finished.
	CreateNetwork(context.Context, *connect.Request[v1beta1.CreateNetworkRequest]) (*connect.Response[v1beta1.Operation], error)
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// GetNetwork retrieves the network's information
	GetNetwork(context.Context, *connect.Request[v1beta1.GetNetworkRequest]) (*connect.Response[v1beta1.Network], error)
	// ListNetworks list networks.
	ListNetworks(context.Context, *connect.Request[v1beta1.ListNetworksRequest]) (*connect.Response[v1beta1.ListNetworksResponse], error)
	// Ignore these linter rules, because we intentionally return a generic Operation message for all long-running operations.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// DeleteNetwork deletes a network. It returns a Operation, that can be used to wait for the deletion to be finished.
	DeleteNetwork(context.Context, *connect.Request[v1beta1.DeleteNetworkRequest]) (*connect.Response[v1beta1.Operation], error)
	// Force openapi generator to generate the CreateClusterResponse, so we can use it in OpenAPI schema.
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	DummyCreateMetadata(context.Context, *connect.Request[v1beta1.CreateNetworkRequest]) (*connect.Response[v1beta1.CreateNetworkMetadata], error)
	// Force openapi generator to generate the DeleteClusterResponse, so we can use it in OpenAPI schema.
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	DummyDeleteMetadata(context.Context, *connect.Request[v1beta1.DeleteNetworkRequest]) (*connect.Response[v1beta1.DeleteNetworkMetadata], error)
}

// NewNetworkServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNetworkServiceHandler(svc NetworkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	networkServiceCreateNetworkHandler := connect.NewUnaryHandler(
		NetworkServiceCreateNetworkProcedure,
		svc.CreateNetwork,
		connect.WithSchema(networkServiceCreateNetworkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceGetNetworkHandler := connect.NewUnaryHandler(
		NetworkServiceGetNetworkProcedure,
		svc.GetNetwork,
		connect.WithSchema(networkServiceGetNetworkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceListNetworksHandler := connect.NewUnaryHandler(
		NetworkServiceListNetworksProcedure,
		svc.ListNetworks,
		connect.WithSchema(networkServiceListNetworksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceDeleteNetworkHandler := connect.NewUnaryHandler(
		NetworkServiceDeleteNetworkProcedure,
		svc.DeleteNetwork,
		connect.WithSchema(networkServiceDeleteNetworkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceDummyCreateMetadataHandler := connect.NewUnaryHandler(
		NetworkServiceDummyCreateMetadataProcedure,
		svc.DummyCreateMetadata,
		connect.WithSchema(networkServiceDummyCreateMetadataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceDummyDeleteMetadataHandler := connect.NewUnaryHandler(
		NetworkServiceDummyDeleteMetadataProcedure,
		svc.DummyDeleteMetadata,
		connect.WithSchema(networkServiceDummyDeleteMetadataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.controlplane.v1beta1.NetworkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NetworkServiceCreateNetworkProcedure:
			networkServiceCreateNetworkHandler.ServeHTTP(w, r)
		case NetworkServiceGetNetworkProcedure:
			networkServiceGetNetworkHandler.ServeHTTP(w, r)
		case NetworkServiceListNetworksProcedure:
			networkServiceListNetworksHandler.ServeHTTP(w, r)
		case NetworkServiceDeleteNetworkProcedure:
			networkServiceDeleteNetworkHandler.ServeHTTP(w, r)
		case NetworkServiceDummyCreateMetadataProcedure:
			networkServiceDummyCreateMetadataHandler.ServeHTTP(w, r)
		case NetworkServiceDummyDeleteMetadataProcedure:
			networkServiceDummyDeleteMetadataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNetworkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNetworkServiceHandler struct{}

func (UnimplementedNetworkServiceHandler) CreateNetwork(context.Context, *connect.Request[v1beta1.CreateNetworkRequest]) (*connect.Response[v1beta1.Operation], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.NetworkService.CreateNetwork is not implemented"))
}

func (UnimplementedNetworkServiceHandler) GetNetwork(context.Context, *connect.Request[v1beta1.GetNetworkRequest]) (*connect.Response[v1beta1.Network], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.NetworkService.GetNetwork is not implemented"))
}

func (UnimplementedNetworkServiceHandler) ListNetworks(context.Context, *connect.Request[v1beta1.ListNetworksRequest]) (*connect.Response[v1beta1.ListNetworksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.NetworkService.ListNetworks is not implemented"))
}

func (UnimplementedNetworkServiceHandler) DeleteNetwork(context.Context, *connect.Request[v1beta1.DeleteNetworkRequest]) (*connect.Response[v1beta1.Operation], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.NetworkService.DeleteNetwork is not implemented"))
}

func (UnimplementedNetworkServiceHandler) DummyCreateMetadata(context.Context, *connect.Request[v1beta1.CreateNetworkRequest]) (*connect.Response[v1beta1.CreateNetworkMetadata], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.NetworkService.DummyCreateMetadata is not implemented"))
}

func (UnimplementedNetworkServiceHandler) DummyDeleteMetadata(context.Context, *connect.Request[v1beta1.DeleteNetworkRequest]) (*connect.Response[v1beta1.DeleteNetworkMetadata], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.controlplane.v1beta1.NetworkService.DummyDeleteMetadata is not implemented"))
}
