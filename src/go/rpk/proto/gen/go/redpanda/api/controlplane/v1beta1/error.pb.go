// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: redpanda/api/controlplane/v1beta1/error.proto

package controlplanev1beta1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Reason int32

const (
	Reason_REASON_UNSPECIFIED Reason = 0
	// Cluster zones must be subset of Network zones.
	Reason_REASON_ZONE_NOT_SUPPORTED_BY_NETWORK Reason = 1
	// No Quota to create resource.
	Reason_REASON_INSUFFICIENT_QUOTA Reason = 2
	// Disabling mTLS is not supported.
	Reason_REASON_DISABLING_MTLS_NOT_SUPPORTED Reason = 3
	// The provided Redpanda Version is not supported.
	Reason_REASON_UNSUPPORTED_VERSION Reason = 4
	// Network name is already in use by another Network within the Organization.
	Reason_REASON_NETWORK_ALREADY_EXISTS Reason = 5
	// Region with given name not found.
	Reason_REASON_REGION_NOT_FOUND Reason = 6
	// No token provided. REASON_NO_TOKEN = 7;
	Reason_REASON_NO_TOKEN Reason = 7
	// Provided token has expired.
	Reason_REASON_TOKEN_EXPIRED Reason = 8
	// Provided token is invalid.
	Reason_REASON_TOKEN_INVALID Reason = 9
	// ClusterType of Cluster and Network do not match.
	Reason_REASON_CLUSTER_TYPE_MISMATCH Reason = 10
	// Only one Cluster per Network is allowed, placing additional clusters is
	// not yet supported. This restriction will be lifted in the future.
	Reason_REASON_ONLY_ONE_CLUSTER_PER_NETWORK_ALLOWED Reason = 11
	// Generic input validation error. Refer to BadRequest errordetail for details.
	Reason_REASON_INVALID_INPUT Reason = 12
	// Network is not in READY state, which is a precondition to create a Cluster.
	Reason_REASON_NETWORK_NOT_READY Reason = 13
	// Cluster and Network region do not match.
	Reason_REASON_CLUSTER_NETWORK_REGION_MISMATCH Reason = 14
	// ThroughputTier does not exist.
	Reason_REASON_THROUGHPUT_TIER_NOT_FOUND Reason = 15
	// Namespace contains resources.
	Reason_REASON_NAMESPACE_NOT_EMPTY Reason = 16
	// Cluster and Network have different cloud providers.
	Reason_REASON_CLUSTER_NETWORK_CLOUD_PROVIDER_MISMATCH Reason = 17
	// Throughput tier not available in requested region and/or requested cluster type.
	Reason_REASON_THROUGHPUT_TIER_NOT_AVAILABLE_IN_REGION Reason = 18
	// Cloud Provider lacks capacity for the requested machine type.
	Reason_REASON_CLOUD_PROVIDER_STOCKOUT Reason = 19
	// Cloud Provider does not support the machine type in the zone.
	Reason_REASON_CLOUD_PROVIDER_MACHINE_TYPE_UNSUPPORTED_IN_ZONE Reason = 20
	// Cloud Provider quota has been exceeded.
	Reason_REASON_CLOUD_PROVIDER_QUOTA_EXCEEDED Reason = 21
	// Network still contains clusters. Only empty networks can be deleted.
	Reason_REASON_NETWORK_CONTAINS_CLUSTERS Reason = 22
	// Rate Limit exceeded. Request rate must be reduced.
	Reason_REASON_RATE_LIMIT_EXCEEDED Reason = 23
	// Provided page token is invalid.
	Reason_REASON_INVALID_PAGE_TOKEN Reason = 24
	// Page token filter does not match.
	Reason_REASON_PAGE_TOKEN_FILTER_MISMATCH Reason = 25
	// Current subscription does not support the requested product.
	Reason_REASON_PRODUCT_NOT_SUPPORTED_BY_SUBSCRIPTION Reason = 26
	// Not available capacity for the requested cloud provider
	Reason_REASON_NOT_AVAILABLE_CAPACITY_FOR_CLOUD_PROVIDER Reason = 27
)

// Enum value maps for Reason.
var (
	Reason_name = map[int32]string{
		0:  "REASON_UNSPECIFIED",
		1:  "REASON_ZONE_NOT_SUPPORTED_BY_NETWORK",
		2:  "REASON_INSUFFICIENT_QUOTA",
		3:  "REASON_DISABLING_MTLS_NOT_SUPPORTED",
		4:  "REASON_UNSUPPORTED_VERSION",
		5:  "REASON_NETWORK_ALREADY_EXISTS",
		6:  "REASON_REGION_NOT_FOUND",
		7:  "REASON_NO_TOKEN",
		8:  "REASON_TOKEN_EXPIRED",
		9:  "REASON_TOKEN_INVALID",
		10: "REASON_CLUSTER_TYPE_MISMATCH",
		11: "REASON_ONLY_ONE_CLUSTER_PER_NETWORK_ALLOWED",
		12: "REASON_INVALID_INPUT",
		13: "REASON_NETWORK_NOT_READY",
		14: "REASON_CLUSTER_NETWORK_REGION_MISMATCH",
		15: "REASON_THROUGHPUT_TIER_NOT_FOUND",
		16: "REASON_NAMESPACE_NOT_EMPTY",
		17: "REASON_CLUSTER_NETWORK_CLOUD_PROVIDER_MISMATCH",
		18: "REASON_THROUGHPUT_TIER_NOT_AVAILABLE_IN_REGION",
		19: "REASON_CLOUD_PROVIDER_STOCKOUT",
		20: "REASON_CLOUD_PROVIDER_MACHINE_TYPE_UNSUPPORTED_IN_ZONE",
		21: "REASON_CLOUD_PROVIDER_QUOTA_EXCEEDED",
		22: "REASON_NETWORK_CONTAINS_CLUSTERS",
		23: "REASON_RATE_LIMIT_EXCEEDED",
		24: "REASON_INVALID_PAGE_TOKEN",
		25: "REASON_PAGE_TOKEN_FILTER_MISMATCH",
		26: "REASON_PRODUCT_NOT_SUPPORTED_BY_SUBSCRIPTION",
		27: "REASON_NOT_AVAILABLE_CAPACITY_FOR_CLOUD_PROVIDER",
	}
	Reason_value = map[string]int32{
		"REASON_UNSPECIFIED":                                     0,
		"REASON_ZONE_NOT_SUPPORTED_BY_NETWORK":                   1,
		"REASON_INSUFFICIENT_QUOTA":                              2,
		"REASON_DISABLING_MTLS_NOT_SUPPORTED":                    3,
		"REASON_UNSUPPORTED_VERSION":                             4,
		"REASON_NETWORK_ALREADY_EXISTS":                          5,
		"REASON_REGION_NOT_FOUND":                                6,
		"REASON_NO_TOKEN":                                        7,
		"REASON_TOKEN_EXPIRED":                                   8,
		"REASON_TOKEN_INVALID":                                   9,
		"REASON_CLUSTER_TYPE_MISMATCH":                           10,
		"REASON_ONLY_ONE_CLUSTER_PER_NETWORK_ALLOWED":            11,
		"REASON_INVALID_INPUT":                                   12,
		"REASON_NETWORK_NOT_READY":                               13,
		"REASON_CLUSTER_NETWORK_REGION_MISMATCH":                 14,
		"REASON_THROUGHPUT_TIER_NOT_FOUND":                       15,
		"REASON_NAMESPACE_NOT_EMPTY":                             16,
		"REASON_CLUSTER_NETWORK_CLOUD_PROVIDER_MISMATCH":         17,
		"REASON_THROUGHPUT_TIER_NOT_AVAILABLE_IN_REGION":         18,
		"REASON_CLOUD_PROVIDER_STOCKOUT":                         19,
		"REASON_CLOUD_PROVIDER_MACHINE_TYPE_UNSUPPORTED_IN_ZONE": 20,
		"REASON_CLOUD_PROVIDER_QUOTA_EXCEEDED":                   21,
		"REASON_NETWORK_CONTAINS_CLUSTERS":                       22,
		"REASON_RATE_LIMIT_EXCEEDED":                             23,
		"REASON_INVALID_PAGE_TOKEN":                              24,
		"REASON_PAGE_TOKEN_FILTER_MISMATCH":                      25,
		"REASON_PRODUCT_NOT_SUPPORTED_BY_SUBSCRIPTION":           26,
		"REASON_NOT_AVAILABLE_CAPACITY_FOR_CLOUD_PROVIDER":       27,
	}
)

func (x Reason) Enum() *Reason {
	p := new(Reason)
	*p = x
	return p
}

func (x Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_controlplane_v1beta1_error_proto_enumTypes[0].Descriptor()
}

func (Reason) Type() protoreflect.EnumType {
	return &file_redpanda_api_controlplane_v1beta1_error_proto_enumTypes[0]
}

func (x Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Reason.Descriptor instead.
func (Reason) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_controlplane_v1beta1_error_proto_rawDescGZIP(), []int{0}
}

var File_redpanda_api_controlplane_v1beta1_error_proto protoreflect.FileDescriptor

var file_redpanda_api_controlplane_v1beta1_error_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x21, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2a, 0x9e, 0x08, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46,
	0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x10, 0x02, 0x12, 0x27,
	0x0a, 0x23, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x49,
	0x4e, 0x47, 0x5f, 0x4d, 0x54, 0x4c, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x09,
	0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x0a, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x45,
	0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x44, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x0c, 0x12, 0x1c, 0x0a,
	0x18, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x0d, 0x12, 0x2a, 0x0a, 0x26, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0e, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x49, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0f, 0x12, 0x1e, 0x0a,
	0x1a, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x10, 0x12, 0x32, 0x0a,
	0x2e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x11, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x48, 0x52, 0x4f,
	0x55, 0x47, 0x48, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x4f, 0x4e, 0x10, 0x12, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x4f, 0x43, 0x4b, 0x4f, 0x55, 0x54, 0x10, 0x13, 0x12, 0x3a, 0x0a, 0x36, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x5a,
	0x4f, 0x4e, 0x45, 0x10, 0x14, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x51,
	0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x15, 0x12,
	0x24, 0x0a, 0x20, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54,
	0x45, 0x52, 0x53, 0x10, 0x16, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x10, 0x17, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x10, 0x18, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x19, 0x12, 0x30, 0x0a, 0x2c, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1a, 0x12, 0x34, 0x0a,
	0x30, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x10, 0x1b, 0x42, 0xcb, 0x02, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0a, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x73,
	0x72, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x70, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x52,
	0x41, 0x43, 0xaa, 0x02, 0x21, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x41, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x56,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x21, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x2d, 0x52, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x24, 0x52, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_controlplane_v1beta1_error_proto_rawDescOnce sync.Once
	file_redpanda_api_controlplane_v1beta1_error_proto_rawDescData = file_redpanda_api_controlplane_v1beta1_error_proto_rawDesc
)

func file_redpanda_api_controlplane_v1beta1_error_proto_rawDescGZIP() []byte {
	file_redpanda_api_controlplane_v1beta1_error_proto_rawDescOnce.Do(func() {
		file_redpanda_api_controlplane_v1beta1_error_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_controlplane_v1beta1_error_proto_rawDescData)
	})
	return file_redpanda_api_controlplane_v1beta1_error_proto_rawDescData
}

var file_redpanda_api_controlplane_v1beta1_error_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_redpanda_api_controlplane_v1beta1_error_proto_goTypes = []interface{}{
	(Reason)(0), // 0: redpanda.api.controlplane.v1beta1.Reason
}
var file_redpanda_api_controlplane_v1beta1_error_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_redpanda_api_controlplane_v1beta1_error_proto_init() }
func file_redpanda_api_controlplane_v1beta1_error_proto_init() {
	if File_redpanda_api_controlplane_v1beta1_error_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_controlplane_v1beta1_error_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_redpanda_api_controlplane_v1beta1_error_proto_goTypes,
		DependencyIndexes: file_redpanda_api_controlplane_v1beta1_error_proto_depIdxs,
		EnumInfos:         file_redpanda_api_controlplane_v1beta1_error_proto_enumTypes,
	}.Build()
	File_redpanda_api_controlplane_v1beta1_error_proto = out.File
	file_redpanda_api_controlplane_v1beta1_error_proto_rawDesc = nil
	file_redpanda_api_controlplane_v1beta1_error_proto_goTypes = nil
	file_redpanda_api_controlplane_v1beta1_error_proto_depIdxs = nil
}
