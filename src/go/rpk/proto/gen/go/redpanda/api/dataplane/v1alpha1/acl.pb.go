// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: redpanda/api/dataplane/v1alpha1/acl.proto

package dataplanev1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ACL_ResourceType int32

const (
	ACL_RESOURCE_TYPE_UNSPECIFIED      ACL_ResourceType = 0
	ACL_RESOURCE_TYPE_ANY              ACL_ResourceType = 1
	ACL_RESOURCE_TYPE_TOPIC            ACL_ResourceType = 2
	ACL_RESOURCE_TYPE_GROUP            ACL_ResourceType = 3
	ACL_RESOURCE_TYPE_CLUSTER          ACL_ResourceType = 4
	ACL_RESOURCE_TYPE_TRANSACTIONAL_ID ACL_ResourceType = 5
	ACL_RESOURCE_TYPE_DELEGATION_TOKEN ACL_ResourceType = 6
	ACL_RESOURCE_TYPE_USER             ACL_ResourceType = 7
)

// Enum value maps for ACL_ResourceType.
var (
	ACL_ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_UNSPECIFIED",
		1: "RESOURCE_TYPE_ANY",
		2: "RESOURCE_TYPE_TOPIC",
		3: "RESOURCE_TYPE_GROUP",
		4: "RESOURCE_TYPE_CLUSTER",
		5: "RESOURCE_TYPE_TRANSACTIONAL_ID",
		6: "RESOURCE_TYPE_DELEGATION_TOKEN",
		7: "RESOURCE_TYPE_USER",
	}
	ACL_ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED":      0,
		"RESOURCE_TYPE_ANY":              1,
		"RESOURCE_TYPE_TOPIC":            2,
		"RESOURCE_TYPE_GROUP":            3,
		"RESOURCE_TYPE_CLUSTER":          4,
		"RESOURCE_TYPE_TRANSACTIONAL_ID": 5,
		"RESOURCE_TYPE_DELEGATION_TOKEN": 6,
		"RESOURCE_TYPE_USER":             7,
	}
)

func (x ACL_ResourceType) Enum() *ACL_ResourceType {
	p := new(ACL_ResourceType)
	*p = x
	return p
}

func (x ACL_ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACL_ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_enumTypes[0].Descriptor()
}

func (ACL_ResourceType) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1alpha1_acl_proto_enumTypes[0]
}

func (x ACL_ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACL_ResourceType.Descriptor instead.
func (ACL_ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescGZIP(), []int{0, 0}
}

type ACL_ResourcePatternType int32

const (
	ACL_RESOURCE_PATTERN_TYPE_UNSPECIFIED ACL_ResourcePatternType = 0
	ACL_RESOURCE_PATTERN_TYPE_ANY         ACL_ResourcePatternType = 1
	ACL_RESOURCE_PATTERN_TYPE_MATCH       ACL_ResourcePatternType = 2
	ACL_RESOURCE_PATTERN_TYPE_LITERAL     ACL_ResourcePatternType = 3
	ACL_RESOURCE_PATTERN_TYPE_PREFIXED    ACL_ResourcePatternType = 4
)

// Enum value maps for ACL_ResourcePatternType.
var (
	ACL_ResourcePatternType_name = map[int32]string{
		0: "RESOURCE_PATTERN_TYPE_UNSPECIFIED",
		1: "RESOURCE_PATTERN_TYPE_ANY",
		2: "RESOURCE_PATTERN_TYPE_MATCH",
		3: "RESOURCE_PATTERN_TYPE_LITERAL",
		4: "RESOURCE_PATTERN_TYPE_PREFIXED",
	}
	ACL_ResourcePatternType_value = map[string]int32{
		"RESOURCE_PATTERN_TYPE_UNSPECIFIED": 0,
		"RESOURCE_PATTERN_TYPE_ANY":         1,
		"RESOURCE_PATTERN_TYPE_MATCH":       2,
		"RESOURCE_PATTERN_TYPE_LITERAL":     3,
		"RESOURCE_PATTERN_TYPE_PREFIXED":    4,
	}
)

func (x ACL_ResourcePatternType) Enum() *ACL_ResourcePatternType {
	p := new(ACL_ResourcePatternType)
	*p = x
	return p
}

func (x ACL_ResourcePatternType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACL_ResourcePatternType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_enumTypes[1].Descriptor()
}

func (ACL_ResourcePatternType) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1alpha1_acl_proto_enumTypes[1]
}

func (x ACL_ResourcePatternType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACL_ResourcePatternType.Descriptor instead.
func (ACL_ResourcePatternType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescGZIP(), []int{0, 1}
}

type ACL_Operation int32

const (
	ACL_OPERATION_UNSPECIFIED      ACL_Operation = 0
	ACL_OPERATION_ANY              ACL_Operation = 1
	ACL_OPERATION_ALL              ACL_Operation = 2
	ACL_OPERATION_READ             ACL_Operation = 3
	ACL_OPERATION_WRITE            ACL_Operation = 4
	ACL_OPERATION_CREATE           ACL_Operation = 5
	ACL_OPERATION_DELETE           ACL_Operation = 6
	ACL_OPERATION_ALTER            ACL_Operation = 7
	ACL_OPERATION_DESCRIBE         ACL_Operation = 8
	ACL_OPERATION_CLUSTER_ACTION   ACL_Operation = 9
	ACL_OPERATION_DESCRIBE_CONFIGS ACL_Operation = 10
	ACL_OPERATION_ALTER_CONFIGS    ACL_Operation = 11
	ACL_OPERATION_IDEMPOTENT_WRITE ACL_Operation = 12
	ACL_OPERATION_CREATE_TOKENS    ACL_Operation = 13
	ACL_OPERATION_DESCRIBE_TOKENS  ACL_Operation = 14
)

// Enum value maps for ACL_Operation.
var (
	ACL_Operation_name = map[int32]string{
		0:  "OPERATION_UNSPECIFIED",
		1:  "OPERATION_ANY",
		2:  "OPERATION_ALL",
		3:  "OPERATION_READ",
		4:  "OPERATION_WRITE",
		5:  "OPERATION_CREATE",
		6:  "OPERATION_DELETE",
		7:  "OPERATION_ALTER",
		8:  "OPERATION_DESCRIBE",
		9:  "OPERATION_CLUSTER_ACTION",
		10: "OPERATION_DESCRIBE_CONFIGS",
		11: "OPERATION_ALTER_CONFIGS",
		12: "OPERATION_IDEMPOTENT_WRITE",
		13: "OPERATION_CREATE_TOKENS",
		14: "OPERATION_DESCRIBE_TOKENS",
	}
	ACL_Operation_value = map[string]int32{
		"OPERATION_UNSPECIFIED":      0,
		"OPERATION_ANY":              1,
		"OPERATION_ALL":              2,
		"OPERATION_READ":             3,
		"OPERATION_WRITE":            4,
		"OPERATION_CREATE":           5,
		"OPERATION_DELETE":           6,
		"OPERATION_ALTER":            7,
		"OPERATION_DESCRIBE":         8,
		"OPERATION_CLUSTER_ACTION":   9,
		"OPERATION_DESCRIBE_CONFIGS": 10,
		"OPERATION_ALTER_CONFIGS":    11,
		"OPERATION_IDEMPOTENT_WRITE": 12,
		"OPERATION_CREATE_TOKENS":    13,
		"OPERATION_DESCRIBE_TOKENS":  14,
	}
)

func (x ACL_Operation) Enum() *ACL_Operation {
	p := new(ACL_Operation)
	*p = x
	return p
}

func (x ACL_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACL_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_enumTypes[2].Descriptor()
}

func (ACL_Operation) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1alpha1_acl_proto_enumTypes[2]
}

func (x ACL_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACL_Operation.Descriptor instead.
func (ACL_Operation) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescGZIP(), []int{0, 2}
}

type ACL_PermissionType int32

const (
	ACL_PERMISSION_TYPE_UNSPECIFIED ACL_PermissionType = 0
	ACL_PERMISSION_TYPE_ANY         ACL_PermissionType = 1
	ACL_PERMISSION_TYPE_DENY        ACL_PermissionType = 2
	ACL_PERMISSION_TYPE_ALLOW       ACL_PermissionType = 3
)

// Enum value maps for ACL_PermissionType.
var (
	ACL_PermissionType_name = map[int32]string{
		0: "PERMISSION_TYPE_UNSPECIFIED",
		1: "PERMISSION_TYPE_ANY",
		2: "PERMISSION_TYPE_DENY",
		3: "PERMISSION_TYPE_ALLOW",
	}
	ACL_PermissionType_value = map[string]int32{
		"PERMISSION_TYPE_UNSPECIFIED": 0,
		"PERMISSION_TYPE_ANY":         1,
		"PERMISSION_TYPE_DENY":        2,
		"PERMISSION_TYPE_ALLOW":       3,
	}
)

func (x ACL_PermissionType) Enum() *ACL_PermissionType {
	p := new(ACL_PermissionType)
	*p = x
	return p
}

func (x ACL_PermissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACL_PermissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_enumTypes[3].Descriptor()
}

func (ACL_PermissionType) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1alpha1_acl_proto_enumTypes[3]
}

func (x ACL_PermissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACL_PermissionType.Descriptor instead.
func (ACL_PermissionType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescGZIP(), []int{0, 3}
}

type ACL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ACL) Reset() {
	*x = ACL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL) ProtoMessage() {}

func (x *ACL) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL.ProtoReflect.Descriptor instead.
func (*ACL) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescGZIP(), []int{0}
}

type ListACLsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter   *ListACLsRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	PageSize int32                   `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Value of the next_page_token field returned by the previous response.
	// If not provided, the system assumes the first page is requested.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListACLsRequest) Reset() {
	*x = ListACLsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListACLsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListACLsRequest) ProtoMessage() {}

func (x *ListACLsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListACLsRequest.ProtoReflect.Descriptor instead.
func (*ListACLsRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescGZIP(), []int{1}
}

func (x *ListACLsRequest) GetFilter() *ListACLsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListACLsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListACLsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListACLsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources []*ListACLsResponse_Resource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *ListACLsResponse) Reset() {
	*x = ListACLsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListACLsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListACLsResponse) ProtoMessage() {}

func (x *ListACLsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListACLsResponse.ProtoReflect.Descriptor instead.
func (*ListACLsResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescGZIP(), []int{2}
}

func (x *ListACLsResponse) GetResources() []*ListACLsResponse_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type CreateACLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ResourceType determines the type of the resource (Topic, ConsumerGroup etc) this
	// ACL shall target.
	ResourceType ACL_ResourceType `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_ResourceType" json:"resource_type,omitempty"`
	// ResourceName is the name of the resource this acl entry will be on.
	// For requests with resource_type CLUSTER, this will default to the expected
	// value "kafka-cluster".
	ResourceName string `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// ResourcePattern type determines the strategy how the provided resource_name
	// is matched (exact match, prefixed, ...) against the actual resource names.
	ResourcePatternType ACL_ResourcePatternType `protobuf:"varint,3,opt,name=resource_pattern_type,json=resourcePatternType,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_ResourcePatternType" json:"resource_pattern_type,omitempty"`
	// Principal is the user to apply this acl for. With the Kafka simple
	// authorizer, this must begin with "User:".
	Principal string `protobuf:"bytes,4,opt,name=principal,proto3" json:"principal,omitempty"`
	// Host is the host address to use for this acl. Each host to allow
	// the principal access from must be specified as a new creation.
	Host string `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	// Operation is the operation that shall be allowed (e.g. READ).
	Operation ACL_Operation `protobuf:"varint,6,opt,name=operation,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_Operation" json:"operation,omitempty"`
	// PermissionType determines whether the operation should be allowed or denied.
	PermissionType ACL_PermissionType `protobuf:"varint,7,opt,name=permission_type,json=permissionType,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_PermissionType" json:"permission_type,omitempty"`
}

func (x *CreateACLRequest) Reset() {
	*x = CreateACLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateACLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateACLRequest) ProtoMessage() {}

func (x *CreateACLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateACLRequest.ProtoReflect.Descriptor instead.
func (*CreateACLRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescGZIP(), []int{3}
}

func (x *CreateACLRequest) GetResourceType() ACL_ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ACL_RESOURCE_TYPE_UNSPECIFIED
}

func (x *CreateACLRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *CreateACLRequest) GetResourcePatternType() ACL_ResourcePatternType {
	if x != nil {
		return x.ResourcePatternType
	}
	return ACL_RESOURCE_PATTERN_TYPE_UNSPECIFIED
}

func (x *CreateACLRequest) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *CreateACLRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CreateACLRequest) GetOperation() ACL_Operation {
	if x != nil {
		return x.Operation
	}
	return ACL_OPERATION_UNSPECIFIED
}

func (x *CreateACLRequest) GetPermissionType() ACL_PermissionType {
	if x != nil {
		return x.PermissionType
	}
	return ACL_PERMISSION_TYPE_UNSPECIFIED
}

type CreateACLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateACLResponse) Reset() {
	*x = CreateACLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateACLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateACLResponse) ProtoMessage() {}

func (x *CreateACLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateACLResponse.ProtoReflect.Descriptor instead.
func (*CreateACLResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescGZIP(), []int{4}
}

type DeleteACLsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *DeleteACLsRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *DeleteACLsRequest) Reset() {
	*x = DeleteACLsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteACLsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteACLsRequest) ProtoMessage() {}

func (x *DeleteACLsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteACLsRequest.ProtoReflect.Descriptor instead.
func (*DeleteACLsRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteACLsRequest) GetFilter() *DeleteACLsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type DeleteACLsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchingAcls []*DeleteACLsResponse_MatchingACL `protobuf:"bytes,1,rep,name=matching_acls,json=matchingAcls,proto3" json:"matching_acls,omitempty"`
}

func (x *DeleteACLsResponse) Reset() {
	*x = DeleteACLsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteACLsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteACLsResponse) ProtoMessage() {}

func (x *DeleteACLsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteACLsResponse.ProtoReflect.Descriptor instead.
func (*DeleteACLsResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteACLsResponse) GetMatchingAcls() []*DeleteACLsResponse_MatchingACL {
	if x != nil {
		return x.MatchingAcls
	}
	return nil
}

type ListACLsRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType        ACL_ResourceType        `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_ResourceType" json:"resource_type,omitempty"`
	ResourceName        *string                 `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3,oneof" json:"resource_name,omitempty"`
	ResourcePatternType ACL_ResourcePatternType `protobuf:"varint,3,opt,name=resource_pattern_type,json=resourcePatternType,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_ResourcePatternType" json:"resource_pattern_type,omitempty"`
	Principal           *string                 `protobuf:"bytes,4,opt,name=principal,proto3,oneof" json:"principal,omitempty"`
	Host                *string                 `protobuf:"bytes,5,opt,name=host,proto3,oneof" json:"host,omitempty"`
	Operation           ACL_Operation           `protobuf:"varint,6,opt,name=operation,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_Operation" json:"operation,omitempty"`
	PermissionType      ACL_PermissionType      `protobuf:"varint,7,opt,name=permission_type,json=permissionType,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_PermissionType" json:"permission_type,omitempty"`
}

func (x *ListACLsRequest_Filter) Reset() {
	*x = ListACLsRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListACLsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListACLsRequest_Filter) ProtoMessage() {}

func (x *ListACLsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListACLsRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListACLsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListACLsRequest_Filter) GetResourceType() ACL_ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ACL_RESOURCE_TYPE_UNSPECIFIED
}

func (x *ListACLsRequest_Filter) GetResourceName() string {
	if x != nil && x.ResourceName != nil {
		return *x.ResourceName
	}
	return ""
}

func (x *ListACLsRequest_Filter) GetResourcePatternType() ACL_ResourcePatternType {
	if x != nil {
		return x.ResourcePatternType
	}
	return ACL_RESOURCE_PATTERN_TYPE_UNSPECIFIED
}

func (x *ListACLsRequest_Filter) GetPrincipal() string {
	if x != nil && x.Principal != nil {
		return *x.Principal
	}
	return ""
}

func (x *ListACLsRequest_Filter) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *ListACLsRequest_Filter) GetOperation() ACL_Operation {
	if x != nil {
		return x.Operation
	}
	return ACL_OPERATION_UNSPECIFIED
}

func (x *ListACLsRequest_Filter) GetPermissionType() ACL_PermissionType {
	if x != nil {
		return x.PermissionType
	}
	return ACL_PERMISSION_TYPE_UNSPECIFIED
}

type ListACLsResponse_Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Principal      string             `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	Host           string             `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Operation      ACL_Operation      `protobuf:"varint,3,opt,name=operation,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_Operation" json:"operation,omitempty"`
	PermissionType ACL_PermissionType `protobuf:"varint,4,opt,name=permission_type,json=permissionType,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_PermissionType" json:"permission_type,omitempty"`
}

func (x *ListACLsResponse_Policy) Reset() {
	*x = ListACLsResponse_Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListACLsResponse_Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListACLsResponse_Policy) ProtoMessage() {}

func (x *ListACLsResponse_Policy) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListACLsResponse_Policy.ProtoReflect.Descriptor instead.
func (*ListACLsResponse_Policy) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ListACLsResponse_Policy) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *ListACLsResponse_Policy) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ListACLsResponse_Policy) GetOperation() ACL_Operation {
	if x != nil {
		return x.Operation
	}
	return ACL_OPERATION_UNSPECIFIED
}

func (x *ListACLsResponse_Policy) GetPermissionType() ACL_PermissionType {
	if x != nil {
		return x.PermissionType
	}
	return ACL_PERMISSION_TYPE_UNSPECIFIED
}

type ListACLsResponse_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType        ACL_ResourceType           `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_ResourceType" json:"resource_type,omitempty"`
	ResourceName        string                     `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	ResourcePatternType ACL_ResourcePatternType    `protobuf:"varint,3,opt,name=resource_pattern_type,json=resourcePatternType,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_ResourcePatternType" json:"resource_pattern_type,omitempty"`
	Acls                []*ListACLsResponse_Policy `protobuf:"bytes,4,rep,name=acls,proto3" json:"acls,omitempty"`
}

func (x *ListACLsResponse_Resource) Reset() {
	*x = ListACLsResponse_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListACLsResponse_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListACLsResponse_Resource) ProtoMessage() {}

func (x *ListACLsResponse_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListACLsResponse_Resource.ProtoReflect.Descriptor instead.
func (*ListACLsResponse_Resource) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescGZIP(), []int{2, 1}
}

func (x *ListACLsResponse_Resource) GetResourceType() ACL_ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ACL_RESOURCE_TYPE_UNSPECIFIED
}

func (x *ListACLsResponse_Resource) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ListACLsResponse_Resource) GetResourcePatternType() ACL_ResourcePatternType {
	if x != nil {
		return x.ResourcePatternType
	}
	return ACL_RESOURCE_PATTERN_TYPE_UNSPECIFIED
}

func (x *ListACLsResponse_Resource) GetAcls() []*ListACLsResponse_Policy {
	if x != nil {
		return x.Acls
	}
	return nil
}

type DeleteACLsRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType        ACL_ResourceType        `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_ResourceType" json:"resource_type,omitempty"`
	ResourceName        *string                 `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3,oneof" json:"resource_name,omitempty"`
	ResourcePatternType ACL_ResourcePatternType `protobuf:"varint,3,opt,name=resource_pattern_type,json=resourcePatternType,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_ResourcePatternType" json:"resource_pattern_type,omitempty"`
	Principal           *string                 `protobuf:"bytes,4,opt,name=principal,proto3,oneof" json:"principal,omitempty"`
	Host                *string                 `protobuf:"bytes,5,opt,name=host,proto3,oneof" json:"host,omitempty"`
	Operation           ACL_Operation           `protobuf:"varint,6,opt,name=operation,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_Operation" json:"operation,omitempty"`
	PermissionType      ACL_PermissionType      `protobuf:"varint,7,opt,name=permission_type,json=permissionType,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_PermissionType" json:"permission_type,omitempty"`
}

func (x *DeleteACLsRequest_Filter) Reset() {
	*x = DeleteACLsRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteACLsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteACLsRequest_Filter) ProtoMessage() {}

func (x *DeleteACLsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteACLsRequest_Filter.ProtoReflect.Descriptor instead.
func (*DeleteACLsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescGZIP(), []int{5, 0}
}

func (x *DeleteACLsRequest_Filter) GetResourceType() ACL_ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ACL_RESOURCE_TYPE_UNSPECIFIED
}

func (x *DeleteACLsRequest_Filter) GetResourceName() string {
	if x != nil && x.ResourceName != nil {
		return *x.ResourceName
	}
	return ""
}

func (x *DeleteACLsRequest_Filter) GetResourcePatternType() ACL_ResourcePatternType {
	if x != nil {
		return x.ResourcePatternType
	}
	return ACL_RESOURCE_PATTERN_TYPE_UNSPECIFIED
}

func (x *DeleteACLsRequest_Filter) GetPrincipal() string {
	if x != nil && x.Principal != nil {
		return *x.Principal
	}
	return ""
}

func (x *DeleteACLsRequest_Filter) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *DeleteACLsRequest_Filter) GetOperation() ACL_Operation {
	if x != nil {
		return x.Operation
	}
	return ACL_OPERATION_UNSPECIFIED
}

func (x *DeleteACLsRequest_Filter) GetPermissionType() ACL_PermissionType {
	if x != nil {
		return x.PermissionType
	}
	return ACL_PERMISSION_TYPE_UNSPECIFIED
}

type DeleteACLsResponse_MatchingACL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType        ACL_ResourceType        `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_ResourceType" json:"resource_type,omitempty"`
	ResourceName        string                  `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	ResourcePatternType ACL_ResourcePatternType `protobuf:"varint,3,opt,name=resource_pattern_type,json=resourcePatternType,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_ResourcePatternType" json:"resource_pattern_type,omitempty"`
	Principal           string                  `protobuf:"bytes,4,opt,name=principal,proto3" json:"principal,omitempty"`
	Host                string                  `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	Operation           ACL_Operation           `protobuf:"varint,6,opt,name=operation,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_Operation" json:"operation,omitempty"`
	PermissionType      ACL_PermissionType      `protobuf:"varint,7,opt,name=permission_type,json=permissionType,proto3,enum=redpanda.api.dataplane.v1alpha1.ACL_PermissionType" json:"permission_type,omitempty"`
	Error               *status.Status          `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeleteACLsResponse_MatchingACL) Reset() {
	*x = DeleteACLsResponse_MatchingACL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteACLsResponse_MatchingACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteACLsResponse_MatchingACL) ProtoMessage() {}

func (x *DeleteACLsResponse_MatchingACL) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteACLsResponse_MatchingACL.ProtoReflect.Descriptor instead.
func (*DeleteACLsResponse_MatchingACL) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescGZIP(), []int{6, 0}
}

func (x *DeleteACLsResponse_MatchingACL) GetResourceType() ACL_ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ACL_RESOURCE_TYPE_UNSPECIFIED
}

func (x *DeleteACLsResponse_MatchingACL) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *DeleteACLsResponse_MatchingACL) GetResourcePatternType() ACL_ResourcePatternType {
	if x != nil {
		return x.ResourcePatternType
	}
	return ACL_RESOURCE_PATTERN_TYPE_UNSPECIFIED
}

func (x *DeleteACLsResponse_MatchingACL) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *DeleteACLsResponse_MatchingACL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DeleteACLsResponse_MatchingACL) GetOperation() ACL_Operation {
	if x != nil {
		return x.Operation
	}
	return ACL_OPERATION_UNSPECIFIED
}

func (x *DeleteACLsResponse_MatchingACL) GetPermissionType() ACL_PermissionType {
	if x != nil {
		return x.PermissionType
	}
	return ACL_PERMISSION_TYPE_UNSPECIFIED
}

func (x *DeleteACLsResponse_MatchingACL) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_redpanda_api_dataplane_v1alpha1_acl_proto protoreflect.FileDescriptor

var file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDesc = []byte{
	0x0a, 0x29, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x61, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1b, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc8, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x4c, 0x22, 0xf1, 0x01, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x44, 0x10,
	0x05, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x07, 0x22, 0xc3, 0x01,
	0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x03, 0x12,
	0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x54,
	0x45, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x45,
	0x44, 0x10, 0x04, 0x22, 0x85, 0x03, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49,
	0x42, 0x45, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53,
	0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x10, 0x0b, 0x12,
	0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x45,
	0x4d, 0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x0c, 0x12,
	0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x53, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49,
	0x42, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x53, 0x10, 0x0e, 0x22, 0x7f, 0x0a, 0x0e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x22, 0x9d, 0x06, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4f, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x66, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x49, 0x92, 0x41, 0x46, 0x32, 0x32, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x59, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xb1, 0x04, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x43, 0x4c,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x76, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x0f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x9b, 0x05, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0xe6, 0x01, 0x0a, 0x06,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x43,
	0x4c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0xc3, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x56, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6c,
	0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x43, 0x4c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x04,
	0x61, 0x63, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x22, 0xd4, 0x08, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x6a, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0xe0, 0x41, 0x02, 0xba, 0x48,
	0x0c, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x06, 0x10, 0x01, 0x22, 0x02, 0x00, 0x01, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x80, 0x01, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0xe0, 0x41, 0x02, 0xba,
	0x48, 0x0c, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x06, 0x10, 0x01, 0x1a, 0x02, 0x03, 0x04, 0x52, 0x13,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x0c, 0xc8, 0x01,
	0x01, 0x72, 0x07, 0x3a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x3a, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x9a, 0x01, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x85, 0x01, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x7f, 0xba, 0x01, 0x79,
	0x0a, 0x16, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x20,
	0x68, 0x6f, 0x73, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x65, 0x69, 0x74,
	0x68, 0x65, 0x72, 0x20, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x20, 0x28, 0x2a, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x49, 0x50, 0x20, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x1a, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3d, 0x3d,
	0x20, 0x27, 0x2a, 0x27, 0x20, 0x3f, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x3a, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x69, 0x73, 0x49, 0x70, 0x28, 0x29, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x60, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x0c, 0xc8, 0x01, 0x01,
	0x82, 0x01, 0x06, 0x10, 0x01, 0x22, 0x02, 0x00, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x43, 0x4c, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x12, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x0c, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x06,
	0x10, 0x01, 0x1a, 0x02, 0x02, 0x03, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x88, 0x03, 0xba, 0x48, 0x84, 0x03, 0x1a, 0x81, 0x03,
	0x0a, 0x3a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xc2, 0x02, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x20, 0x3d, 0x3d, 0x20, 0x34, 0x20, 0x26, 0x26, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x20, 0x3f, 0x20, 0x27, 0x27, 0x3a, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x20, 0x3d, 0x3d, 0x20, 0x34, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x27,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x27, 0x20, 0x3f,
	0x20, 0x27, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65,
	0x74, 0x20, 0x74, 0x6f, 0x20, 0x22, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2d, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x22, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x27, 0x3a,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x34, 0x20, 0x26, 0x26, 0x20, 0x73, 0x69, 0x7a, 0x65,
	0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x20, 0x3f, 0x20, 0x27, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x74, 0x27, 0x3a, 0x20, 0x27,
	0x27, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x05, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0xd5, 0x04, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x43, 0x4c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x11, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x0b, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x05, 0x10, 0x01, 0x22,
	0x01, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x7f, 0x0a, 0x15, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x43, 0x4c, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x11, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x0b, 0xc8, 0x01, 0x01, 0x82, 0x01,
	0x05, 0x10, 0x01, 0x22, 0x01, 0x00, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x43, 0x4c,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0xe0, 0x41, 0x02, 0xba,
	0x48, 0x0b, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x05, 0x10, 0x01, 0x22, 0x01, 0x00, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x11, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x0b, 0xc8, 0x01,
	0x01, 0x82, 0x01, 0x05, 0x10, 0x01, 0x22, 0x01, 0x00, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x22, 0xfd, 0x04, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0d, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x43,
	0x4c, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x6c, 0x73, 0x1a,
	0x80, 0x04, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x43, 0x4c, 0x12,
	0x56, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x15,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x43,
	0x4c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x32, 0xf8, 0x05, 0x0a, 0x0a, 0x41, 0x43, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xe4, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x73, 0x12, 0x30,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x73, 0x92, 0x41, 0x5a, 0x12, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x41,
	0x43, 0x4c, 0x73, 0x1a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x41, 0x43, 0x4c, 0x73, 0x4a, 0x42,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3b, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x35, 0x0a, 0x33, 0x1a,
	0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x61, 0x63, 0x6c, 0x73, 0x12, 0xed, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x12, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x92,
	0x41, 0x5d, 0x12, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x41, 0x43, 0x4c, 0x1a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x41, 0x43, 0x4c, 0x4a, 0x43, 0x0a, 0x03, 0x32, 0x30,
	0x31, 0x12, 0x3c, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x36, 0x0a, 0x34, 0x1a, 0x32, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x61, 0x63, 0x6c, 0x73, 0x12, 0x92, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x73, 0x12, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x9a, 0x01, 0x92, 0x41, 0x80, 0x01, 0x12, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20,
	0x41, 0x43, 0x4c, 0x73, 0x1a, 0x2b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x41, 0x43, 0x4c, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4a, 0x44, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3d, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x37,
	0x0a, 0x35, 0x1a, 0x33, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x2a, 0x0e, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x63, 0x6c, 0x73, 0x42, 0xbb, 0x02,
	0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x08, 0x41, 0x63, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x6b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x70, 0x6b, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02,
	0x03, 0x52, 0x41, 0x44, 0xaa, 0x02, 0x1f, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x41, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1f, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x2b, 0x52, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x22, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescOnce sync.Once
	file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescData = file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDesc
)

func file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescGZIP() []byte {
	file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescOnce.Do(func() {
		file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescData)
	})
	return file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDescData
}

var file_redpanda_api_dataplane_v1alpha1_acl_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_redpanda_api_dataplane_v1alpha1_acl_proto_goTypes = []interface{}{
	(ACL_ResourceType)(0),                  // 0: redpanda.api.dataplane.v1alpha1.ACL.ResourceType
	(ACL_ResourcePatternType)(0),           // 1: redpanda.api.dataplane.v1alpha1.ACL.ResourcePatternType
	(ACL_Operation)(0),                     // 2: redpanda.api.dataplane.v1alpha1.ACL.Operation
	(ACL_PermissionType)(0),                // 3: redpanda.api.dataplane.v1alpha1.ACL.PermissionType
	(*ACL)(nil),                            // 4: redpanda.api.dataplane.v1alpha1.ACL
	(*ListACLsRequest)(nil),                // 5: redpanda.api.dataplane.v1alpha1.ListACLsRequest
	(*ListACLsResponse)(nil),               // 6: redpanda.api.dataplane.v1alpha1.ListACLsResponse
	(*CreateACLRequest)(nil),               // 7: redpanda.api.dataplane.v1alpha1.CreateACLRequest
	(*CreateACLResponse)(nil),              // 8: redpanda.api.dataplane.v1alpha1.CreateACLResponse
	(*DeleteACLsRequest)(nil),              // 9: redpanda.api.dataplane.v1alpha1.DeleteACLsRequest
	(*DeleteACLsResponse)(nil),             // 10: redpanda.api.dataplane.v1alpha1.DeleteACLsResponse
	(*ListACLsRequest_Filter)(nil),         // 11: redpanda.api.dataplane.v1alpha1.ListACLsRequest.Filter
	(*ListACLsResponse_Policy)(nil),        // 12: redpanda.api.dataplane.v1alpha1.ListACLsResponse.Policy
	(*ListACLsResponse_Resource)(nil),      // 13: redpanda.api.dataplane.v1alpha1.ListACLsResponse.Resource
	(*DeleteACLsRequest_Filter)(nil),       // 14: redpanda.api.dataplane.v1alpha1.DeleteACLsRequest.Filter
	(*DeleteACLsResponse_MatchingACL)(nil), // 15: redpanda.api.dataplane.v1alpha1.DeleteACLsResponse.MatchingACL
	(*status.Status)(nil),                  // 16: google.rpc.Status
}
var file_redpanda_api_dataplane_v1alpha1_acl_proto_depIdxs = []int32{
	11, // 0: redpanda.api.dataplane.v1alpha1.ListACLsRequest.filter:type_name -> redpanda.api.dataplane.v1alpha1.ListACLsRequest.Filter
	13, // 1: redpanda.api.dataplane.v1alpha1.ListACLsResponse.resources:type_name -> redpanda.api.dataplane.v1alpha1.ListACLsResponse.Resource
	0,  // 2: redpanda.api.dataplane.v1alpha1.CreateACLRequest.resource_type:type_name -> redpanda.api.dataplane.v1alpha1.ACL.ResourceType
	1,  // 3: redpanda.api.dataplane.v1alpha1.CreateACLRequest.resource_pattern_type:type_name -> redpanda.api.dataplane.v1alpha1.ACL.ResourcePatternType
	2,  // 4: redpanda.api.dataplane.v1alpha1.CreateACLRequest.operation:type_name -> redpanda.api.dataplane.v1alpha1.ACL.Operation
	3,  // 5: redpanda.api.dataplane.v1alpha1.CreateACLRequest.permission_type:type_name -> redpanda.api.dataplane.v1alpha1.ACL.PermissionType
	14, // 6: redpanda.api.dataplane.v1alpha1.DeleteACLsRequest.filter:type_name -> redpanda.api.dataplane.v1alpha1.DeleteACLsRequest.Filter
	15, // 7: redpanda.api.dataplane.v1alpha1.DeleteACLsResponse.matching_acls:type_name -> redpanda.api.dataplane.v1alpha1.DeleteACLsResponse.MatchingACL
	0,  // 8: redpanda.api.dataplane.v1alpha1.ListACLsRequest.Filter.resource_type:type_name -> redpanda.api.dataplane.v1alpha1.ACL.ResourceType
	1,  // 9: redpanda.api.dataplane.v1alpha1.ListACLsRequest.Filter.resource_pattern_type:type_name -> redpanda.api.dataplane.v1alpha1.ACL.ResourcePatternType
	2,  // 10: redpanda.api.dataplane.v1alpha1.ListACLsRequest.Filter.operation:type_name -> redpanda.api.dataplane.v1alpha1.ACL.Operation
	3,  // 11: redpanda.api.dataplane.v1alpha1.ListACLsRequest.Filter.permission_type:type_name -> redpanda.api.dataplane.v1alpha1.ACL.PermissionType
	2,  // 12: redpanda.api.dataplane.v1alpha1.ListACLsResponse.Policy.operation:type_name -> redpanda.api.dataplane.v1alpha1.ACL.Operation
	3,  // 13: redpanda.api.dataplane.v1alpha1.ListACLsResponse.Policy.permission_type:type_name -> redpanda.api.dataplane.v1alpha1.ACL.PermissionType
	0,  // 14: redpanda.api.dataplane.v1alpha1.ListACLsResponse.Resource.resource_type:type_name -> redpanda.api.dataplane.v1alpha1.ACL.ResourceType
	1,  // 15: redpanda.api.dataplane.v1alpha1.ListACLsResponse.Resource.resource_pattern_type:type_name -> redpanda.api.dataplane.v1alpha1.ACL.ResourcePatternType
	12, // 16: redpanda.api.dataplane.v1alpha1.ListACLsResponse.Resource.acls:type_name -> redpanda.api.dataplane.v1alpha1.ListACLsResponse.Policy
	0,  // 17: redpanda.api.dataplane.v1alpha1.DeleteACLsRequest.Filter.resource_type:type_name -> redpanda.api.dataplane.v1alpha1.ACL.ResourceType
	1,  // 18: redpanda.api.dataplane.v1alpha1.DeleteACLsRequest.Filter.resource_pattern_type:type_name -> redpanda.api.dataplane.v1alpha1.ACL.ResourcePatternType
	2,  // 19: redpanda.api.dataplane.v1alpha1.DeleteACLsRequest.Filter.operation:type_name -> redpanda.api.dataplane.v1alpha1.ACL.Operation
	3,  // 20: redpanda.api.dataplane.v1alpha1.DeleteACLsRequest.Filter.permission_type:type_name -> redpanda.api.dataplane.v1alpha1.ACL.PermissionType
	0,  // 21: redpanda.api.dataplane.v1alpha1.DeleteACLsResponse.MatchingACL.resource_type:type_name -> redpanda.api.dataplane.v1alpha1.ACL.ResourceType
	1,  // 22: redpanda.api.dataplane.v1alpha1.DeleteACLsResponse.MatchingACL.resource_pattern_type:type_name -> redpanda.api.dataplane.v1alpha1.ACL.ResourcePatternType
	2,  // 23: redpanda.api.dataplane.v1alpha1.DeleteACLsResponse.MatchingACL.operation:type_name -> redpanda.api.dataplane.v1alpha1.ACL.Operation
	3,  // 24: redpanda.api.dataplane.v1alpha1.DeleteACLsResponse.MatchingACL.permission_type:type_name -> redpanda.api.dataplane.v1alpha1.ACL.PermissionType
	16, // 25: redpanda.api.dataplane.v1alpha1.DeleteACLsResponse.MatchingACL.error:type_name -> google.rpc.Status
	5,  // 26: redpanda.api.dataplane.v1alpha1.ACLService.ListACLs:input_type -> redpanda.api.dataplane.v1alpha1.ListACLsRequest
	7,  // 27: redpanda.api.dataplane.v1alpha1.ACLService.CreateACL:input_type -> redpanda.api.dataplane.v1alpha1.CreateACLRequest
	9,  // 28: redpanda.api.dataplane.v1alpha1.ACLService.DeleteACLs:input_type -> redpanda.api.dataplane.v1alpha1.DeleteACLsRequest
	6,  // 29: redpanda.api.dataplane.v1alpha1.ACLService.ListACLs:output_type -> redpanda.api.dataplane.v1alpha1.ListACLsResponse
	8,  // 30: redpanda.api.dataplane.v1alpha1.ACLService.CreateACL:output_type -> redpanda.api.dataplane.v1alpha1.CreateACLResponse
	10, // 31: redpanda.api.dataplane.v1alpha1.ACLService.DeleteACLs:output_type -> redpanda.api.dataplane.v1alpha1.DeleteACLsResponse
	29, // [29:32] is the sub-list for method output_type
	26, // [26:29] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_redpanda_api_dataplane_v1alpha1_acl_proto_init() }
func file_redpanda_api_dataplane_v1alpha1_acl_proto_init() {
	if File_redpanda_api_dataplane_v1alpha1_acl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListACLsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListACLsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateACLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateACLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteACLsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteACLsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListACLsRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListACLsResponse_Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListACLsResponse_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteACLsRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteACLsResponse_MatchingACL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_dataplane_v1alpha1_acl_proto_goTypes,
		DependencyIndexes: file_redpanda_api_dataplane_v1alpha1_acl_proto_depIdxs,
		EnumInfos:         file_redpanda_api_dataplane_v1alpha1_acl_proto_enumTypes,
		MessageInfos:      file_redpanda_api_dataplane_v1alpha1_acl_proto_msgTypes,
	}.Build()
	File_redpanda_api_dataplane_v1alpha1_acl_proto = out.File
	file_redpanda_api_dataplane_v1alpha1_acl_proto_rawDesc = nil
	file_redpanda_api_dataplane_v1alpha1_acl_proto_goTypes = nil
	file_redpanda_api_dataplane_v1alpha1_acl_proto_depIdxs = nil
}
