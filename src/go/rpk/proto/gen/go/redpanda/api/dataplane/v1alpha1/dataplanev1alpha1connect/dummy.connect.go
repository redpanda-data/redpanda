// This file is a trick to force protoc-gen-openapiv2 into including the types used here into the openapi spec. They are not normally included, because they are not explicitly referenced in any proto (as protobuf ANY is used in errordetails).

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1alpha1/dummy.proto

package dataplanev1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/redpanda-data/redpanda/src/go/rpk/proto/gen/go/redpanda/api/dataplane/v1alpha1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DummyServiceName is the fully-qualified name of the DummyService service.
	DummyServiceName = "redpanda.api.dataplane.v1alpha1.DummyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DummyServiceDummyMethodProcedure is the fully-qualified name of the DummyService's DummyMethod
	// RPC.
	DummyServiceDummyMethodProcedure = "/redpanda.api.dataplane.v1alpha1.DummyService/DummyMethod"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	dummyServiceServiceDescriptor           = v1alpha1.File_redpanda_api_dataplane_v1alpha1_dummy_proto.Services().ByName("DummyService")
	dummyServiceDummyMethodMethodDescriptor = dummyServiceServiceDescriptor.Methods().ByName("DummyMethod")
)

// DummyServiceClient is a client for the redpanda.api.dataplane.v1alpha1.DummyService service.
type DummyServiceClient interface {
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	DummyMethod(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1alpha1.DummyMethodResponse], error)
}

// NewDummyServiceClient constructs a client for the redpanda.api.dataplane.v1alpha1.DummyService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDummyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DummyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &dummyServiceClient{
		dummyMethod: connect.NewClient[emptypb.Empty, v1alpha1.DummyMethodResponse](
			httpClient,
			baseURL+DummyServiceDummyMethodProcedure,
			connect.WithSchema(dummyServiceDummyMethodMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// dummyServiceClient implements DummyServiceClient.
type dummyServiceClient struct {
	dummyMethod *connect.Client[emptypb.Empty, v1alpha1.DummyMethodResponse]
}

// DummyMethod calls redpanda.api.dataplane.v1alpha1.DummyService.DummyMethod.
func (c *dummyServiceClient) DummyMethod(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1alpha1.DummyMethodResponse], error) {
	return c.dummyMethod.CallUnary(ctx, req)
}

// DummyServiceHandler is an implementation of the redpanda.api.dataplane.v1alpha1.DummyService
// service.
type DummyServiceHandler interface {
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	DummyMethod(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1alpha1.DummyMethodResponse], error)
}

// NewDummyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDummyServiceHandler(svc DummyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dummyServiceDummyMethodHandler := connect.NewUnaryHandler(
		DummyServiceDummyMethodProcedure,
		svc.DummyMethod,
		connect.WithSchema(dummyServiceDummyMethodMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.dataplane.v1alpha1.DummyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DummyServiceDummyMethodProcedure:
			dummyServiceDummyMethodHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDummyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDummyServiceHandler struct{}

func (UnimplementedDummyServiceHandler) DummyMethod(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1alpha1.DummyMethodResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha1.DummyService.DummyMethod is not implemented"))
}
