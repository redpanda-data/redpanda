// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: redpanda/api/dataplane/v1alpha1/transform.proto

package dataplanev1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartitionTransformStatus_PartitionStatus int32

const (
	PartitionTransformStatus_PARTITION_STATUS_UNSPECIFIED PartitionTransformStatus_PartitionStatus = 0
	PartitionTransformStatus_PARTITION_STATUS_RUNNING     PartitionTransformStatus_PartitionStatus = 1
	PartitionTransformStatus_PARTITION_STATUS_INACTIVE    PartitionTransformStatus_PartitionStatus = 2
	PartitionTransformStatus_PARTITION_STATUS_ERRORED     PartitionTransformStatus_PartitionStatus = 3
	PartitionTransformStatus_PARTITION_STATUS_UNKNOWN     PartitionTransformStatus_PartitionStatus = 4
)

// Enum value maps for PartitionTransformStatus_PartitionStatus.
var (
	PartitionTransformStatus_PartitionStatus_name = map[int32]string{
		0: "PARTITION_STATUS_UNSPECIFIED",
		1: "PARTITION_STATUS_RUNNING",
		2: "PARTITION_STATUS_INACTIVE",
		3: "PARTITION_STATUS_ERRORED",
		4: "PARTITION_STATUS_UNKNOWN",
	}
	PartitionTransformStatus_PartitionStatus_value = map[string]int32{
		"PARTITION_STATUS_UNSPECIFIED": 0,
		"PARTITION_STATUS_RUNNING":     1,
		"PARTITION_STATUS_INACTIVE":    2,
		"PARTITION_STATUS_ERRORED":     3,
		"PARTITION_STATUS_UNKNOWN":     4,
	}
)

func (x PartitionTransformStatus_PartitionStatus) Enum() *PartitionTransformStatus_PartitionStatus {
	p := new(PartitionTransformStatus_PartitionStatus)
	*p = x
	return p
}

func (x PartitionTransformStatus_PartitionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartitionTransformStatus_PartitionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_dataplane_v1alpha1_transform_proto_enumTypes[0].Descriptor()
}

func (PartitionTransformStatus_PartitionStatus) Type() protoreflect.EnumType {
	return &file_redpanda_api_dataplane_v1alpha1_transform_proto_enumTypes[0]
}

func (x PartitionTransformStatus_PartitionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartitionTransformStatus_PartitionStatus.Descriptor instead.
func (PartitionTransformStatus_PartitionStatus) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescGZIP(), []int{1, 0}
}

type TransformMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InputTopicName       string                                   `protobuf:"bytes,2,opt,name=input_topic_name,json=inputTopicName,proto3" json:"input_topic_name,omitempty"`
	OutputTopicNames     []string                                 `protobuf:"bytes,3,rep,name=output_topic_names,json=outputTopicNames,proto3" json:"output_topic_names,omitempty"`
	Statuses             []*PartitionTransformStatus              `protobuf:"bytes,4,rep,name=statuses,proto3" json:"statuses,omitempty"`
	EnvironmentVariables []*TransformMetadata_EnvironmentVariable `protobuf:"bytes,5,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty"`
}

func (x *TransformMetadata) Reset() {
	*x = TransformMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformMetadata) ProtoMessage() {}

func (x *TransformMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformMetadata.ProtoReflect.Descriptor instead.
func (*TransformMetadata) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescGZIP(), []int{0}
}

func (x *TransformMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransformMetadata) GetInputTopicName() string {
	if x != nil {
		return x.InputTopicName
	}
	return ""
}

func (x *TransformMetadata) GetOutputTopicNames() []string {
	if x != nil {
		return x.OutputTopicNames
	}
	return nil
}

func (x *TransformMetadata) GetStatuses() []*PartitionTransformStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *TransformMetadata) GetEnvironmentVariables() []*TransformMetadata_EnvironmentVariable {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

type PartitionTransformStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerId    int32                                    `protobuf:"varint,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	PartitionId int32                                    `protobuf:"varint,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Status      PartitionTransformStatus_PartitionStatus `protobuf:"varint,3,opt,name=status,proto3,enum=redpanda.api.dataplane.v1alpha1.PartitionTransformStatus_PartitionStatus" json:"status,omitempty"`
	Lag         int32                                    `protobuf:"varint,4,opt,name=lag,proto3" json:"lag,omitempty"`
}

func (x *PartitionTransformStatus) Reset() {
	*x = PartitionTransformStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionTransformStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionTransformStatus) ProtoMessage() {}

func (x *PartitionTransformStatus) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionTransformStatus.ProtoReflect.Descriptor instead.
func (*PartitionTransformStatus) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescGZIP(), []int{1}
}

func (x *PartitionTransformStatus) GetBrokerId() int32 {
	if x != nil {
		return x.BrokerId
	}
	return 0
}

func (x *PartitionTransformStatus) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *PartitionTransformStatus) GetStatus() PartitionTransformStatus_PartitionStatus {
	if x != nil {
		return x.Status
	}
	return PartitionTransformStatus_PARTITION_STATUS_UNSPECIFIED
}

func (x *PartitionTransformStatus) GetLag() int32 {
	if x != nil {
		return x.Lag
	}
	return 0
}

// DeployTransformRequest is the metadata that is required to deploy a new WASM
// transform in a Redpanda cluster.
type DeployTransformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InputTopicName       string                                   `protobuf:"bytes,2,opt,name=input_topic_name,json=inputTopicName,proto3" json:"input_topic_name,omitempty"`
	OutputTopicNames     []string                                 `protobuf:"bytes,3,rep,name=output_topic_names,json=outputTopicNames,proto3" json:"output_topic_names,omitempty"`
	EnvironmentVariables []*TransformMetadata_EnvironmentVariable `protobuf:"bytes,4,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty"`
}

func (x *DeployTransformRequest) Reset() {
	*x = DeployTransformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployTransformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployTransformRequest) ProtoMessage() {}

func (x *DeployTransformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployTransformRequest.ProtoReflect.Descriptor instead.
func (*DeployTransformRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescGZIP(), []int{2}
}

func (x *DeployTransformRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeployTransformRequest) GetInputTopicName() string {
	if x != nil {
		return x.InputTopicName
	}
	return ""
}

func (x *DeployTransformRequest) GetOutputTopicNames() []string {
	if x != nil {
		return x.OutputTopicNames
	}
	return nil
}

func (x *DeployTransformRequest) GetEnvironmentVariables() []*TransformMetadata_EnvironmentVariable {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

type ListTransformsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter    *ListTransformsRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	PageToken string                        `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListTransformsRequest) Reset() {
	*x = ListTransformsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransformsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransformsRequest) ProtoMessage() {}

func (x *ListTransformsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransformsRequest.ProtoReflect.Descriptor instead.
func (*ListTransformsRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescGZIP(), []int{3}
}

func (x *ListTransformsRequest) GetFilter() *ListTransformsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListTransformsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListTransformsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageToken string               `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Transforms    []*TransformMetadata `protobuf:"bytes,2,rep,name=transforms,proto3" json:"transforms,omitempty"`
}

func (x *ListTransformsResponse) Reset() {
	*x = ListTransformsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransformsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransformsResponse) ProtoMessage() {}

func (x *ListTransformsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransformsResponse.ProtoReflect.Descriptor instead.
func (*ListTransformsResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescGZIP(), []int{4}
}

func (x *ListTransformsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListTransformsResponse) GetTransforms() []*TransformMetadata {
	if x != nil {
		return x.Transforms
	}
	return nil
}

type GetTransformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetTransformRequest) Reset() {
	*x = GetTransformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransformRequest) ProtoMessage() {}

func (x *GetTransformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransformRequest.ProtoReflect.Descriptor instead.
func (*GetTransformRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescGZIP(), []int{5}
}

func (x *GetTransformRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetTransformResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transform *TransformMetadata `protobuf:"bytes,1,opt,name=transform,proto3" json:"transform,omitempty"`
}

func (x *GetTransformResponse) Reset() {
	*x = GetTransformResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransformResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransformResponse) ProtoMessage() {}

func (x *GetTransformResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransformResponse.ProtoReflect.Descriptor instead.
func (*GetTransformResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescGZIP(), []int{6}
}

func (x *GetTransformResponse) GetTransform() *TransformMetadata {
	if x != nil {
		return x.Transform
	}
	return nil
}

type DeleteTransformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteTransformRequest) Reset() {
	*x = DeleteTransformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTransformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTransformRequest) ProtoMessage() {}

func (x *DeleteTransformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTransformRequest.ProtoReflect.Descriptor instead.
func (*DeleteTransformRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteTransformRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteTransformResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTransformResponse) Reset() {
	*x = DeleteTransformResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTransformResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTransformResponse) ProtoMessage() {}

func (x *DeleteTransformResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTransformResponse.ProtoReflect.Descriptor instead.
func (*DeleteTransformResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescGZIP(), []int{8}
}

type TransformMetadata_EnvironmentVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TransformMetadata_EnvironmentVariable) Reset() {
	*x = TransformMetadata_EnvironmentVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformMetadata_EnvironmentVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformMetadata_EnvironmentVariable) ProtoMessage() {}

func (x *TransformMetadata_EnvironmentVariable) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformMetadata_EnvironmentVariable.ProtoReflect.Descriptor instead.
func (*TransformMetadata_EnvironmentVariable) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TransformMetadata_EnvironmentVariable) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TransformMetadata_EnvironmentVariable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ListTransformsRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListTransformsRequest_Filter) Reset() {
	*x = ListTransformsRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransformsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransformsRequest_Filter) ProtoMessage() {}

func (x *ListTransformsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransformsRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListTransformsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ListTransformsRequest_Filter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_redpanda_api_dataplane_v1alpha1_transform_proto protoreflect.FileDescriptor

var file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf,
	0x06, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0xba, 0x48, 0x1a, 0x72, 0x18, 0x10, 0x01, 0x18, 0x80, 0x01, 0x32, 0x11,
	0x5e, 0x5b, 0x5c, 0x50, 0x7b, 0x43, 0x63, 0x7d, 0x5c, 0x50, 0x7b, 0x43, 0x66, 0x7d, 0x5d, 0x2b,
	0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x55, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0xcd, 0x01, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x50,
	0x92, 0x41, 0x4d, 0x32, 0x4b, 0x54, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x79,
	0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x27, 0x73, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0xe7, 0x02, 0x0a, 0x13, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xf4,
	0x01, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xe1, 0x01, 0x92,
	0x41, 0x34, 0x32, 0x25, 0x54, 0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x79,
	0x6f, 0x75, 0x72, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4a, 0x0b, 0x22, 0x4c, 0x4f, 0x47, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x22, 0xe0, 0x41, 0x02, 0xba, 0x48, 0xa3, 0x01, 0xba, 0x01, 0x95,
	0x01, 0x0a, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x5f, 0x65, 0x6e,
	0x76, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x6f, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x43, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x27, 0x52,
	0x45, 0x44, 0x50, 0x41, 0x4e, 0x44, 0x41, 0x5f, 0x27, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2e, 0x1a, 0x1d, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x27, 0x52, 0x45, 0x44, 0x50, 0x41,
	0x4e, 0x44, 0x41, 0x5f, 0x27, 0x29, 0xc8, 0x01, 0x01, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x01,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x59, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x30, 0x32, 0x25, 0x54, 0x68, 0x65, 0x20, 0x6b,
	0x65, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x4a, 0x07, 0x22, 0x44, 0x45, 0x42, 0x55, 0x47, 0x22, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x0a, 0xc8,
	0x01, 0x01, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xfe, 0x02, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x61, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c,
	0x61, 0x67, 0x22, 0xac, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x04, 0x22, 0xa5, 0x05, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7b, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x67, 0x92, 0x41, 0x40, 0x32,
	0x1a, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4a, 0x22, 0x22, 0x72, 0x65,
	0x64, 0x61, 0x63, 0x74, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2d, 0x69, 0x6e, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0xe0,
	0x41, 0x02, 0xba, 0x48, 0x1e, 0xc8, 0x01, 0x01, 0x72, 0x19, 0x10, 0x01, 0x18, 0x80, 0x01, 0x32,
	0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x5f, 0x5c, 0x2d,
	0x5d, 0x2a, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x10, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x5d, 0x92, 0x41, 0x36, 0x32, 0x2a, 0x54, 0x68, 0x65, 0x20, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x20, 0x74, 0x6f, 0x2e, 0x4a, 0x08, 0x22, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0xe0,
	0x41, 0x02, 0xba, 0x48, 0x1e, 0xc8, 0x01, 0x01, 0x72, 0x19, 0x10, 0x01, 0x18, 0xf9, 0x01, 0x32,
	0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x5f, 0x5c, 0x2d,
	0x5d, 0x2a, 0x24, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x7a, 0x92, 0x41, 0x48, 0x32, 0x33, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x2e, 0x4a, 0x11, 0x22, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x2d, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x22, 0xe0, 0x41, 0x02,
	0xba, 0x48, 0x29, 0xc8, 0x01, 0x01, 0x92, 0x01, 0x23, 0x08, 0x01, 0x10, 0x01, 0x18, 0x01, 0x22,
	0x1b, 0x72, 0x19, 0x10, 0x01, 0x18, 0xf9, 0x01, 0x32, 0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x5f, 0x5c, 0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x10, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0xd8,
	0x01, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x5b, 0x92, 0x41, 0x4d, 0x32, 0x4b, 0x54, 0x68, 0x65,
	0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
	0x74, 0x6f, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72,
	0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x27, 0x73, 0x20, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0xba, 0x48, 0x08, 0x92, 0x01, 0x05, 0x08, 0x00,
	0x10, 0x80, 0x01, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x3b, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0xba, 0x48, 0x1a, 0x72, 0x18, 0x10, 0x01, 0x18, 0x80, 0x01, 0x32, 0x11, 0x5e,
	0x5b, 0x5c, 0x50, 0x7b, 0x43, 0x63, 0x7d, 0x5c, 0x50, 0x7b, 0x43, 0x66, 0x7d, 0x5d, 0x2b, 0x24,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x52, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x22, 0x4e, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x23, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x1d, 0xc8, 0x01, 0x01, 0x72, 0x18, 0x10,
	0x01, 0x18, 0x80, 0x01, 0x32, 0x11, 0x5e, 0x5b, 0x5c, 0x50, 0x7b, 0x43, 0x63, 0x7d, 0x5c, 0x50,
	0x7b, 0x43, 0x66, 0x7d, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x68, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x52, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x1e, 0xc8, 0x01, 0x01, 0x72, 0x19, 0x10, 0x01, 0x18, 0x80,
	0x01, 0x32, 0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x5f,
	0x5c, 0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xdd, 0x07, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb6, 0x02, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x36,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xb2, 0x01, 0x92, 0x41, 0x92, 0x01, 0x12, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x1a, 0x35, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4a, 0x48,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x41, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x3b, 0x0a, 0x39, 0x1a,
	0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x73, 0x12, 0xc3, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x34, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xc5, 0x01, 0x92, 0x41, 0x93, 0x01, 0x12, 0x0d, 0x47, 0x65, 0x74, 0x20, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x0e, 0x47, 0x65, 0x74, 0x20, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x21, 0x4a, 0x46, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x3f, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x39, 0x0a, 0x37, 0x1a, 0x35, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x62, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1b, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xc9, 0x02, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x37,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc2, 0x01, 0x92, 0x41, 0x9b, 0x01, 0x12, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x30, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x61, 0x20, 0x57, 0x41, 0x53, 0x4d, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x4a, 0x29, 0x0a, 0x03,
	0x32, 0x30, 0x34, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x12, 0x00, 0x4a, 0x2a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x23,
	0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x14, 0x1a,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x42, 0xc1, 0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x6b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x70, 0x6b, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03,
	0x52, 0x41, 0x44, 0xaa, 0x02, 0x1f, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x41,
	0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1f, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x2b, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x22, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescOnce sync.Once
	file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescData = file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDesc
)

func file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescGZIP() []byte {
	file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescOnce.Do(func() {
		file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescData)
	})
	return file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDescData
}

var file_redpanda_api_dataplane_v1alpha1_transform_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_redpanda_api_dataplane_v1alpha1_transform_proto_goTypes = []interface{}{
	(PartitionTransformStatus_PartitionStatus)(0), // 0: redpanda.api.dataplane.v1alpha1.PartitionTransformStatus.PartitionStatus
	(*TransformMetadata)(nil),                     // 1: redpanda.api.dataplane.v1alpha1.TransformMetadata
	(*PartitionTransformStatus)(nil),              // 2: redpanda.api.dataplane.v1alpha1.PartitionTransformStatus
	(*DeployTransformRequest)(nil),                // 3: redpanda.api.dataplane.v1alpha1.DeployTransformRequest
	(*ListTransformsRequest)(nil),                 // 4: redpanda.api.dataplane.v1alpha1.ListTransformsRequest
	(*ListTransformsResponse)(nil),                // 5: redpanda.api.dataplane.v1alpha1.ListTransformsResponse
	(*GetTransformRequest)(nil),                   // 6: redpanda.api.dataplane.v1alpha1.GetTransformRequest
	(*GetTransformResponse)(nil),                  // 7: redpanda.api.dataplane.v1alpha1.GetTransformResponse
	(*DeleteTransformRequest)(nil),                // 8: redpanda.api.dataplane.v1alpha1.DeleteTransformRequest
	(*DeleteTransformResponse)(nil),               // 9: redpanda.api.dataplane.v1alpha1.DeleteTransformResponse
	(*TransformMetadata_EnvironmentVariable)(nil), // 10: redpanda.api.dataplane.v1alpha1.TransformMetadata.EnvironmentVariable
	(*ListTransformsRequest_Filter)(nil),          // 11: redpanda.api.dataplane.v1alpha1.ListTransformsRequest.Filter
}
var file_redpanda_api_dataplane_v1alpha1_transform_proto_depIdxs = []int32{
	2,  // 0: redpanda.api.dataplane.v1alpha1.TransformMetadata.statuses:type_name -> redpanda.api.dataplane.v1alpha1.PartitionTransformStatus
	10, // 1: redpanda.api.dataplane.v1alpha1.TransformMetadata.environment_variables:type_name -> redpanda.api.dataplane.v1alpha1.TransformMetadata.EnvironmentVariable
	0,  // 2: redpanda.api.dataplane.v1alpha1.PartitionTransformStatus.status:type_name -> redpanda.api.dataplane.v1alpha1.PartitionTransformStatus.PartitionStatus
	10, // 3: redpanda.api.dataplane.v1alpha1.DeployTransformRequest.environment_variables:type_name -> redpanda.api.dataplane.v1alpha1.TransformMetadata.EnvironmentVariable
	11, // 4: redpanda.api.dataplane.v1alpha1.ListTransformsRequest.filter:type_name -> redpanda.api.dataplane.v1alpha1.ListTransformsRequest.Filter
	1,  // 5: redpanda.api.dataplane.v1alpha1.ListTransformsResponse.transforms:type_name -> redpanda.api.dataplane.v1alpha1.TransformMetadata
	1,  // 6: redpanda.api.dataplane.v1alpha1.GetTransformResponse.transform:type_name -> redpanda.api.dataplane.v1alpha1.TransformMetadata
	4,  // 7: redpanda.api.dataplane.v1alpha1.TransformService.ListTransforms:input_type -> redpanda.api.dataplane.v1alpha1.ListTransformsRequest
	6,  // 8: redpanda.api.dataplane.v1alpha1.TransformService.GetTransform:input_type -> redpanda.api.dataplane.v1alpha1.GetTransformRequest
	8,  // 9: redpanda.api.dataplane.v1alpha1.TransformService.DeleteTransform:input_type -> redpanda.api.dataplane.v1alpha1.DeleteTransformRequest
	5,  // 10: redpanda.api.dataplane.v1alpha1.TransformService.ListTransforms:output_type -> redpanda.api.dataplane.v1alpha1.ListTransformsResponse
	7,  // 11: redpanda.api.dataplane.v1alpha1.TransformService.GetTransform:output_type -> redpanda.api.dataplane.v1alpha1.GetTransformResponse
	9,  // 12: redpanda.api.dataplane.v1alpha1.TransformService.DeleteTransform:output_type -> redpanda.api.dataplane.v1alpha1.DeleteTransformResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_redpanda_api_dataplane_v1alpha1_transform_proto_init() }
func file_redpanda_api_dataplane_v1alpha1_transform_proto_init() {
	if File_redpanda_api_dataplane_v1alpha1_transform_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionTransformStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployTransformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransformsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransformsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransformResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTransformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTransformResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformMetadata_EnvironmentVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransformsRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_dataplane_v1alpha1_transform_proto_goTypes,
		DependencyIndexes: file_redpanda_api_dataplane_v1alpha1_transform_proto_depIdxs,
		EnumInfos:         file_redpanda_api_dataplane_v1alpha1_transform_proto_enumTypes,
		MessageInfos:      file_redpanda_api_dataplane_v1alpha1_transform_proto_msgTypes,
	}.Build()
	File_redpanda_api_dataplane_v1alpha1_transform_proto = out.File
	file_redpanda_api_dataplane_v1alpha1_transform_proto_rawDesc = nil
	file_redpanda_api_dataplane_v1alpha1_transform_proto_goTypes = nil
	file_redpanda_api_dataplane_v1alpha1_transform_proto_depIdxs = nil
}
