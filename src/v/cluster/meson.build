cluster_services = [
  'controller',
  'id_allocator',
  'metadata_dissemination_rpc',
  'tx_gateway',
  'partition_balancer_rpc',
  'node_status_rpc',
]

cluster_services_h = []
foreach service : cluster_services
  t = custom_target(
    input: f'@service@.json',
    output: f'@service@_service.h',
    command: [rpc_compiler, '--service_file', '@INPUT@',
      '--output_file', '@OUTPUT@'])
  cluster_services_h += [t]
endforeach

libcluster = library('cluster',
  'archival_metadata_stm.cc',
  'metadata_cache.cc',
  'partition_manager.cc',
  'scheduling/partition_allocator.cc',
  'logger.cc',
  'config_frontend.cc',
  'config_manager.cc',
  'cluster_utils.cc',
  'id_allocator.cc',
  'id_allocator_frontend.cc',
  'rm_partition_frontend.cc',
  'tx_gateway_frontend.cc',
  'tx_gateway.cc',
  'service.cc',
  'metadata_dissemination_handler.cc',
  'metadata_dissemination_service.cc',
  'metadata_dissemination_utils.cc',
  'types.cc',
  'notification_latch.cc',
  'topic_table.cc',
  'topic_table_probe.cc',
  'topic_updates_dispatcher.cc',
  'members_table.cc',
  'members_manager.cc',
  'partition_leaders_table.cc',
  'topics_frontend.cc',
  'controller_backend.cc',
  'controller_probe.cc',
  'controller.cc',
  'partition.cc',
  'partition_probe.cc',
  'id_allocator_stm.cc',
  'persisted_stm.cc',
  'tm_stm.cc',
  'rm_stm.cc',
  'tx_helpers.cc',
  'security_manager.cc',
  'security_frontend.cc',
  'data_policy_manager.cc',
  'data_policy_frontend.cc',
  'controller_api.cc',
  'members_frontend.cc',
  'members_backend.cc',
  'health_manager.cc',
  'non_replicable_topics_frontend.cc',
  'scheduling/allocation_node.cc',
  'scheduling/types.cc',
  'scheduling/allocation_state.cc',
  'scheduling/allocation_strategy.cc',
  'scheduling/constraints.cc',
  'scheduling/leader_balancer.cc',
  'scheduling/leader_balancer_probe.cc',
  'health_monitor_types.cc',
  'health_monitor_backend.cc',
  'health_monitor_frontend.cc',
  'metrics_reporter.cc',
  'node/types.cc',
  'node/local_monitor.cc',
  'feature_backend.cc',
  'feature_manager.cc',
  'feature_barrier.cc',
  'drain_manager.cc',
  'remote_topic_configuration_source.cc',
  'partition_balancer_planner.cc',
  'partition_balancer_backend.cc',
  'partition_balancer_rpc_handler.cc',
  'node_status_backend.cc',
  'node_status_rpc_handler.cc',
  'request_auth.cc',
  cluster_services_h,
  version_h,
  implicit_include_directories: false,
  dependencies: [config, model, raft, http, v8_engine, cloud_storage, features])

cluster = declare_dependency(
  sources: [cluster_services_h, version_h],
  dependencies: [config, model, raft, http, v8_engine, cloud_storage, features],
  link_with: libcluster)
