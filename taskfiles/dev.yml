version: '3'

vars:
  GO_VERSION: '1.16.5'
  GO_BUILD_ROOT: '{{.BUILD_ROOT}}/go/{{.GO_VERSION}}'
  KUBECTL_VERSION: '1.21.0'
  GOLANGCI_LINT_VERSION: '1.40.1'

tasks:
  install-deps:
    desc: install system packages
    cmds:
    - install-dependencies.sh

  install-node:
    desc: Install nodejs
    vars:
      JS_ROOT: "{{.SRC_DIR}}/src/js"
      NODE_VERSION: '12.16.1'
      NODE_ROOT: "{{.BUILD_ROOT}}/node"
      NODE_PKG: 'node-v{{.NODE_VERSION}}-linux-{{if eq ARCH "arm64"}}arm64{{else}}x64{{end}}'
      NODE_URL: "https://nodejs.org/dist/v{{.NODE_VERSION}}/{{.NODE_PKG}}.tar.xz"
    cmds:
    - mkdir -p "{{.NODE_ROOT}}"
    - curl "{{.NODE_URL}}" > "{{.NODE_ROOT}}/{{.NODE_PKG}}.tar.xz"
    - tar -xf "{{.NODE_ROOT}}/{{.NODE_PKG}}.tar.xz" -C "{{.NODE_ROOT}}" --strip 1
    - rm -rf "{{.NODE_ROOT}}/{{.NODE_PKG}}.tar.xz"
    status:
    - test -f "{{.NODE_ROOT}}/bin/node"
    - test -f "{{.NODE_ROOT}}/bin/npm"

  install-yapf:
    desc: install yapf
    vars:
      VENV: '{{.BUILD_ROOT}}/venv/yapf'
    cmds:
    - python3 -mvenv '{{.VENV}}'
    - |
      source '{{.VENV}}/bin/activate'
      pip3 install --upgrade pip
      pip3 install yapf
    status:
    - test -f '{{.VENV}}/bin/yapf'

  install-go:
    desc: install golang compiler
    vars:
      GOLANG_URL_DEFAULT: 'https://golang.org/dl/go{{.GO_VERSION}}.linux-{{ARCH}}.tar.gz'
      GOLANG_URL: '{{default .GOLANG_URL_DEFAULT .GOLANG_URL}}'
    cmds:
    - mkdir -p '{{.GO_BUILD_ROOT}}'
    - curl -sSLf --retry 3 --retry-connrefused --retry-delay 2 '{{.GOLANG_URL}}' | tar -xz -C '{{.GO_BUILD_ROOT}}' --strip 1
    status:
    - test -f '{{.GO_BUILD_ROOT}}/bin/go'

  install-crlfmt:
    desc: install crlfmt go formater
    summary: |
      Install crlfmt go formater tool in the build directory ($BUILD_ROOT/bin/go),
      only if it does not exist on the host already. Checking whether is
      available on the host is done so that this task can also run in
      containerized environments.
    cmds:
    - |
      TMP_DIR=$(mktemp -d)
      cd $TMP_DIR
      go mod init tmp
      GOBIN={{ .BUILD_ROOT }}/bin/go go install github.com/cockroachdb/crlfmt@latest
      rm -rf $TMP_DIR
    status:
    - "[ -f '{{ .BUILD_ROOT }}/bin/go' ] || command -v {{ .BUILD_ROOT }}/bin/go/crlfmt >/dev/null 2>&1"

  install-kubectl:
    desc: install kubectl
    vars:
      KUBECTL_URL_DEFAULT: 'https://storage.googleapis.com/kubernetes-release/release/v{{.KUBECTL_VERSION}}/bin/linux/{{ARCH}}/kubectl'
      KUBECTL_URL: '{{default .KUBECTL_URL_DEFAULT .KUBECTL_URL}}'
    cmds:
    - mkdir -p '{{.BUILD_ROOT}}/bin'
    - curl -sSLf --retry 3 --retry-connrefused --retry-delay 2 '{{.KUBECTL_URL}}' -o '{{.BUILD_ROOT}}/bin/kubectl'
    - chmod +x '{{.BUILD_ROOT}}/bin/kubectl'
    status:
    - test -f '{{.BUILD_ROOT}}/bin/kubectl'

  install-golangci-lint:
    desc: install golangci-lint
    vars:
      GOLANGCI_LINT_URL_DEFAULT: 'https://github.com/golangci/golangci-lint/releases/download/v{{.GOLANGCI_LINT_VERSION}}/golangci-lint-{{.GOLANGCI_LINT_VERSION}}-linux-{{ARCH}}.tar.gz'
      GOLANGCI_LINT_URL: '{{default .GOLANGCI_LINT_URL_DEFAULT .GOLANGCI_LINT_URL}}'
    cmds:
    - mkdir -p '{{.BUILD_ROOT}}/bin'
    - curl -sSLf --retry 3 --retry-connrefused --retry-delay 2 '{{.GOLANGCI_LINT_URL}}' | tar -xz -C '{{.BUILD_ROOT}}/bin' --strip 1 --wildcards '*/golangci-lint'
    status:
    - test -f '{{.BUILD_ROOT}}/bin/golangci-lint'

  install-docker-compose:
    desc: install docker-compose
    cmds:
    - mkdir -p '{{.BUILD_ROOT}}/bin/'
    - curl -sSLf --retry 3 --retry-connrefused --retry-delay 2 --output '{{.BUILD_ROOT}}/bin/docker-compose' 'https://github.com/linuxserver/docker-docker-compose/releases/download/1.29.1-ls39/docker-compose-{{if eq ARCH "arm64"}}arm64{{else}}amd64{{end}}'
    - chmod +x '{{.BUILD_ROOT}}/bin/docker-compose'
    status:
    - test -f '{{.BUILD_ROOT}}/bin/docker-compose'

  start-podman-socket-service:
    desc: start podman.socket service
    vars:
      USE_PODMAN_DOCKER: '{{default "" .USE_PODMAN_DOCKER}}'
    cmds:
    - systemctl --user start podman.socket
    - "curl -H 'Content-Type: application/json' --unix-socket $XDG_RUNTIME_DIR/podman/podman.sock http://localhost/_ping | grep OK"
    status:
    - test -z {{.USE_PODMAN_DOCKER}}

  generate-certs:
    desc: use openssl to generate dev certs
    cmds:
    - |
      TMPDIR="$HOME/redpanda-certs"
      rm -rf $TMPDIR || true
      mkdir -p $TMPDIR/certs
      echo "Generating Certs in $TMPDIR"
      cd $TMPDIR
      cat > ca.cnf <<EOF
      # OpenSSL CA configuration file
      [ ca ]
      default_ca = CA_default
      [ CA_default ]
      default_days = 365
      database = index.txt
      serial = serial.txt
      default_md = sha256
      copy_extensions = copy
      unique_subject = no
      # Used to create the CA certificate.
      [ req ]
      prompt=no
      distinguished_name = distinguished_name
      x509_extensions = extensions
      [ distinguished_name ]
      organizationName = Vectorized
      commonName = Vectorized CA
      [ extensions ]
      keyUsage = critical,digitalSignature,nonRepudiation,keyEncipherment,keyCertSign
      basicConstraints = critical,CA:true,pathlen:1
      # Common policy for nodes and users.
      [ signing_policy ]
      organizationName = supplied
      commonName = optional
      # Used to sign node certificates.
      [ signing_node_req ]
      keyUsage = critical,digitalSignature,keyEncipherment
      extendedKeyUsage = serverAuth,clientAuth
      # Used to sign client certificates.
      [ signing_client_req ]
      keyUsage = critical,digitalSignature,keyEncipherment
      extendedKeyUsage = clientAuth
      EOF
      openssl genrsa -out $TMPDIR/ca.key 2048
      chmod 400 $TMPDIR/ca.key
      openssl req -new -x509 -config ca.cnf -key $TMPDIR/ca.key -out certs/ca.key -days 365 -batch
      openssl req \
            -new \
            -x509 \
            -config ca.cnf \
            -key $TMPDIR/ca.key \
            -out certs/ca.crt \
            -days 365 \
            -batch
      rm -f index.txt serial.txt
      touch index.txt
      echo '01' > serial.txt
      cat > node.cnf <<EOF
      # OpenSSL node configuration file
      [ req ]
      prompt=no
      distinguished_name = distinguished_name
      req_extensions = extensions
      [ distinguished_name ]
      organizationName = Vectorized
      [ extensions ]
      subjectAltName = critical,DNS:localhost,IP:127.0.0.1,IP:0.0.0.0
      EOF
      #DNS:<node-domain>,
      openssl genrsa -out certs/node.key 2048
      chmod 400 certs/node.key
      openssl req \
            -new \
            -config node.cnf \
            -key certs/node.key \
            -out node.csr \
            -batch
      openssl ca \
            -config ca.cnf \
            -keyfile $TMPDIR/ca.key \
            -cert certs/ca.crt \
            -policy signing_policy \
            -extensions signing_node_req \
            -out certs/node.crt \
            -outdir certs/ \
            -in node.csr \
            -batch
      openssl x509 -in certs/node.crt -text | grep "X509v3 Subject Alternative Name" -A 1
