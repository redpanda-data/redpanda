version: '3'

tasks:
  clean-cmake:
    desc: remove CMakeCache.txt and CMakeFiles/
    cmds:
    - |
      rm -fr \
        "{{.BUILD_DIR}}/CMakeCache.txt" \
        "{{.BUILD_DIR}}/CMakeFiles/" \
        "{{.BUILD_DIR}}/rp_deps_build/CMakeCache.txt" \
        "{{.BUILD_DIR}}/rp_deps_build/CMakeFiles/"

  clean-build:
    desc: "remove build folder [path: {{.BUILD_DIR}}]"
    cmds:
    - rm -rf '{{.BUILD_DIR}}'
    preconditions:
    - "[ {{.BUILD_ROOT}} != '' ] && [ {{.BUILD_TYPE}} != '' ] && [ {{.COMPILER}} != '' ]"

  configure:
    desc: configure redpanda build
    vars:
      RP_DEPS_SKIP_BUILD: '{{default "OFF" .RP_DEPS_SKIP_BUILD}}'
      RP_DEPS_BUILD_ONLY: '{{default "OFF" .RP_DEPS_BUILD_ONLY}}'
      RP_DEPS_INSTALL_DIR_DEFAULT: '{{.BUILD_DIR}}/rp_deps_install'
      RP_DEPS_INSTALL_DIR: '{{default .RP_DEPS_INSTALL_DIR_DEFAULT .RP_DEPS_INSTALL_DIR}}'
      VECTORIZED_CMAKE_DIR_DEFAULT:
        sh: 'realpath "{{.PWD}}/cmake"'
      VECTORIZED_CMAKE_DIR: "{{default .VECTORIZED_CMAKE_DIR_DEFAULT .VECTORIZED_CMAKE_DIR}}"
      CC: '{{.COMPILER}}'
      CXX: '{{if eq .COMPILER "gcc"}}g++{{else}}clang++{{end}}'
      ENABLE_GIT_VERSION: '{{default "ON" .ENABLE_GIT_VERSION}}'
    deps:
      - task: :dev:install-v8-build-tools
    env:
      CCACHE_DIR: '{{default "/dev/shm/ccache/v" .CCACHE_DIR}}'
    cmds:
    - |
      PATH={{.LLVM_INSTALL_PATH}}/bin:$PATH
      cmake \
        -GNinja \
        -DREDPANDA_DEPS_INSTALL_DIR="{{.RP_DEPS_INSTALL_DIR}}" \
        -DVECTORIZED_CMAKE_DIR="{{.VECTORIZED_CMAKE_DIR}}" \
        -DDEPOT_TOOLS_DIR="{{.DEPOT_TOOLS_DIR}}" \
        -DCMAKE_BUILD_TYPE={{.BUILD_TYPE | lower | title}} \
        -DCMAKE_C_COMPILER={{.CC}} \
        -DCMAKE_CXX_COMPILER={{.CXX}} \
        -DV_DEPS_SKIP_BUILD={{.RP_DEPS_SKIP_BUILD}} \
        -DV_DEPS_ONLY={{.RP_DEPS_BUILD_ONLY}} \
        -DENABLE_GIT_VERSION={{.ENABLE_GIT_VERSION | upper}} \
        -B{{.BUILD_DIR}} \
        -H{{.SRC_DIR}}
    status:
    - test -f '{{.BUILD_DIR}}/CMakeCache.txt'
    - test -f '{{.BUILD_DIR}}/build.ninja'

  build:
    desc: build redpanda
    vars:
      TOTAL_PHYSICAL_MEMORY:
        sh: free -g | awk '/^Mem:/{print $2}'
      GB_PER_BUILD_CORE: '{{default "2" .GB_PER_BUILD_CORE}}'
    deps:
    - configure
    cmds:
    - |
      PATH={{.LLVM_INSTALL_PATH}}/bin:$PATH
      ninja {{.TARGETS}} -C '{{.BUILD_DIR}}' -j'{{div .TOTAL_PHYSICAL_MEMORY .GB_PER_BUILD_CORE}}'

  set-aio-max:
    desc: set minimum required value for fs.aio-max-nr sysctl option
    vars:
      MIN_REQUIRED_AIO_MAX: 10485760
      USE_SUDO: '{{default "true" .USE_SUDO}}'
    cmds:
    - '{{if eq .USE_SUDO "true"}}sudo {{end}}sysctl -w fs.aio-max-nr={{.MIN_REQUIRED_AIO_MAX}}'
    status:
    - test {{.MIN_REQUIRED_AIO_MAX}} -le $(sysctl -nb fs.aio-max-nr)

  test:
    desc: run redpanda unit tests
    vars:
      CI: '{{ default "0" .CI}}'
      CTEST_ARGS: '{{default `-R ".*_rp(unit|bench|int)$"` .CTEST_ARGS}}'
    dir: '{{.BUILD_DIR}}'
    deps:
    - set-aio-max
    cmds:
    - ctest {{if eq .CI "1"}}"--output-on-failure" -LE "disable_on_ci"{{end}} {{.CTEST_ARGS}}

  build-test-docker-image:
    desc: build image used in integration tests
    cmds:
    - cp '{{.SRC_DIR}}/tests/docker/Dockerfile.dockerignore' '{{.SRC_DIR}}/.dockerignore'
    - |
      if [ '{{.CI}}' == 'true' ]; then
        chmod 644 '{{.SRC_DIR}}/tests/docker/ssh/'* '{{.SRC_DIR}}/tests/setup.py'
        chmod 755 '{{.SRC_DIR}}/tests/docker/ssh'
        docker pull docker.io/vectorized/redpanda-test-node:cache-{{ARCH}} || true
        docker build \
          --tag vectorized/redpanda-test-node \
          --file '{{.SRC_DIR}}/tests/docker/Dockerfile' \
          --cache-from docker.io/vectorized/redpanda-test-node:cache-{{ARCH}} \
          '{{.SRC_DIR}}'
      else
        docker build \
          --tag vectorized/redpanda-test-node \
          --file '{{.SRC_DIR}}/tests/docker/Dockerfile' \
          '{{.SRC_DIR}}'
      fi
    - rm '{{.SRC_DIR}}/.dockerignore'
    - cmd: "if [ '{{.CI}}' == 'true' ] && [ '{{.BRANCH_NAME}}' = 'dev' ] && [ '{{.BUILD_TYPE}}' = 'release' ] && [ '{{.COMPILER}}' = 'clang' ]; then docker login --username {{.DOCKERHUB_USER}} --password {{.DOCKERHUB_TOKEN}}; fi"
      silent: true
    - |
      if [ '{{.CI}}' = 'true' ] && [ '{{.BRANCH_NAME}}' = 'dev' ] && [ '{{.BUILD_TYPE}}' = 'release' ] && [ '{{.COMPILER}}' = 'clang' ]; then
        docker tag vectorized/redpanda-test-node docker.io/vectorized/redpanda-test-node:cache-{{ARCH}}
        docker push docker.io/vectorized/redpanda-test-node:cache-{{ARCH}}
      fi

  start-compose-cluster:
    desc: deploy a cluster using docker-compose
    deps:
    - :dev:install-docker-compose
    - :dev:start-podman-socket-service
    - build-test-docker-image
    dir: '{{.SRC_DIR}}/tests/docker/'
    env:
      BUILD_ROOT: '{{.BUILD_ROOT}}'
    cmds:
    - |
      PATH={{.BUILD_ROOT}}/bin/:$PATH
      docker-compose up --detach

  run-ducktape-tests:
    desc: run ducktape tests
    deps:
    - set-aio-max
    - start-compose-cluster
    vars:
      DUCKTAPE_ARGS: '{{default "--exit-first tests/rptest/test_suite_quick.yml" .DUCKTAPE_ARGS}}'
      RP_INSTALL_DIR_DEFAULT: '{{.BUILD_DIR}}'
      RP_INSTALL_DIR: '{{default .RP_INSTALL_DIR_DEFAULT .RP_INSTALL_DIR}}'
      REDPANDA_LOG_LEVEL: '{{default "info" .REDPANDA_LOG_LEVEL}}'
    env:
      CI: "1"
    ignore_error: true
    cmds:
    - mkdir -p '{{.BUILD_ROOT}}/ducktape/config/metadata'
    - docker run --rm --privileged
        --name ducktape
        --network redpanda
        --volume '{{.BUILD_ROOT}}/ducktape/config/:/root/.ducktape/'
        --volume '{{.BUILD_ROOT}}/ducktape/:/build/tests/'
        --volume '{{.BUILD_ROOT}}:{{.BUILD_ROOT}}'
        --volume '{{.SRC_DIR}}/tests/:/root/tests/'
        --volume '{{.SRC_DIR}}/tests/docker/ducktape_cluster.json:/cluster.json'
        --entrypoint ducktape
        --workdir /root
        vectorized/redpanda-test-node
          --cluster=ducktape.cluster.json.JsonCluster
          --cluster-file=/cluster.json
          --results-root=/build/tests/results
          --globals='{"rp_install_path_root":"{{.RP_INSTALL_DIR}}","redpanda_log_level":"{{.REDPANDA_LOG_LEVEL}}"}'
          {{.DUCKTAPE_ARGS}}

  stop-compose-cluster:
    desc: stop the compose cluster
    dir: '{{.SRC_DIR}}/tests/docker/'
    cmds:
    - |
      PATH={{.BUILD_ROOT}}/bin/:$PATH
      docker-compose down
