version: '3'

# GO_BUILD_ROOT defined in taskfiles/dev.yml

tasks:
  build:
    desc: build rpk
    deps:
    - task: :dev:install-go
    vars:
      RPK_VERSION: '{{default "latest" .TAG_NAME}}'
    env:
      GOOS: '{{OS | lower}}'
      GOPATH: '{{.GO_BUILD_ROOT}}'
      CGO_ENABLED: "0"
    dir: "{{.SRC_DIR}}/src/go/rpk"
    cmds:
    - mkdir -p "{{.BUILD_ROOT}}/go/$GOOS/bin"
    - |
      PATH={{.GO_BUILD_ROOT}}/bin:$PATH
      ver_pkg='github.com/vectorizedio/redpanda/src/go/rpk/pkg/cli/cmd/version'
      cont_pkg='github.com/vectorizedio/redpanda/src/go/rpk/pkg/cli/cmd/container/common'
      go build \
        -modcacherw \
        -ldflags \
          "-X ${ver_pkg}.version={{.RPK_VERSION}} \
           -X ${ver_pkg}.rev={{.SHORT_SHA}} \
           -X ${cont_pkg}.tag={{.RPK_VERSION}}" \
        -o "{{.BUILD_ROOT}}/go/$GOOS/bin" ./...

  fmt:
    desc: run formater on the go code
    dir: "{{.SRC_DIR}}/src/go"
    deps:
    - :dev:install-crlfmt
    cmds:
    - find . -name *.go -type f | xargs -n1 {{ .BUILD_ROOT }}/bin/go/crlfmt -wrap=80 -ignore '_generated.deepcopy.go$$' -w
    - git diff --exit-code

  tidy:
    desc: mod tidy rpk
    env:
      CGO_ENABLED: "0"
    dir: "{{.SRC_DIR}}/src/go"
    cmds:
    - |
      for dir in $(find . -maxdepth 1 -type d ! -path .); do
        cd $dir; go mod tidy; cd ..
      done

  test:
    desc: run rpk tests
    vars:
      CACHE_TESTS: '{{default "true" .CACHE_TESTS}}'
      FILTER: '{{default "" .FILTER}}'
    env:
      GOOS: '{{OS | lower}}'
      GOPATH: '{{.GO_BUILD_ROOT}}'
    dir: "{{.SRC_DIR}}/src/go/rpk"
    cmds:
    - |
      cmd="{{.GO_BUILD_ROOT}}/bin/go test -modcacherw ./..."
      if [ '{{.CACHE_TESTS}}' != 'true' ]; then
        cmd="$cmd -count=1"
      fi
      if [ '{{.FILTER}}' != '' ]; then
        cmd="$cmd -run {{.FILTER}}"
      fi
      $cmd
