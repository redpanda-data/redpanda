steps:
- id: 'create .git/ folder'
  name: 'gcr.io/cloud-builders/git'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    if [[ ! -d ".git/" ]]; then
      if [[ "$_GITHUB_API_TOKEN" == "na" ]]; then
        echo "Expecting value for _GITHUB_API_TOKEN"
        exit 1
      fi
      git init
      git remote add origin https://$_GITHUB_API_TOKEN@github.com/vectorizedio/v
      git fetch --depth=200 origin $COMMIT_SHA
      git reset --hard FETCH_HEAD
    fi

- id: 'build builder image'
  name: 'gcr.io/kaniko-project/executor:debug-v0.13.0'
  entrypoint: '/busybox/sh'
  args:
  - '-c'
  - >-
    /kaniko/executor \
      --dockerfile=tools/ci/Dockerfile \
      --build-arg="BUILD_TYPE=$_BUILD_TYPE" \
      --build-arg="COMPILER=$_COMPILER" \
      --destination="gcr.io/$PROJECT_ID/builder-$_COMPILER-$_BUILD_TYPE:$SHORT_SHA" \
      --cache=true \
      --cache-ttl=12h

- id: 'check source code formatting'
  name: 'gcr.io/$PROJECT_ID/builder-$_COMPILER-$_BUILD_TYPE:$SHORT_SHA'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    if [[ "$_COMPILER" == "clang" ]]; then
      vtools fmt all --conf=tools/ci/vtools-$_COMPILER-$_BUILD_TYPE.yml --check
    fi

- id: 'build redpanda'
  name: 'gcr.io/$PROJECT_ID/builder-$_COMPILER-$_BUILD_TYPE:$SHORT_SHA'
  args: ['vtools', 'build', 'cpp', '--conf=tools/ci/vtools-$_COMPILER-$_BUILD_TYPE.yml', '--skip-external']

- id: 'test redpanda'
  name: 'gcr.io/$PROJECT_ID/builder-$_COMPILER-$_BUILD_TYPE:$SHORT_SHA'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    sysctl -w  fs.aio-max-nr=1048576
    vtools test cpp --conf=tools/ci/vtools-$_COMPILER-$_BUILD_TYPE.yml

- id: 'test rpk'
  name: 'gcr.io/$PROJECT_ID/builder-$_COMPILER-$_BUILD_TYPE:$SHORT_SHA'
  args: ['vtools', 'test', 'go', '--conf=tools/ci/vtools-$_COMPILER-$_BUILD_TYPE.yml']

- id: 'build rpk'
  name: 'gcr.io/$PROJECT_ID/builder-$_COMPILER-$_BUILD_TYPE:$SHORT_SHA'
  args: ['vtools', 'build', 'go', '--conf=tools/ci/vtools-$_COMPILER-$_BUILD_TYPE.yml']

- id: 'create distro packages'
  name: 'gcr.io/$PROJECT_ID/builder-$_COMPILER-$_BUILD_TYPE:$SHORT_SHA'
  args: ['vtools', 'build', 'pkg', '--conf=tools/ci/vtools-$_COMPILER-$_BUILD_TYPE.yml', '--format=rpm', '--format=deb', '--format=tar']
  env:
  - 'SHORT_SHA=$SHORT_SHA'
  - 'TAG_NAME=$TAG_NAME'

- id: 'run integration tests'
  name: 'gcr.io/$PROJECT_ID/builder-$_COMPILER-$_BUILD_TYPE:$SHORT_SHA'
  args: ['vtools', 'test', 'pz', '--rp-extra-conf=infra/rp_configs/docker.yml', '--conf=tools/ci/vtools-$_COMPILER-$_BUILD_TYPE.yml']

- id: 'publish distro packages'
  name: 'gcr.io/$PROJECT_ID/builder-$_COMPILER-$_BUILD_TYPE:$SHORT_SHA'
  args: ['vtools', 'publish', '--conf=tools/ci/vtools-$_COMPILER-$_BUILD_TYPE.yml']
  env:
  - 'TAG_NAME=$TAG_NAME'
  - 'PACKAGECLOUD_TOKEN=$_PACKAGECLOUD_TOKEN'

- id: 'delete or tag builder image'
  name: 'gcr.io/cloud-builders/gcloud-slim'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    if [[ "$TAG_NAME" != "" ]] && [[ "$_BUILD_TYPE" == "release" ]] && [[ "$_COMPILER" == "clang" ]]; then
      gcloud container images add-tag gcr.io/$PROJECT_ID/builder-$_COMPILER-$_BUILD_TYPE:$SHORT_SHA gcr.io/$PROJECT_ID/builder-frozen:$TAG_NAME
    else
      gcloud container images delete gcr.io/$PROJECT_ID/builder-$_COMPILER-$_BUILD_TYPE:$SHORT_SHA
    fi

timeout: 3600s

substitutions:
  _BUILD_TYPE: release
  _COMPILER: gcc
  _PACKAGECLOUD_TOKEN: "na"
  _GITHUB_API_TOKEN: "na"

options:
  machineType: 'N1_HIGHCPU_32'

artifacts:
  objects:
    location: 'gs://vectorizedio/rp/$_BUILD_TYPE/$_COMPILER/$SHORT_SHA/'
    paths:
    - 'build/$_BUILD_TYPE/$_COMPILER/dist/debian/*.deb'
    - 'build/$_BUILD_TYPE/$_COMPILER/dist/rpm/RPMS/x86_64/*.rpm'
    - 'build/$_BUILD_TYPE/$_COMPILER/dist/tar/*.tar.gz'
